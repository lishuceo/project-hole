<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GameCore</name>
    </assembly>
    <members>
        <member name="T:GameCore.SceneSystem.Data.GameDataScene">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.GameDataScene.HostedSceneTag">
            <summary>
            The scene asset file identifier for the scene in the engine, multiple scenes can share the same asset if needed.
            The scene asset file should be unique in each project and case-insensitive to avoid conflicts.
            Scene asset files are generated by the Terrain Editor and not be able to created by the code.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.GameDataScene.Size">
            <summary>
            The size of the scene in world units.
            The size must be a multiple of 128 to ensure proper alignment and rendering.
            The size must be the same as the scene asset file size in the engine.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.GameDataScene.DefaultCamera">
            <summary>
            Gets or sets the default camera used in the game for this scene.
            When the scene is loaded on the client, this camera will be used to render the scene.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.GameDataScene.PlacedSceneShapes">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.GameDataScene.PlacedPlayerObjects">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.GameDataScene.GetPlacedUnit(System.Int32)">
            <summary />
            <param name="id" />
            <returns />
        </member>
        <member name="M:GameCore.SceneSystem.Data.GameDataScene.GetPlacedItem(System.Int32)">
            <summary />
            <param name="id" />
            <returns />
        </member>
        <member name="F:GameCore.SceneSystem.Data.GameDataScene.OnLoaded">
            <summary />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedItem">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedItem.TriggerGetterInstance">
            <summary>
            The instance of the item placed in the scene.
            Ignore cloned scenes.
            </summary>
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedItem.ToString">
            <summary />
            <returns />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedLine">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedLine.#ctor(System.Collections.Generic.IEnumerable{System.Numerics.Vector2})">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedLine.Points">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedLine.op_Implicit(GameCore.SceneSystem.Data.Struct.PlacedLine)~System.Collections.Generic.List{System.Numerics.Vector2}">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedLine.op_Implicit(System.Collections.Generic.List{System.Numerics.Vector2})~GameCore.SceneSystem.Data.Struct.PlacedLine">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedLine.op_Implicit(System.Numerics.Vector2[])~GameCore.SceneSystem.Data.Struct.PlacedLine">
            <summary />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedObject">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.UniqueId">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.HiddenInEditor">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.LockedInEditor">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.Position">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.Facing">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.SyncedScale">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.CustomTag">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.FolderTag">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.GroupTag">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedObject.SyncedRandomIndex">
            <summary />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.OwnerPlayerId">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.TriggerGetter">
            <summary>
            触发编辑器只要获取了一次就为 true，不再重置。
            </summary>
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.#ctor">
            <summary />
        </member>
        <member name="F:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.aggregator">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.Events#IEventSender#Aggregator">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.AggregatorWeakReference">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.Owner">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.GetScenePoint(GameCore.SceneSystem.Scene)">
            <summary />
            <param name="scene" />
            <returns />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject`1">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject`1.Link">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject`1.ToString">
            <summary />
            <returns />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedPoint">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedPoint.#ctor(System.Numerics.Vector2)">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedPoint.Position">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedPoint.op_Implicit(GameCore.SceneSystem.Data.Struct.PlacedPoint)~System.Numerics.Vector2">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedPoint.op_Implicit(System.Numerics.Vector2)~GameCore.SceneSystem.Data.Struct.PlacedPoint">
            <summary />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedRegionCircle">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedRegionCircle.#ctor(System.Numerics.Vector2,System.Single)">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedRegionCircle.Center">
            <summary>
            Gets the center point of the circle.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedRegionCircle.Radius">
            <summary>
            Gets the radius of the circle.
            </summary>
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedRegionRectangle">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedRegionRectangle.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedRegionRectangle.Position">
            <summary>
            Gets the position of the rectangle (top-left corner).
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedRegionRectangle.Size">
            <summary>
            Gets the size of the rectangle as a <see cref="T:System.Numerics.Vector2" /> (X: width, Y: height).
            </summary>
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedRegionRectangle.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
            <summary />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedSceneShape">
            <summary />
        </member>
        <member name="T:GameCore.SceneSystem.Data.Struct.PlacedUnit">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedUnit.IsMainUnit">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedUnit.UseDefaultAI">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedUnit.CustomProperties">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedUnit.TriggerGetterInstance">
            <summary>
            The instance of the unit placed in the scene.
            Ignore cloned scenes.
            </summary>
        </member>
        <member name="M:GameCore.SceneSystem.Data.Struct.PlacedUnit.ToString">
            <summary />
            <returns />
        </member>
        <member name="T:GameCore.SceneSystem.HostedSceneTag">
            <summary>
            框架和引擎交互时用于标识场景的结构体。
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.HostedSceneTag.IsTemplate">
            <summary />
        </member>
        <member name="F:GameCore.SceneSystem.HostedSceneTag.SceneTag">
            <summary>
            场景在引擎中的唯一标识符，每个场景都应该有一个唯一的标识符。
            但不同场景可以共享相同的场景素材文件（通过<see cref="P:GameCore.SceneSystem.HostedSceneTag.AssetTemplate" />字段）。
            </summary>
        </member>
        <member name="F:GameCore.SceneSystem.HostedSceneTag.assetTemplate">
            <summary>
            场景素材文件的标识符，通常是一个字符串，表示场景在引擎中的素材文件路径。
            若不填，则使用<see cref="F:GameCore.SceneSystem.HostedSceneTag.SceneTag" />作为素材文件标识符。"/&gt;。
            多个场景可以共享相同的素材文件。此时它们的<see cref="F:GameCore.SceneSystem.HostedSceneTag.SceneTag" />应该不同，但<see cref="P:GameCore.SceneSystem.HostedSceneTag.AssetTemplate" />相同。
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.HostedSceneTag.AssetTemplate">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.HostedSceneTag.#ctor(EngineCommon.UTF8String,EngineCommon.UTF8String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.SceneSystem.HostedSceneTag" /> class with the specified scene tag and asset
            template.
            </summary>
            <param name="sceneTag">The unique identifier for the scene, represented as a UTF-8 string. This value cannot be null.</param>
            <param name="assetTemplate">The template associated with the scene, represented as a UTF-8 string. This value cannot be null.</param>
        </member>
        <member name="M:GameCore.SceneSystem.HostedSceneTag.#ctor(EngineCommon.UTF8String)">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.HostedSceneTag.ToString">
            <summary />
            <returns />
        </member>
        <member name="M:GameCore.SceneSystem.HostedSceneTag.op_Implicit(EngineCommon.UTF8String)~GameCore.SceneSystem.HostedSceneTag">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.HostedSceneTag.op_Implicit(System.String)~GameCore.SceneSystem.HostedSceneTag">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.HostedSceneTag.op_Implicit(System.ReadOnlySpan{System.Byte})~GameCore.SceneSystem.HostedSceneTag">
            <summary />
        </member>
        <member name="T:GameCore.SceneSystem.Scene">
            <summary>
            Represents a game scene that contains entities, effects, and provides spatial operations for game world management.
            </summary>
            <remarks>
            Scene is a fundamental container for all game objects within a defined game world area. It manages entity lifecycle,
            spatial queries, pathfinding, and scene loading/unloading operations. Each scene has a unique identifier and can be
            loaded or unloaded dynamically based on game needs. Scenes support advanced spatial operations like circular,
            rectangular, and cone-based searches for entities, making them essential for AI, combat, and interaction systems.
            The scene system integrates with the engine's view layer for rendering and physics, while providing game-logic
            abstractions for entity management and spatial relationships.
            </remarks>
            <summary />
            <summary />
        </member>
        <member name="E:GameCore.SceneSystem.Scene.OnLoadStart">
            <summary>
            Occurs when the scene starts loading.
            </summary>
            <remarks>
            This event is fired at the beginning of the scene loading process, before any entities
            or placed objects are created. It's useful for systems that need to prepare for scene content.
            </remarks>
        </member>
        <member name="E:GameCore.SceneSystem.Scene.OnLoadEnd">
            <summary>
            Occurs when the scene finishes loading.
            </summary>
            <remarks>
            This event is fired after the scene and all its content have been fully loaded and initialized.
            It indicates that the scene is ready for gameplay and all placed objects are available.
            </remarks>
        </member>
        <member name="F:GameCore.SceneSystem.Scene._scenes">
            <summary />
        </member>
        <member name="F:GameCore.SceneSystem.Scene._size">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Scene.AllScenes">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Scene.IsLogicScene">
            <summary>
            Indicates whether this scene is a logic scene, which means it is created with the asset of another template scene
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Size">
            <summary>
            Gets the size dimensions of this scene.
            </summary>
            <value>A Vector2 representing the width and height of the scene in world units.</value>
            <remarks>
            The scene size determines the valid coordinate space for entities and operations within the scene.
            Size is cached for performance and retrieved from either the game data configuration or the view scene.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.#ctor(EngineInterface.GoInterface.IViewScene,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new scene instance with the specified view scene and name.
            </summary>
            <param name="scene">The engine view scene that backs this game scene.</param>
            <param name="nameSpan">The name of the scene as a byte span.</param>
            <remarks>
            This constructor creates a scene from a name, generating a hash-based sync ID for network synchronization.
            On the server, it sets up load event handlers for proper scene lifecycle management.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Scene_OnLoadStart">
            <summary>
            Handles the scene load start event on the client side.
            </summary>
            <remarks>
            This method is called by the client replication system when a scene begins loading.
            It fires appropriate events to notify client systems of the loading process.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Scene_OnLoadEnd">
            <summary>
            Handles the scene load end event on the client side.
            </summary>
            <remarks>
            This method is called by the client replication system when a scene finishes loading.
            It fires appropriate events to notify client systems that the scene is ready.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.#ctor(EngineInterface.GoInterface.IViewScene,System.Int32,System.String)">
            <summary>
            Initializes a new scene instance with the specified view scene, sync ID, and name.
            </summary>
            <param name="scene">The engine view scene that backs this game scene.</param>
            <param name="syncId">The synchronization identifier for this scene.</param>
            <param name="name">The name of the scene.</param>
            <remarks>
            This constructor is used for client-side scene replication where the sync ID and name
            are provided from server synchronization data.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.#ctor(EngineInterface.GoInterface.IViewScene,GameData.IGameLink{GameCore.SceneSystem.Data.GameDataScene})">
            <summary>
            Initializes a new scene instance from a game data link.
            </summary>
            <param name="scene">The engine view scene that backs this game scene.</param>
            <param name="link">The game data link containing scene configuration.</param>
            <remarks>
            This constructor creates a scene from game data configuration, using the hosted scene tag
            to generate a consistent sync ID for network synchronization.
            </remarks>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Link">
            <summary>
            Gets the game data link that defines this scene's configuration.
            </summary>
            <value>The game data link for this scene, or null if the scene was created without data.</value>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Cache">
            <summary>
            Gets the cached game data configuration for this scene.
            </summary>
            <value>The scene configuration data, or null if no data link is available.</value>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.ViewScene">
            <summary>
            Gets the engine view scene that backs this game scene.
            </summary>
            <value>The view scene interface for engine operations.</value>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Get(System.ReadOnlySpan{System.Byte})">
            <summary>
            Retrieves a scene by its name.
            </summary>
            <param name="sceneName">The name of the scene as a byte span.</param>
            <returns>The scene with the specified name, or null if not found.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetOrCreate(System.ReadOnlySpan{System.Byte})">
            <summary>
            Retrieves an existing scene or creates a new one with the specified name.
            </summary>
            <param name="sceneName">The name of the scene as a byte span.</param>
            <returns>The existing scene or a newly created scene with the specified name.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Get(System.Int32)">
            <summary>
            Retrieves a scene by its hash identifier.
            </summary>
            <param name="sceneHash">The hash identifier of the scene.</param>
            <returns>The scene with the specified hash, or null if not found.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetOrCreate(System.Int32,System.String)">
            <summary>
            Retrieves an existing scene or creates a new one with the specified hash and name.
            </summary>
            <param name="sceneHash">The hash identifier of the scene.</param>
            <param name="name">The optional name for the scene if it needs to be created.</param>
            <returns>The existing scene or a newly created scene with the specified parameters.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Get(GameData.IGameLink{GameCore.SceneSystem.Data.GameDataScene})">
            <summary>
            Retrieves a scene by its game data link.
            </summary>
            <param name="link">The game data link for the scene.</param>
            <returns>The scene associated with the data link, or null if not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the link has invalid data.</exception>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetOrCreate(GameData.IGameLink{GameCore.SceneSystem.Data.GameDataScene})">
            <summary>
            Retrieves an existing scene or creates a new one from the specified game data link.
            </summary>
            <param name="link">The game data link for the scene.</param>
            <returns>The existing scene or a newly created scene from the data link.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the link has invalid data.</exception>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.SyncId">
            <summary>
            Gets the unique synchronization identifier for this scene.
            </summary>
            <value>The sync ID used for network synchronization and scene identification.</value>
        </member>
        <member name="F:GameCore.SceneSystem.Scene.name">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Name">
            <summary>
            Gets the name of this scene.
            </summary>
            <value>The scene name, or the friendly name from the data link if no explicit name is set.</value>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.SyncIdType">
            <summary>
            Gets the synchronization ID type for scenes.
            </summary>
            <value>The sync ID type indicating this is a scene object.</value>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GameCore.SceneSystem.Scene.ToString">
            <summary>
            Returns a string representation of this scene.
            </summary>
            <returns>The scene name or sync ID as a string.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.AddEntity(GameCore.EntitySystem.Entity)">
            <summary>
            Adds an entity to this scene's entity collection.
            </summary>
            <param name="entity">The entity to add to the scene.</param>
            <returns>True if the entity was successfully added; otherwise, false.</returns>
            <remarks>
            This method is used internally to register entities with the scene when they are created
            or moved into the scene. Entities must be properly registered to participate in scene operations.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.RemoveEntity(GameCore.EntitySystem.Entity)">
            <summary>
            Removes an entity from this scene's entity collection.
            </summary>
            <param name="entity">The entity to remove from the scene.</param>
            <returns>True if the entity was successfully removed; otherwise, false.</returns>
            <remarks>
            This method is used internally to unregister entities from the scene when they are destroyed
            or moved to a different scene. Removed entities will no longer participate in scene operations.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetEntities(System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Gets all entities in this scene, optionally filtered by a predicate.
            </summary>
            <param name="filter">An optional filter function to apply to entities.</param>
            <returns>An enumerable collection of entities that match the filter criteria.</returns>
            <remarks>
            This method provides access to all entities in the scene with optional filtering.
            It's useful for systems that need to process specific types of entities or entities
            meeting certain criteria without spatial constraints.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetMorphs``1(System.Func{GameCore.EntitySystem.Entity,``0})">
            <summary>
            Gets entities in this scene transformed through a morph function, filtering out null results.
            </summary>
            <typeparam name="TMorph">The type of the transformed result.</typeparam>
            <param name="morph">A function that transforms entities to the desired type or returns null.</param>
            <returns>An enumerable collection of successfully transformed entities.</returns>
            <remarks>
            This method is useful for type-safe entity processing where you want to extract specific
            types or aspects of entities. For example, getting all units, or all entities with a
            specific component type.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.AddEffectPersist(GameCore.Execution.EffectPersist)">
            <summary>
            Adds an effect persist to the scene's collection for lifecycle management.
            </summary>
            <param name="effectPersist">The effect persist to add to the scene.</param>
            <returns>True if the effect was added; false if the target is an entity (handled elsewhere).</returns>
            <remarks>
            This method is currently only used to store EffectPersists that are not attached to any entity.
            This ensures that standalone effects are properly stopped when the scene is unloaded.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.RemoveEffectPersist(GameCore.Execution.EffectPersist)">
            <summary>
            Removes an effect persist from the scene's collection.
            </summary>
            <param name="effectPersist">The effect persist to remove from the scene.</param>
            <returns>True if the effect was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchCircle(GameCore.SceneSystem.ScenePoint,System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Searches for entities within a circular area around a center point.
            </summary>
            <param name="center">The center point of the search circle.</param>
            <param name="radius">The radius of the search circle.</param>
            <param name="filter">An optional filter to apply to found entities.</param>
            <returns>An enumerable collection of entities within the search area, or null if no entities are found.</returns>
            <remarks>
            This method performs efficient spatial queries using the engine's optimized search algorithms.
            It's commonly used for area-of-effect abilities, proximity detection, and AI awareness systems.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchCircle``1(GameCore.SceneSystem.ScenePoint,System.Single,System.Func{GameCore.EntitySystem.Entity,``0})">
            <inheritdoc cref="M:GameCore.SceneSystem.Scene.SearchCircle(GameCore.SceneSystem.ScenePoint,System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})" />
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchRectangle(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Searches for entities within a rectangular area.
            </summary>
            <param name="position">The center position of the rectangle.</param>
            <param name="facing">The facing direction that determines rectangle orientation.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="filter">An optional filter to apply to found entities.</param>
            <returns>An enumerable collection of entities within the search area, or null if no entities are found.</returns>
            <remarks>
            Rectangle searches are useful for directional effects like breath weapons, beam attacks,
            or area selection tools. The rectangle is oriented based on the facing direction.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchRectangle``1(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,System.Single,System.Func{GameCore.EntitySystem.Entity,``0})">
            <inheritdoc cref="M:GameCore.SceneSystem.Scene.SearchRectangle(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})" />
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchCone(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,GameCore.BaseType.Angle,System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Searches for entities within a cone-shaped area.
            </summary>
            <param name="position">The apex position of the cone.</param>
            <param name="facing">The central direction of the cone.</param>
            <param name="radius">The maximum distance from the apex.</param>
            <param name="centralAngle">The total angle of the cone spread.</param>
            <param name="filter">An optional filter to apply to found entities.</param>
            <returns>An enumerable collection of entities within the search area, or null if no entities are found.</returns>
            <remarks>
            Cone searches are perfect for implementing vision cones, spell effects with directional spread,
            or weapon attacks with angular coverage. The cone extends from the position in the facing direction.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchCone``1(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,GameCore.BaseType.Angle,System.Func{GameCore.EntitySystem.Entity,``0})">
            <inheritdoc cref="M:GameCore.SceneSystem.Scene.SearchCone(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,GameCore.BaseType.Angle,System.Func{GameCore.EntitySystem.Entity,System.Boolean})" />
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetPlacedUnit(System.Int32)">
            <summary>
            Retrieves a placed unit configuration by its placement identifier.
            </summary>
            <param name="placeId">The unique identifier of the placed unit.</param>
            <returns>The placed unit configuration, or null if not found.</returns>
            <remarks>
            Placed units are predefined entity configurations stored in the scene data that can be
            instantiated at specific locations. This method accesses the placement definitions.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetPlacedItem(System.Int32)">
            <summary>
            Retrieves a placed item configuration by its placement identifier.
            </summary>
            <param name="placeId">The unique identifier of the placed item.</param>
            <returns>The placed item configuration, or null if not found.</returns>
            <remarks>
            Placed items are predefined item configurations stored in the scene data that can be
            instantiated at specific locations. This method accesses the placement definitions.
            </remarks>
        </member>
        <member name="F:GameCore.SceneSystem.Scene.aggregator">
            <summary />
        </member>
        <member name="F:GameCore.SceneSystem.Scene.aggregatorWeakReference">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Events#IEventSender#Aggregator">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.Scene.AggregatorWeakReference">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Publish``1(``0)">
            <summary />
            <typeparam name="TEvent" />
            <param name="eventToPublish" />
            <returns />
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetPublisher``1">
            <summary />
            <typeparam name="TEvent" />
            <returns />
        </member>
        <member name="M:GameCore.SceneSystem.Scene.OnRegisterGameClass">
            <summary />
            <returns />
        </member>
        <member name="T:GameCore.SceneSystem.ScenePoint">
            <summary>
            Represents a three-dimensional point within a specific game scene, implementing targeting and positioning interfaces.
            </summary>
            <remarks>
            ScenePoint is a fundamental structure for representing positions in the game world. It combines 3D coordinates
            with a scene reference, ensuring that all position operations are scene-aware. The structure implements ITarget
            to participate in the targeting system and provides comprehensive spatial operations including distance calculations,
            angle computations, and coordinate transformations. ScenePoint supports pathfinding integration on the server side
            and ground height queries on the client side. It serves as the primary position representation throughout the
            game systems for entities, effects, and spatial queries.
            </remarks>
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(System.Numerics.Vector2,GameCore.SceneSystem.Scene)">
            <summary>
            Initializes a new ScenePoint with the specified 2D coordinates and scene.
            </summary>
            <param name="point">The 2D position in the scene.</param>
            <param name="scene">The scene that contains this point.</param>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(System.Numerics.Vector3,GameCore.SceneSystem.Scene)">
            <summary>
            Initializes a new ScenePoint with the specified 3D coordinates and scene.
            </summary>
            <param name="point">The 3D position in the scene. Format: Vector3(x, y, z) where XY is ground position and Z is height.</param>
            <param name="scene">The scene that contains this point.</param>
            <remarks>
            ⚠️ Coordinate System: This framework uses Z-axis as height axis.
            - X and Y represent ground plane coordinates
            - Z represents height/elevation (jumping axis)
            The Z coordinate is extracted and stored separately while X and Y are used for the 2D vector.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(System.Single,System.Single,GameCore.SceneSystem.Scene)">
            <summary>
            Initializes a new ScenePoint with the specified X, Y coordinates and scene.
            </summary>
            <param name="x">The X coordinate in the scene.</param>
            <param name="y">The Y coordinate in the scene.</param>
            <param name="scene">The scene that contains this point.</param>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(EngineInterface.GoInterface.IScenePoint)">
            <summary>
            Initializes a new ScenePoint by copying from another scene point interface.
            </summary>
            <param name="scenePoint">The scene point to copy from.</param>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(GameCore.SceneSystem.ScenePoint)">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.X">
            <summary>
            Gets the X coordinate of this point.
            </summary>
            <value>The X coordinate in world units.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Y">
            <summary>
            Gets the Y coordinate of this point.
            </summary>
            <value>The Y coordinate in world units.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Z">
            <summary>
            Gets or sets the Z coordinate (height) of this point.
            </summary>
            <value>The Z coordinate in world units. This represents the height/elevation above the ground plane (XY).</value>
            <remarks>
            ⚠️ Important: Z-axis is the height axis in this framework. Use this for jumping, flying, falling, and vertical positioning.
            </remarks>
        </member>
        <member name="F:GameCore.SceneSystem.ScenePoint.vector">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Vector">
            <summary>
            Gets the 2D vector representation of this point.
            </summary>
            <value>A Vector2 containing the X and Y coordinates.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Vector3">
            <summary>
            Gets the 3D vector representation of this point.
            </summary>
            <value>A Vector3 containing the X, Y, and Z coordinates.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#BaseInterface#ITarget#Position">
            <summary>
            Gets this scene point as a target position.
            </summary>
            <value>This instance as an ITarget position.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#BaseInterface#ITarget#IsValid">
            <summary>
            Gets a value indicating whether this scene point is always valid.
            </summary>
            <value>Always returns true as scene points are inherently valid.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#BaseInterface#ITarget#CanChangePosition">
            <summary>
            Gets a value indicating whether this scene point's position can be changed.
            </summary>
            <value>Always returns false as scene points are immutable position references.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.EngineInterface#GoInterface#IScenePoint#Scene">
            <summary />
        </member>
        <member name="F:GameCore.SceneSystem.ScenePoint.Scene">
            <summary>
            Gets the scene that contains this point.
            </summary>
            <value>The scene reference for this point.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Constrained">
            <summary>
            Gets a constrained version of this point that is clamped within the scene boundaries.
            </summary>
            <value>A new ScenePoint with coordinates clamped to valid scene bounds.</value>
            <remarks>
            This property ensures that the coordinates are within the valid range of the scene,
            preventing out-of-bounds positions. The X and Y coordinates are clamped to [0, Size-1].
            </remarks>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.ApproachableTarget">
            <summary>
            Gets the approachable target interface for this scene point.
            </summary>
            <value>This instance as an approachable target for pathfinding.</value>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.op_Addition(GameCore.SceneSystem.ScenePoint,System.Nullable{GameCore.SceneSystem.ScenePoint})">
            <summary>
            Adds two scene points together, combining their coordinates.
            </summary>
            <param name="x">The first scene point.</param>
            <param name="y">The second scene point, or null.</param>
            <returns>A new scene point with combined coordinates.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the scene points are in different scenes.</exception>
            <remarks>
            If y is null, returns x unchanged. Otherwise, both points must be in the same scene.
            The resulting point has the sum of coordinates and Z values.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.GetGroundHeight">
            <summary>
            Gets the ground height at this scene point's X and Y coordinates.
            </summary>
            <returns>The ground height at this position.</returns>
            <remarks>
            This method queries the client-side terrain system to determine the ground height
            at the specified coordinates. It's useful for positioning objects on terrain surfaces
            and for visual effects that need to align with the ground.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Distance(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Calculates the 3D distance to another scene point.
            </summary>
            <param name="otherPoint">The other scene point to calculate distance to.</param>
            <returns>The 3D distance between points, or float.MaxValue if in different scenes.</returns>
            <remarks>
            This method calculates the Euclidean distance in 3D space including the Z coordinate.
            Points in different scenes are considered infinitely far apart.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Distance2D(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Calculates the 2D distance to another scene point (ignoring Z coordinate).
            </summary>
            <param name="otherPoint">The other scene point to calculate distance to.</param>
            <returns>The 2D distance between points, or null if in different scenes.</returns>
            <remarks>
            This method calculates the Euclidean distance using only X and Y coordinates,
            which is useful for ground-based movement and area calculations.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Distance2DSquared(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Calculates the squared 2D distance to another scene point for performance optimization.
            </summary>
            <param name="otherPoint">The other scene point to calculate distance to.</param>
            <returns>The squared 2D distance between points, or null if in different scenes.</returns>
            <remarks>
            Squared distance is computationally cheaper as it avoids the square root operation.
            This is useful for distance comparisons where the actual distance value isn't needed.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Offset(System.Numerics.Vector2)">
            <summary>
            Creates a new scene point offset by the specified 2D vector.
            </summary>
            <param name="offset">The 2D offset to apply.</param>
            <returns>A new scene point with the applied offset.</returns>
            <remarks>
            This method creates a new instance with modified X and Y coordinates.
            The Z coordinate and scene reference remain unchanged.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Offset(System.Single,System.Single)">
            <summary>
            Creates a new scene point offset by the specified X and Y amounts.
            </summary>
            <param name="x">The X offset to apply.</param>
            <param name="y">The Y offset to apply.</param>
            <returns>A new scene point with the applied offset.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Lerp(GameCore.SceneSystem.ScenePoint,System.Single)">
            <summary>
            Creates a new scene point interpolated between this point and a target point.
            </summary>
            <param name="target">The target scene point to interpolate towards.</param>
            <param name="amount">The interpolation factor between 0.0 and 1.0.</param>
            <returns>A new scene point at the interpolated position.</returns>
            <remarks>
            Linear interpolation creates smooth movement between two points. An amount of 0.0
            returns this point, 1.0 returns the target, and 0.5 returns the midpoint.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.PolarTo(GameCore.BaseType.Angle,System.Double)">
            <summary>
            Creates a new scene point at the specified angle and distance from this point.
            </summary>
            <param name="angle">The angle to move in.</param>
            <param name="distance">The distance to move.</param>
            <returns>A new scene point at the calculated position.</returns>
            <remarks>
            This method uses polar coordinates to calculate a new position relative to this point.
            If distance is zero, returns this point unchanged. The calculation is performed in 2D space.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.PolarToRadian(System.Double,System.Double)">
            <summary>
            Creates a new scene point at the specified radian angle and distance from this point.
            </summary>
            <param name="radian">The angle in radians to move in.</param>
            <param name="distance">The distance to move.</param>
            <returns>A new scene point at the calculated position.</returns>
            <remarks>
            This method performs the polar coordinate calculation using radian angle representation
            for precise mathematical operations. It's used internally by the Angle-based method.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.AngleTo(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Calculates the angle from this point to the target point.
            </summary>
            <param name="target">The target scene point to calculate angle to.</param>
            <returns>The angle to the target, or null if points are identical or in different scenes.</returns>
            <remarks>
            The angle is calculated using the arctangent of the Y and X coordinate differences.
            If the points are at the same position, no meaningful angle can be calculated.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.ToString">
            <summary>
            Returns a string representation of this scene point.
            </summary>
            <returns>A formatted string containing coordinates and scene information.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.SameScene(GameCore.BaseInterface.ITarget)">
            <inheritdoc />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.CanBeSeen(GameCore.EntitySystem.Entity)">
            <inheritdoc />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.GetStaticCollisionMask(System.Boolean)">
            <summary />
            <param name="checkDynamicApplied" />
            <returns />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.op_Addition(GameCore.SceneSystem.ScenePoint,System.Numerics.Vector2)">
            <summary>
            Adds a 2D vector offset to a scene point.
            </summary>
            <param name="point">The scene point to offset.</param>
            <param name="offset">The 2D offset vector to add.</param>
            <returns>A new scene point with the applied offset.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.op_Equality(GameCore.SceneSystem.ScenePoint,GameCore.SceneSystem.ScenePoint)">
            <summary>
            Compares two scene points for equality.
            </summary>
            <param name="left">The first scene point to compare.</param>
            <param name="right">The second scene point to compare.</param>
            <returns>True if the scene points are equal; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.op_Inequality(GameCore.SceneSystem.ScenePoint,GameCore.SceneSystem.ScenePoint)">
            <summary>
            Compares two scene points for inequality.
            </summary>
            <param name="left">The first scene point to compare.</param>
            <param name="right">The second scene point to compare.</param>
            <returns>True if the scene points are not equal; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.SearchInRange(System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Searches for entities within the specified range of this scene point.
            </summary>
            <param name="range">The search radius around this point.</param>
            <param name="filter">An optional filter to apply to found entities.</param>
            <returns>An enumerable of entities within range, or null if the scene is invalid or no entities are found.</returns>
            <remarks>
            This method provides a convenient way to perform circular area searches centered on this point.
            It delegates to the scene's search functionality with proper error handling.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.SearchInRange``1(System.Single,System.Func{GameCore.EntitySystem.Entity,``0})">
            <summary>
            Searches for entities within the specified range and transforms them using a morph function.
            </summary>
            <typeparam name="TMorph">The type of the transformation result.</typeparam>
            <param name="range">The search radius around this point.</param>
            <param name="morph">A function that transforms entities to the desired type or returns null.</param>
            <returns>An enumerable of transformed entities within range, or null if the scene is invalid or no entities are found.</returns>
            <remarks>
            This method combines spatial searching with type transformation, providing a convenient
            way to find and process specific types of entities within a given area.
            </remarks>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#ActorSystem#IActorScopeContext#Target">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#ActorSystem#IActorScopeContext#Link">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#ActorSystem#IActorScopeContext#Player">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#ActorSystem#IActorScopeContext#Scale">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#ActorSystem#IActorScopeContext#Volume">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#ActorSystem#IActorScopeContext#Facing">
            <summary />
        </member>
        <member name="T:GameCore.SceneSystem.ScenePointContext">
            <summary>
            Represents a context for a scene point, including the scene point itself and a flag indicating whether to use the
            ground's Z coordinate.
            </summary>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePointContext.#ctor(GameCore.SceneSystem.ScenePoint,System.Boolean)">
            <summary>
            Represents a context for a scene point, including the scene point itself and a flag indicating whether to use the
            ground's Z coordinate.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePointContext.ScenePoint">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePointContext.OffsetByGroundZ">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePointContext.IsAbsoluteHeight">
            <summary />
        </member>
        <member name="P:GameCore.SceneSystem.ScenePointContext.WorldPosition">
            <summary />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePointContext.ToScenePointWithGroundZOffset">
            <summary />
            <returns />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePointContext.ToScenePointWithAbsoluteHeight">
            <summary />
            <returns />
        </member>
        <member name="M:GameCore.SceneSystem.ScenePointContext.AsLaunchSiteFor(GameCore.ActorSystem.IActorDualEndPoints)">
            <summary />
            <param name="actor" />
            <returns />
        </member>
    </members>
</doc>