using EngineInterface.BaseType;

using GameCore.AbilitySystem.Data;
using GameCore.SceneSystem;
using GameCore.AbilitySystem.Data.Enum;
using GameCore.ActorSystem.Data;
using GameCore.AISystem.Data;
using GameCore.AISystem.Data.Enum;
using GameCore.BuffSystem.Data;
using GameCore.BuffSystem.Data.Enum;
using GameCore.BuffSystem.Data.Struct;
using GameCore.Localization;

using GameUI.CameraSystem.Data;

using GameCore.Container;
using GameCore.Container.Data;
using GameCore.CooldownSystem.Data;
using GameCore.Data;
using GameCore.EntitySystem.Data.Enum;
using GameCore.Execution.Data;
using GameCore.GameSystem.Data;
using GameCore.PlayerAndUsers.Enum;
using GameCore.ResourceType.Data;
using GameCore.ResourceType.Data.Enum;
using GameCore.SceneSystem.Data;
using GameCore.SceneSystem.Data.Struct;

using GameData;

using GameCore.TargetingSystem.Data;
using GameCore.ActorSystem.Data.Enum;
using GameCore.Animation.Enum;

using GameUI.Brush;
using GameUI.Control.Data;
using GameUI.Control.Enum;
#if CLIENT
using GameUI.Control.Primitive;
#endif
using GameUI.Enum;

using System.Drawing;
using System.Numerics; // Ê∑ªÂä†Vector2ÊîØÊåÅ

using static GameCore.ScopeData;

using GameEntry.TypedMessageTest;

using GameCore.ModelAnimation.Data;
using GameCore;
using GameCore.AbilitySystem.Manager;
using GameCore.EntitySystem;
using GameCore.OrderSystem;
using GameCore.Shape.Data;
using GameCore.PhysicsSystem.Struct;
using GameCore.PhysicsSystem.Enum;
using GameCore.CameraSystem.Enum;
using GameCore.Leveling.Data;
using GameUI.Data;
using GameCore.GameSystem.Enum;
using GameCore.DamageSystem.Data;
using GameEntry.BuildingSystem;
using GameEntry.TowerDefenseGame;
using GameEntry.TowerDefenseGame.SpawnSystem;
using GameCore.CameraSystem.Struct;
using GameCore.CollisionSystem.Data.Struct;

namespace GameEntry;
public partial class ScopeData : IGameClass
{
    public static class Control
    {
        public static readonly GameLink<GameDataControl, GameDataControlButton> TestButton = new("TestButton");
        public static readonly GameLink<GameDataControl, GameDataControlButton> TestButton2 = new("TestButton2");
    }

    public static class GameMode
    {
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> VampireSurvivors3D = new("VampireSurvivors3D"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> VampireSurvivors2D = new("VampireSurvivors2D"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> FlappyBird = new("FlappyBird"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> JoyStickTest = new("JoyStickTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> GameUITest = new("GameUITest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> TypedMessageTest = new("TypedMessageTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> Gomoku = new("Gomoku"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> UserCloudDataTest = new("UserCloudDataTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> AISystemTest = new("AISystemTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> PrimitiveShapeTest = new("PrimitiveShapeTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> RPGRoleTest = new("RPGRoleTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> ModernUITest = new("ModernUITest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> BuffTest = new("BuffTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> ScriptPerformanceTest = new("ScriptPerformanceTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> Game2048 = new("Game2048"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> JumpJump = new("JumpJump"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> TouchBehaviorTest = new("TouchBehaviorTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> UIFrameworkTest = new("UIFrameworkTest"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> TowerDefense = new("TowerDefense"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> ARPGMode = new("ARPGMode"u8); // ‚öîÔ∏è ARPGÂâëÂÆ¢Ê®°Âºè
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> UIShowcaseDemo = new("UIShowcaseDemo"u8); // üé® UIËÉΩÂäõÂ±ïÁ§∫Demo
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> XianJianQiXiaZhuan = new("XianJianQiXiaZhuan"u8); // üó°Ô∏è ‰ªôÂâëÂ•á‰æ†‰º†
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> AVGTest = new("AVGTest"u8); // üìñ AVGÁ≥ªÁªüÊµãËØï
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> JsonScopeDataTest = new("$p_0tja.ScopeData.GameDataGameMode.TestGameMode.Root"u8);
        public static readonly GameLink<GameDataGameMode, GameDataGameMode> BlackHoleGame = new("BlackHoleGame"u8); // üï≥Ô∏è ÈªëÊ¥ûÁâ©ÁêÜÊ∏∏Êàè
    }

    public static class Animation
    {
        public static readonly GameLink<GameDataAnimation, GameDataAnimationSimple> Idle = new("Idle"u8);
        public static readonly GameLink<GameDataAnimation, GameDataAnimationSimple> Move = new("Move"u8);
        public static readonly GameLink<GameDataAnimation, GameDataAnimationSimple> Attack = new("Attack"u8);
        public static readonly GameLink<GameDataAnimation, GameDataAnimationSimple> Death = new("Death"u8);
        public static readonly GameLink<GameDataAnimation, GameDataAnimationSimple> TestSpell = new("TestSpell"u8);
    }

    public static class Camera
    {
        public static readonly GameLink<GameDataCamera, GameDataCamera> DefaultCamera = new("DefaultCamera"u8);
        public static readonly GameLink<GameDataCamera, GameDataCamera> MoveableCamera = new("MoveableCamera"u8);
        public static readonly GameLink<GameDataCamera, GameDataCamera> TowerDefenseCamera = new("TowerDefenseCamera"u8);
    }
    public static class Unit
    {
        public static readonly GameLink<GameDataUnit, GameDataUnit> HostTestHero = new("HostTestHero"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> AICombatTestHero = new("AICombatTestHero"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> TestItem = new("TestItem"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> TestMissileUnit = new("TestMissileUnit"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> TDMonster = new("TDMonster"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> TowerDefenseHero = new("TowerDefenseHero"u8);

        // ÂΩ¢Áä∂ÊµãËØïÂçï‰Ωç
        public static readonly GameLink<GameDataUnit, GameDataUnit> ShapeTestSphere = new("ShapeTestSphere"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> ShapeTestCube = new("ShapeTestCube"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> ShapeTestCylinder = new("ShapeTestCylinder"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> ShapeTestPlane = new("ShapeTestPlane"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> ShapeTestCone = new("ShapeTestCone"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> ShapeTestCapsule = new("ShapeTestCapsule"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> ShapeTestPyramid = new("ShapeTestPyramid"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> CompositeRobot = new("CompositeRobot"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> CastleTower = new("CastleTower"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> Spaceship = new("Spaceship"u8);

        // Áâ©ÂìÅÈôÑÂ±ûË°®Áé∞ÊµãËØïÁî®Âçï‰Ωç
        public static readonly GameLink<GameDataUnit, GameDataUnit> TestItemWithActors = new("TestItemWithActors"u8);
        // Â°îÈò≤Âª∫Á≠ëÂçï‰Ωç
        public static readonly GameLink<GameDataUnit, GameDataUnit> SlowTower = new("SlowTower"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> AuraSlowTower = new("AuraSlowTower"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> AOETower = new("AOETower"u8);
        public static readonly GameLink<GameDataUnit, GameDataUnit> PenetrateTower = new("PenetrateTower"u8);
    }


    public static class Actor
    {
        public static readonly GameLink<GameDataActor, GameDataActorModel> TestActorModel = new("TestActorModel"u8);
        public static readonly GameLink<GameDataActor, GameDataActorParticle> TestActorParticle = new("$TestParticle"u8);
        public static readonly GameLink<GameDataActor, GameDataActorModel> TestActorModelScript = new("TestActorModelScript"u8);
        public static readonly GameLink<GameDataActor, GameDataActorAdditionModel> TestActorAdditionModel = new("TestActorAdditionModel"u8);
        public static readonly GameLink<GameDataActor, GameDataActorParticle> RangeActor = new("RangeActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorParticle> AOEActor = new("AOEActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorSegmentedRectangle> LineSegment = new("LineSegment"u8);
        
        // Âª∫ÈÄ†ÁΩëÊ†ºActor
        public static readonly GameLink<GameDataActor, GameDataActorParticle> LineLaunchActor = new("LineLaunchActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorParticle> LineCenterActor = new("LineCenterActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorParticle> LineImpactActor = new("LineImpactActor"u8);

        // Âª∫ÈÄ†È¢ÑËßàActor
        public static readonly GameLink<GameDataActor, GameDataActorModel> TowerPreviewActor = new("TowerPreviewActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorModel> WallPreviewActor = new("WallPreviewActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorGrid> BuildingValidGrid = new("BuildingValidGrid"u8);
        public static readonly GameLink<GameDataActor, GameDataActorParticle> PreTargetingCircle = new("PreTargetingCircle"u8);
        public static readonly GameLink<GameDataActor, GameDataActorHighlight> PreTargetingHighlight = new("PreTargetingHighlight"u8);
        
        // ÂõõÁßçÂ°îÁöÑÈ¢ÑËßàActor
        public static readonly GameLink<GameDataActor, GameDataActorModel> SlowTowerPreviewActor = new("SlowTowerPreviewActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorModel> AuraSlowTowerPreviewActor = new("AuraSlowTowerPreviewActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorModel> AOETowerPreviewActor = new("AOETowerPreviewActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorModel> PenetrateTowerPreviewActor = new("PenetrateTowerPreviewActor"u8);

        // Áâ©ÂìÅÈôÑÂ±ûË°®Áé∞ÊµãËØïÁî®Actor
        public static readonly GameLink<GameDataActor, GameDataActorModel> ItemSelfActor = new("ItemSelfActor"u8);
        public static readonly GameLink<GameDataActor, GameDataActorParticle> ItemEquipEffect = new("ItemEquipEffect"u8);
        public static readonly GameLink<GameDataActor, GameDataActorModel> ItemCarrierActor = new("ItemCarrierActor"u8);

    }

    public static class Scene
    {
        public static readonly GameLink<GameDataScene, GameDataScene> DefaultScene = new("default"u8);
        public static readonly GameLink<GameDataScene, GameDataScene> AITestScene = new("ai_test_scene"u8);
        public static readonly GameLink<GameDataScene, GameDataScene> PrimitiveShapeTestScene = new("primitive_shape_test_scene"u8);
        public static readonly GameLink<GameDataScene, GameDataScene> JumpJumpScene = new("jump_jump_scene"u8);
        public static readonly GameLink<GameDataScene, GameDataScene> TowerDefenseScene = new("tower_defense_scene"u8);
        public static readonly GameLink<GameDataScene, GameDataScene> RPGRoleTestScene = new("rpg_role_test_scene"u8);
        public static readonly GameLink<GameDataScene, GameDataScene> BlackHoleScene = new("blackhole_scene"u8);
    }

    public static class Model
    {
        public static readonly GameLink<GameDataModel, GameDataModel> TestModelScript = new("TestActorModelScript"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> TestActorAdditionModel = new("TestActorAdditionModel"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> HostTestHero = new("HostTestHero"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> TestItem = new("TestItem"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> TestItemWithActors = new("TestItemWithActors"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> ItemEffectModel = new("ItemEffectModel"u8);
        
        // Âª∫ÈÄ†ÁΩëÊ†ºÊ®°Âûã
        public static readonly GameLink<GameDataModel, GameDataModel> BuildGridModel = new("GeneralBuildGrid.Model"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> BuildGridModel_1 = new("GeneralBuildGrid.Model_1"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> BuildGridModel_2 = new("GeneralBuildGrid.Model_2"u8);
        
        // Â°îÈò≤Âª∫Á≠ëÊ®°Âûã
        public static readonly GameLink<GameDataModel, GameDataModel> SlowTowerModel = new("SlowTowerModel"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> AuraSlowTowerModel = new("AuraSlowTowerModel"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> AOETowerModel = new("AOETowerModel"u8);
        public static readonly GameLink<GameDataModel, GameDataModel> PenetrateTowerModel = new("PenetrateTowerModel"u8);
    }
    
    public static class Particle
    {
        public static readonly GameLink<GameDataParticle, GameDataParticle> RangeParticle = new("RangeParticle"u8);
        public static readonly GameLink<GameDataParticle, GameDataParticle> AOEParticle = new("AOEParticle"u8);
        public static readonly GameLink<GameDataParticle, GameDataParticle> TestParticleScript = new("TestParticleScript"u8);
        public static readonly GameLink<GameDataParticle, GameDataParticle> LineLaunchParticle = new("LineLaunchParticle"u8);
        public static readonly GameLink<GameDataParticle, GameDataParticle> LineCenterParticle = new("LineCenterParticle"u8);
        public static readonly GameLink<GameDataParticle, GameDataParticle> LineImpactParticle = new("LineImpactParticle"u8);
        public static readonly GameLink<GameDataParticle, GameDataParticle> PreTargetingCircle = new("PreTargetingCircle"u8);

        // Áâ©ÂìÅÈôÑÂ±ûË°®Áé∞ÊµãËØïÁî®Á≤íÂ≠êÊïàÊûú
        public static readonly GameLink<GameDataParticle, GameDataParticle> ItemEquipParticle = new("ItemEquipParticle"u8);

    }
    public static class Ability
    {
        public static readonly GameLink<GameDataAbility, GameDataAbilityExecute> TestSpell = new("TestSpell"u8);
        public static readonly GameLink<GameDataAbility, GameDataAbilityExecute> ChargedTestSpell = new("ChargedTestSpell"u8);
        
        
        // Âª∫ÈÄ†ÊäÄËÉΩ - ÂõõÁßçÂ°îÈò≤Âª∫Á≠ë
        public static readonly GameLink<GameDataAbility, GameDataAbilityExecuteBuilding> BuildSlowTower = new("BuildSlowTower"u8);
        public static readonly GameLink<GameDataAbility, GameDataAbilityExecuteBuilding> BuildAuraSlowTower = new("BuildAuraSlowTower"u8);
        public static readonly GameLink<GameDataAbility, GameDataAbilityExecuteBuilding> BuildAOETower = new("BuildAOETower"u8);
        public static readonly GameLink<GameDataAbility, GameDataAbilityExecuteBuilding> BuildPenetrateTower = new("BuildPenetrateTower"u8);
        
        // Â°îÈò≤ÊîªÂáªÊäÄËÉΩ - Ë¢´Âä®ÁâàÊú¨ (Ëá™Âä®ÊîªÂáª) - Áé∞Â∑≤ÁßªÂä®Âà∞ TowerDefense.PassiveAbilities.cs
        // ‰ΩøÁî®Áã¨Á´ãÁöÑGameLinkÂÆö‰πâÈÅøÂÖçÂæ™ÁéØÂºïÁî®ÈóÆÈ¢ò
        public static readonly GameLink<GameDataAbility, GameDataAbility> SlowProjectilePassive = new("TowerDefense_SlowProjectilePassive"u8);
        public static readonly GameLink<GameDataAbility, GameDataAbility> AuraSlowPassive = new("TowerDefense_AuraSlowPassive"u8);
        public static readonly GameLink<GameDataAbility, GameDataAbility> AOEDamagePassive = new("TowerDefense_AOEDamagePassive"u8);
        public static readonly GameLink<GameDataAbility, GameDataAbility> PenetrateAttackPassive = new("TowerDefense_PenetrateAttackPassive"u8);
        
    }
    
    public static class BuildingEffect
    {
        // ÂõõÁßçÂ°îÈò≤Âª∫Á≠ëÁöÑÂª∫ÈÄ†ÊïàÊûú
        public static readonly GameLink<GameDataEffect, GameDataBuildingEffect> BuildSlowTowerEffect = new("BuildSlowTowerEffect"u8);
        public static readonly GameLink<GameDataEffect, GameDataBuildingEffect> BuildAuraSlowTowerEffect = new("BuildAuraSlowTowerEffect"u8);
        public static readonly GameLink<GameDataEffect, GameDataBuildingEffect> BuildAOETowerEffect = new("BuildAOETowerEffect"u8);
        public static readonly GameLink<GameDataEffect, GameDataBuildingEffect> BuildPenetrateTowerEffect = new("BuildPenetrateTowerEffect"u8);
    }
    public static class Item
    {
        public static readonly GameLink<GameDataItem, GameDataItemMod> TestItem = new("TestItem"u8);
        public static readonly GameLink<GameDataItem, GameDataItemMod> TestItemWithActors = new("TestItemWithActors"u8);
        
        // Â°îÈò≤ÂïÜÂ∫óÁâ©ÂìÅ - ÂõõÁßçÂ°îÁöÑÂª∫ÈÄ†Áâ©ÂìÅÔºà‰øùÁïôÁî®‰∫éÂÖºÂÆπÊÄßÔºâ
        public static readonly GameLink<GameDataItem, GameDataItemMod> SlowTowerItem = new("SlowTowerItem"u8);
        public static readonly GameLink<GameDataItem, GameDataItemMod> AuraSlowTowerItem = new("AuraSlowTowerItem"u8);
        public static readonly GameLink<GameDataItem, GameDataItemMod> AOETowerItem = new("AOETowerItem"u8);
        public static readonly GameLink<GameDataItem, GameDataItemMod> PenetrateTowerItem = new("PenetrateTowerItem"u8);
    }
    public static class Inventory
    {
        public static readonly GameLink<GameDataInventory, GameDataInventory> TestInventory6 = new("TestInventory6"u8);
        public static readonly GameLink<GameDataInventory, GameDataInventory> TestInventory6Equip = new("TestInventory6Equip"u8);
    }

    public static class UnitLeveling
    {
        // Â°îÈò≤Âª∫Á≠ëÁ≠âÁ∫ßÁ≥ªÁªüÈÖçÁΩÆ
        public static readonly GameLink<GameDataUnitLeveling, GameDataUnitLeveling> SlowTowerLeveling = new("SlowTowerLeveling"u8);
        public static readonly GameLink<GameDataUnitLeveling, GameDataUnitLeveling> AuraSlowTowerLeveling = new("AuraSlowTowerLeveling"u8);
        public static readonly GameLink<GameDataUnitLeveling, GameDataUnitLeveling> AOETowerLeveling = new("AOETowerLeveling"u8);
        public static readonly GameLink<GameDataUnitLeveling, GameDataUnitLeveling> PenetrateTowerLeveling = new("PenetrateTowerLeveling"u8);
        public static readonly GameLink<GameDataUnitLeveling, GameDataUnitLeveling> TestUnitLeveling = new("TestUnitLeveling"u8);
    }


    public static class TargetingIndicator
    {
        public static readonly GameLink<GameDataTargetingIndicator, GameDataTargetingIndicator> TestTargetingIndicator = new("TestTargetingIndicator"u8);
        public static readonly GameLink<GameDataTargetingIndicator, GameDataTargetingIndicator> LineIndicator = new("LineIndicator"u8);
        public static readonly GameLink<GameDataTargetingIndicator, GameDataTargetingIndicator> AreaIndicator = new("AreaIndicator"u8);
    }

    public static class AI
    {
        public static readonly GameLink<GameDataAIThinkTree, GameDataAIThinkTree> CombatTest = new("CombatTest"u8);
    }

    public static class Effect
    {
        public static readonly GameLink<GameDataEffect, GameDataEffectBuffAdd> AddStunBuff = new("AddStunBuff"u8);
        public static readonly GameLink<GameDataEffect, GameDataEffectBuffAdd> AddTestBuff = new("AddTestBuff"u8);
        public static readonly GameLink<GameDataEffect, GameDataEffectBuffRemove> RemoveAllBuffs = new("RemoveAllBuffs"u8);
    }



    public static class Buff
    {
        public static readonly GameLink<GameDataBuff, GameDataBuff> SpeedDebuff = new("SpeedDebuff"u8);
        public static readonly GameLink<GameDataBuff, GameDataBuff> Stun = new("Stun"u8);
        public static readonly GameLink<GameDataBuff, GameDataBuff> TestBuff = new("TestBuff"u8);
        // üêå ÂºïÁî®Â°îÈò≤Ê®°ÊùøÁöÑÂáèÈÄüBuff
        public static readonly GameLink<GameDataBuff, GameDataBuff> SlowDebuff = PassiveAbilities.Buff.SlowDebuff;
    }

    public static class Spawner
    {
        // Âü∫Á°ÄÊÄ™Áâ©Âà∑ÊÄ™Âô®
        public static readonly GameLink<GameDataSpawner, GameDataSpawnerBasic> WolfSpawner = new("WolfSpawner"u8);
        public static readonly GameLink<GameDataSpawner, GameDataSpawnerBasic> CrawlerSpawner = new("CrawlerSpawner"u8);
        public static readonly GameLink<GameDataSpawner, GameDataSpawnerBasic> VultureSpawner = new("VultureSpawner"u8);
        public static readonly GameLink<GameDataSpawner, GameDataSpawnerBasic> WaterElementalSpawner = new("WaterElementalSpawner"u8);
        public static readonly GameLink<GameDataSpawner, GameDataSpawnerBasic> BoarSpawner = new("BoarSpawner"u8);
    }

    public static class Wave
    {
        // Ê≥¢Ê¨°ÈÖçÁΩÆ
        public static readonly GameLink<GameDataWave, GameDataWaveBasic> Wave1 = new("Wave1"u8);
        public static readonly GameLink<GameDataWave, GameDataWaveBasic> Wave2 = new("Wave2"u8);
        public static readonly GameLink<GameDataWave, GameDataWaveBasic> Wave3 = new("Wave3"u8);
    }

    public static class Level
    {
        // ÂÖ≥Âç°ÈÖçÁΩÆ
        public static readonly GameLink<GameDataLevel, GameDataLevelBasic> DefaultLevel = new("DefaultLevel"u8);
    }

    private static class Formular
    {
#if SERVER
        // ‰∏¥Êó∂ÂáΩÊï∞Ôºå‰ªäÂêéË¶Å‰ªéËß¶ÂèëÂô®Âèñ„ÄÇ
        public static bool DefaultDamageNotificationPredicate(Player player, Damage damage)
        {
            // ‰ªÖÂΩì‰º§ÂÆ≥ÂÄºÂ§ß‰∫é0Êó∂ÊâçÈÄöÁü•
            if (damage.Current <= 0)
            {
                return false;
            }
            // ‰ªÖÂΩìÁé©ÂÆ∂ÊòØ‰º§ÂÆ≥Êù•Ê∫êÊàñ‰º§ÂÆ≥ÁõÆÊ†áÊó∂ÊâçÈÄöÁü•
            var playerCheck = damage.CasterPlayer == player || damage.Target?.Player == player;
            if (!playerCheck)
            {
                return false;
            }
            // ‰ªÖÂΩì‰º§ÂÆ≥ÁõÆÊ†áÂØπÁé©ÂÆ∂ÂèØËßÅ‰∏îÂ§Ñ‰∫éÂêå‰∏ÄÂú∫ÊôØÊó∂ÊâçÈÄöÁü•
            var visibilityCheck = damage.Target != null && damage.Target.IsVisibleToTransient(player);
            return visibilityCheck;
        }
#endif
    }

    public static void OnRegisterGameClass()
    {
        Game.OnGameDataInitialization += OnGameDataInitialization;
    }

    private static void OnGameDataInitialization()
    {
        Game.Logger.LogInformation("Initializing Game Data...");
        _ = new GameDataActorScope(ActorScope.Default)
        {
            Name = "Default Actor Scope",
        };
        _ = new GameDataUnitProperty(UnitProperty.LifeMax)
        {
            Name = "Life Max",
        };
        _ = new GameDataUnitProperty(UnitProperty.ManaMax)
        {
            Name = "Mana Max",
        };
        _ = new GameDataUnitProperty(UnitProperty.AttackRange)
        {
            Name = "Attack Range",
        };
        _ = new GameDataUnitProperty(UnitProperty.AttackDamage)
        {
            Name = "Attack Damage",
        };
        _ = new GameDataUnitProperty(UnitProperty.Sight)
        {
            Name = "Sight Range",
        };
        _ = new GameDataUnitProperty(UnitProperty.Armor)
        {
            Name = "Armor",
        };
        _ = new GameDataUnitProperty(UnitProperty.MagicResistance)
        {
            Name = "Magic Resistance",
        };
        _ = new GameDataUnitProperty(UnitProperty.MoveSpeed)
        {
            Name = "Move Speed",
        };
        _ = new GameDataUnitProperty(UnitProperty.ShrubSight)
        {
            Name = "Shrub Sight",
        };
        _ = new GameDataUnitProperty(UnitProperty.Height)
        {
            Name = "Height",
        };
        _ = new GameDataUnitProperty(UnitProperty.SightBlockRadius)
        {
            Name = "Sight Block Radius",
        };
        _ = new GameDataUnitProperty(UnitProperty.TurningSpeed)
        {
            Name = "Turning Speed",
        };
        _ = new GameDataUnitProperty(UnitProperty.InventoryPickUpRange)
        {
            Name = "Inventory Pick Up Range"
        };
        _ = new GameDataUnitProperty(UnitProperty.LevelMax)
        {
            Name = "Attackable Radius",
        };
        _ = new GameDataUnitProperty(UnitProperty.ExperienceDistributionMultiplier)
        {
            Name = "Experience Distribution Multiplier",
        };
        _ = new GameDataCamera(Camera.DefaultCamera)
        {
            Name = "Default Camera",
            TargetZOffset = 10,
            Rotation = new(-90, -70, 0),
            TargetX = 2500,
            TargetY = 2500,
            FollowMainUnitByDefault = true,
            DisplayDebugInfo = true,
        };
        _ = new GameDataCamera(Camera.MoveableCamera)
        {
            Name = "Moveable Camera",
            TargetZOffset = 10,
            Rotation = new(-90, -70, 0),
            TargetX = 2500,
            TargetY = 2500,
            FollowMainUnitByDefault = false,
            DisplayDebugInfo = true,
            TargetingMode = CameraTargetingMode.Gesture,
        };
        // üè∞ Â°îÈò≤ÈïúÂ§¥ÈÖçÁΩÆ - Âü∫‰∫éLuaÈÖçÁΩÆÂèÇÊï∞ËÆæÁΩÆ
        _ = new GameDataCamera(Camera.TowerDefenseCamera)
        {
            Name = "Â°îÈò≤ÈïúÂ§¥",
            // üéØ ÈïúÂ§¥Ê®°ÂºèËÆæÁΩÆ‰∏∫ÊâãÂäøÈ©±Âä®ÔºåÂÖÅËÆ∏Áé©ÂÆ∂Ëá™Áî±ÊìçÊéßÈïúÂ§¥
            TargetingMode = CameraTargetingMode.Gesture,
            // Âú∫ÊôØËæπÁïåËÆæÁΩÆ (ÂØπÂ∫îscene_border)
            // SceneBounds = new(1400, 3800, 1000, 3800), // Left, Up, Right, Down
            SceneBounds = new(3800, 1400, 3800, 1000), // Left, Up, Right, Down
            // ÁÑ¶Ë∑ùËÆæÁΩÆ (ÂØπÂ∫îmin_distance/max_distance)
            FocalLength = new(2800, 2800), // Min, Max ÈÉΩËÆæ‰∏∫2800
            // ÈªòËÆ§ÊóãËΩ¨ËßíÂ∫¶ (ÂØπÂ∫îdefault_rotation)
            Rotation = new(-90, -65, 0), // X, Y, Z
            // üîí ÈïúÂ§¥ÊóãËΩ¨ËßíÂ∫¶ÈôêÂà∂ - Âõ∫ÂÆöÂú®-65Â∫¶
            ZoomRotationRange = new(
                new CameraRotation(-90, -65, 0),  // ÊúÄÂ∞èËßíÂ∫¶ÈôêÂà∂ (ÊúÄ‰Ωé-75Â∫¶)
                new CameraRotation(-90, -65, 0)   // ÊúÄÂ§ßËßíÂ∫¶ÈôêÂà∂ (ÊúÄÈ´ò-55Â∫¶)
            ),
            // ËßÜÈáéËßíÂ∫¶ (ÂØπÂ∫îfiled_of_viewÔºåÊ≥®ÊÑèÂéüÈÖçÁΩÆ‰∏≠ÁöÑÊãºÂÜôÈîôËØØ)
            FieldOfView = new(55), // 55Â∫¶ËßÜÈáé
            // Ë£ÅÂâ™Âπ≥Èù¢ (ÂØπÂ∫înear_clip/far_clip)
            NearClipPlane = 1.0f,
            FarClipPlane = 100000.0f,
            // ÁõÆÊ†á‰ΩçÁΩÆ (ÂØπÂ∫îinit_position)
            TargetX = 5632,
            TargetY = 3264,
            // ÂÖ∂‰ªñËÆæÁΩÆ
            DisplayDebugInfo = false, // Â°îÈò≤Ê®°Âºè‰∏çÈúÄË¶ÅÊòæÁ§∫Ë∞ÉËØï‰ø°ÊÅØ
            FollowMainUnitByDefault = false, // Â°îÈò≤ÈïúÂ§¥ÈÄöÂ∏∏Âõ∫ÂÆö‰ΩçÁΩÆ
        };
        // Ê≥®ÂÜåÂΩ¢Áä∂ÊµãËØïÂçï‰Ωç
        _ = new GameDataUnit(Unit.ShapeTestSphere)
        {
            Name = "Shape Test Sphere",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            PrimitiveShape = new PrimitiveShapeConfig
            {
                Shape = PrimitiveShape.Sphere,
                Scale = Vector3.One,
                ColorTheme = ShapeColorTheme.Standard,
                ColorMode = ShapeColorMode.SmartDefaults
            }
        };

        _ = new GameDataUnit(Unit.ShapeTestCube)
        {
            Name = "Shape Test Cube",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            PrimitiveShape = new PrimitiveShapeConfig
            {
                Shape = PrimitiveShape.Cube,
                Scale = Vector3.One,
                ColorTheme = ShapeColorTheme.Standard,
                ColorMode = ShapeColorMode.SmartDefaults
            }
        };

        _ = new GameDataUnit(Unit.ShapeTestCylinder)
        {
            Name = "Shape Test Cylinder",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            PrimitiveShape = new PrimitiveShapeConfig
            {
                Shape = PrimitiveShape.Cylinder,
                Scale = Vector3.One,
                ColorTheme = ShapeColorTheme.Standard,
                ColorMode = ShapeColorMode.SmartDefaults
            }
        };

        _ = new GameDataUnit(Unit.ShapeTestPlane)
        {
            Name = "Shape Test Plane",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            PrimitiveShape = new PrimitiveShapeConfig
            {
                Shape = PrimitiveShape.Plane,
                Scale = Vector3.One,
                ColorTheme = ShapeColorTheme.Standard,
                ColorMode = ShapeColorMode.SmartDefaults
            }
        };

        _ = new GameDataUnit(Unit.ShapeTestCone)
        {
            Name = "Shape Test Cone",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            PrimitiveShape = new PrimitiveShapeConfig
            {
                Shape = PrimitiveShape.Cone,
                Scale = Vector3.One,
                ColorTheme = ShapeColorTheme.Standard,
                ColorMode = ShapeColorMode.SmartDefaults
            }
        };

        _ = new GameDataUnit(Unit.ShapeTestCapsule)
        {
            Name = "Shape Test Capsule",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            PrimitiveShape = new PrimitiveShapeConfig
            {
                Shape = PrimitiveShape.Capsule,
                Scale = Vector3.One,
                ColorTheme = ShapeColorTheme.Standard,
                ColorMode = ShapeColorMode.SmartDefaults
            }
        };

        _ = new GameDataUnit(Unit.ShapeTestPyramid)
        {
            Name = "Shape Test Pyramid",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            PrimitiveShape = new PrimitiveShapeConfig
            {
                Shape = PrimitiveShape.Pyramid,
                Scale = Vector3.One,
                ColorTheme = ShapeColorTheme.Standard,
                ColorMode = ShapeColorMode.SmartDefaults
            }
        };

        _ = new GameDataUnit(Unit.CompositeRobot)
        {
            Name = "Composite Robot",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            CompositeShapes = new List<PrimitiveShapeConfig>
            {
                // Ë∫´‰Ωì - ËÉ∂Âõä
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Capsule,
                    Scale = new Vector3(1.0f, 1.0f, 1.5f),
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = true,
                    Tag = "robot_body"
                },
                // Â§¥ÈÉ® - ÁêÉ‰Ωì
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Sphere,
                    Scale = new Vector3(0.8f, 0.8f, 0.8f),
                    Offset = new Vector3(0, 0, 120f), // ËÉ∂Âõä‰ΩìÈ´òÂ∫¶150 + ÁêÉ‰ΩìÂçäÂæÑ40 = 190ÔºåÁ®çÂæÆË∞ÉÊï¥Âà∞120
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = false,
                    Tag = "robot_head"
                },
                // Â∑¶ËáÇ - ÂúÜÊü±‰Ωì
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Cylinder,
                    Scale = new Vector3(0.3f, 0.3f, 1.0f),
                    Offset = new Vector3(-80f, 0, 50f), // ËÉ∂Âõä‰ΩìÂçäÂæÑ50 + ÂúÜÊü±‰ΩìÂçäÂæÑ15 = 65ÔºåÁ®çÂæÆË∞ÉÊï¥Âà∞80
                    Rotation = new Vector3(0, 0, 45),
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = false,
                    Tag = "robot_left_arm"
                },
                // Âè≥ËáÇ - ÂúÜÊü±‰Ωì
                new() {
                    Shape = PrimitiveShape.Cylinder,
                    Scale = new Vector3(0.3f, 0.3f, 1.0f),
                    Offset = new Vector3(80f, 0, 50f), // ËÉ∂Âõä‰ΩìÂçäÂæÑ50 + ÂúÜÊü±‰ΩìÂçäÂæÑ15 = 65ÔºåÁ®çÂæÆË∞ÉÊï¥Âà∞80
                    Rotation = new Vector3(0, 0, -45),
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = false,
                    Tag = "robot_right_arm"
                }
            }
        };

        // ÂüéÂ†°Â°îÊ•ºÈÖçÁΩÆ - ÂèÇËÄÉAIShapeComposer.CreateCastleTower
        _ = new GameDataUnit(Unit.CastleTower)
        {
            Name = "Castle Tower",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            CompositeShapes = new List<PrimitiveShapeConfig>
            {
                // Âü∫Â∫ß - Â§ßÁ´ãÊñπ‰Ωì
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Cube,
                    Scale = new Vector3(1.5f, 1.5f, 0.8f),
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = true,
                    Tag = "tower_base"
                },
                // Â°îË∫´ - ÂúÜÊü±‰Ωì
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Cylinder,
                    Scale = new Vector3(1.0f, 1.0f, 2.0f),
                    Offset = new Vector3(0, 0, 80f), // Âü∫Â∫ßÈ´òÂ∫¶80ÔºåÂ°îË∫´Âú®È°∂ÈÉ®
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = false,
                    Tag = "tower_body"
                },
                // Â°îÈ°∂ - ÂúÜÈî•
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Cone,
                    Scale = new Vector3(1.2f, 1.2f, 1.0f),
                    Offset = new Vector3(0, 0, 280f), // Â°îË∫´È´òÂ∫¶200ÔºåÂ°îÈ°∂Á¥ßË¥¥Â°îË∫´È°∂ÈÉ®
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = false,
                    Tag = "tower_top"
                }
            }
        };

        // Â§™Á©∫ËàπÈÖçÁΩÆ - ÂèÇËÄÉAIShapeComposer.CreateSimpleSpaceship
        _ = new GameDataUnit(Unit.Spaceship)
        {
            Name = "Spaceship",
            AttackableRadius = 64f,
            CollisionRadius = 32f,
            CompositeShapes = new List<PrimitiveShapeConfig>
            {
                // ËàπË∫´ - Èì∂Ëâ≤ËÉ∂Âõä
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Capsule,
                    Scale = new Vector3(0.6f, 0.6f, 2.0f),
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = true,
                    Tag = "spaceship_body"
                },
                // Â∞æÁøº - ÁªøËâ≤Ê•îÂΩ¢
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Wedge,
                    Scale = new Vector3(1.2f, 0.3f, 0.8f),
                    Offset = new Vector3(0, 0, 50f), // Âú®È£ûËàπÂ∫ïÈÉ®ÂêéÊñπ
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = false,
                    Tag = "spaceship_tail"
                },
                // ÂºïÊìé - Á∫¢Ëâ≤ÂúÜÈî•
                new PrimitiveShapeConfig
                {
                    Shape = PrimitiveShape.Cone,
                    Scale = new Vector3(0.4f, 0.4f, 0.6f),
                    Offset = new Vector3(0, 0, 20f), // Âú®È£ûËàπÂ∫ïÈÉ®
                    Rotation = new Vector3(180, 0, 0), // ÂÄíÁΩÆ
                    ColorTheme = ShapeColorTheme.Gaming,
                    ColorMode = ShapeColorMode.SmartDefaults,
                    AttachToRoot = false,
                    Tag = "spaceship_engine"
                }
            }
        };

        _ = new GameDataScene(Scene.DefaultScene)
        {
            DefaultCamera = Camera.DefaultCamera,
            Name = "Default Scene",
            HostedSceneTag = "default"u8,
            Size = new(16 * 256, 16 * 256),
            OnLoaded = static (scene) => Game.Logger.LogInformation("Scene {scene} loaded", scene),
            PlacedPlayerObjects = new()
            {
                {
                    1, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 1,
                        Position = new(3500,3000,0),
                        IsMainUnit = true,
                        TriggerGetter = true,
                        UniqueId = 1,
                    }
                },
                {
                    2, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 3,
                        Position = new(3000,3500,0),
                        IsMainUnit = true,
                        TriggerGetter = true,
                        UniqueId = 2,
                        Facing = -90,
                    }
                },
                {
                    3, new PlacedItem()
                    {
                        Link = Item.TestItem,
                        Position = new(3500,3500,0),
                        TriggerGetter = true,
                        UniqueId = 3,
                    }
                }
            }
        };
        _ = new GameDataScene(Scene.AITestScene)
        {
            DefaultCamera = Camera.DefaultCamera,
            Name = "AI System Test Scene",
            HostedSceneTag = "new_scene_1"u8,
            Size = new(64 * 256, 64 * 256),  // Large test area: 16384 x 16384 units
            OnLoaded = static (scene) => Game.Logger.LogInformation("AI Test Scene {scene} loaded", scene),
            PlacedPlayerObjects = new()
            {
                {
                    1, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 1,
                        Position = new(8000, 8000, 0),  // Center player in the large map
                        IsMainUnit = true,
                        TriggerGetter = true,
                        UniqueId = 1,
                    }
                },
                // AI Test target units spread across the large map
                {
                    10, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 2,
                        Position = new(10000, 10000, 0),  // Target 1 - Northeast
                        TriggerGetter = true,
                        UniqueId = 10,
                    }
                },
                {
                    11, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 2,
                        Position = new(6000, 10000, 0),   // Target 2 - Northwest
                        TriggerGetter = true,
                        UniqueId = 11,
                    }
                },
                {
                    12, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 2,
                        Position = new(10000, 6000, 0),   // Target 3 - Southeast
                        TriggerGetter = true,
                        UniqueId = 12,
                    }
                },
                {
                    13, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 2,
                        Position = new(6000, 6000, 0),    // Target 4 - Southwest
                        TriggerGetter = true,
                        UniqueId = 13,
                    }
                }
            }
        };

        // Âü∫Êú¨ÂΩ¢Áä∂ÊµãËØïÂú∫ÊôØ - Â§çÁî®AITestSceneÁöÑÁ¥†Êùê‰ΩÜÊúâÁã¨Á´ãÁöÑÈÄªËæëÁ©∫Èó¥
        _ = new GameDataScene(Scene.PrimitiveShapeTestScene)
        {
            DefaultCamera = Camera.DefaultCamera,
            Name = "Primitive Shape Test Scene",
            // FIXME: ÂÖ±‰∫´AITestSceneÁöÑÁ¥†ÊùêÊó†Ê≥ïÊ≠£Â∏∏ÁîüÊïà„ÄÇ
            HostedSceneTag = new HostedSceneTag("primitive_shape_test_scene"u8, "new_scene_1"u8), // Â§çÁî®AITestÁöÑÁ¥†Êùê
            Size = new(64 * 256, 64 * 256),  // ‰∏éAITestSceneÁõ∏ÂêåÁöÑÂ§ßÂú∞Âõæ
            OnLoaded = static (scene) => Game.Logger.LogInformation("üéØ Primitive Shape Test Scene {scene} loaded", scene),
            PlacedPlayerObjects = new()
            {
                // ÊµãËØïÁî®‰∏ªÂçï‰ΩçÔºåÊîæÂú®Âú∞Âõæ‰∏≠Â§Æ
                {
                    1, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 1,
                        Position = new(8000, 8000, 0),  // Âú∞Âõæ‰∏≠ÂøÉ‰ΩçÁΩÆ
                        IsMainUnit = true,
                        TriggerGetter = true,
                        UniqueId = 1,
                    }
                },
                // È¢ÑËÆæ‰∏Ä‰∫õÊµãËØï‰ΩçÁΩÆÁöÑÂçï‰Ωç
                {
                    20, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 2,
                        Position = new(9000, 8000, 0),  // ‰∏ú‰æßÊµãËØï‰ΩçÁΩÆ
                        TriggerGetter = true,
                        UniqueId = 20,
                    }
                },
                {
                    21, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 2,
                        Position = new(7000, 8000, 0),  // Ë•ø‰æßÊµãËØï‰ΩçÁΩÆ
                        TriggerGetter = true,
                        UniqueId = 21,
                    }
                },
                {
                    22, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 2,
                        Position = new(8000, 9000, 0),  // Âåó‰æßÊµãËØï‰ΩçÁΩÆ
                        TriggerGetter = true,
                        UniqueId = 22,
                    }
                },
                {
                    23, new PlacedUnit()
                    {
                        Link = Unit.HostTestHero,
                        OwnerPlayerId = 2,
                        Position = new(8000, 7000, 0),  // Âçó‰æßÊµãËØï‰ΩçÁΩÆ
                        TriggerGetter = true,
                        UniqueId = 23,
                    }
                }
            }
        };

        // RPGËßíËâ≤ÊµãËØïÂú∫ÊôØ - Â§çÁî®AITestSceneÁöÑÁ¥†ÊùêÔºåÂàõÂª∫RPGËßíËâ≤ÊµãËØïÁéØÂ¢É
        _ = new GameDataScene(Scene.RPGRoleTestScene)
        {
            DefaultCamera = Camera.DefaultCamera,
            Name = "RPG Role Test Scene",
            HostedSceneTag = new HostedSceneTag("rpg_role_test_scene"u8, "new_scene_1"u8), // Â§çÁî®AITestÁöÑÁ¥†Êùê
            Size = new(64 * 256, 64 * 256),  // ‰∏éAITestSceneÁõ∏ÂêåÁöÑÂ§ßÂú∞Âõæ
            OnLoaded = static (scene) => Game.Logger.LogInformation("‚öîÔ∏è RPG Role Test Scene {scene} loaded", scene),
        };

        // ÈªëÊ¥ûÊ∏∏Êàè‰∏ìÁî®Âú∫ÊôØ - Âπ≤ÂáÄÁöÑ3DÁâ©ÁêÜÂú∫ÊôØ
        _ = new GameDataScene(Scene.BlackHoleScene)
        {
            DefaultCamera = Camera.DefaultCamera,
            Name = "Black Hole Physics Scene",
            HostedSceneTag = new HostedSceneTag("blackhole_scene"u8, "new_scene_1"u8),
            Size = new(2000, 2000),  // 2000x2000 game area
            OnLoaded = static (scene) => Game.Logger.LogInformation("üï≥Ô∏è Black Hole Scene {scene} loaded", scene),
            PlacedPlayerObjects = [] // Empty - game creates its own physics objects
        };

        // JumpJumpÊ∏∏Êàè‰∏ìÁî®Âú∫ÊôØ - Âπ≤ÂáÄÁöÑÂú∫ÊôØÔºåÂè™ÂåÖÂê´ÂøÖË¶ÅÁöÑÊ∏∏ÊàèÂÖÉÁ¥†
        _ = new GameDataScene(Scene.JumpJumpScene)
        {
            DefaultCamera = Camera.MoveableCamera,
            Name = "Jump Jump Game Scene",
            HostedSceneTag = new HostedSceneTag("jump_jump_scene"u8, "new_scene_1"u8), // Â§çÁî®AITestÁöÑÁ¥†Êùê
            Size = new(64 * 256, 64 * 256),  // ‰∏éAITestSceneÁõ∏ÂêåÁöÑÂ§ßÂú∞Âõæ
            OnLoaded = static (scene) => Game.Logger.LogInformation("üéÆ Jump Jump Scene {scene} loaded", scene),
            PlacedPlayerObjects = [] // ‰∏çÈ¢ÑËÆæ‰ªª‰ΩïÂçï‰ΩçÔºåËÆ©Ê∏∏ÊàèËá™Â∑±ÂàõÂª∫
        };

        
        // Â°îÈò≤Ê∏∏ÊàèÂú∫ÊôØÈÖçÁΩÆ - ‰ΩøÁî®new_scene_2Âú∞Âõæ
        _ = new GameDataScene(Scene.TowerDefenseScene)
        {
            DefaultCamera = Camera.TowerDefenseCamera, // üéØ ‰ΩøÁî®‰∏ìÁî®ÁöÑÂ°îÈò≤ÈïúÂ§¥
            Name = "Tower Defense Scene",
            HostedSceneTag = "new_scene_2"u8,
            Size = new(26 * 256, 44 * 256),  // Â§ßÂú∞ÂõæÁî®‰∫éÂ°îÈò≤Ê∏∏Êàè
            OnLoaded = static (scene) => Game.Logger.LogInformation("üè∞ Tower Defense Scene {scene} loaded", scene),
            PlacedPlayerObjects = new()
            {
                // ‰∏ªÂçï‰ΩçÊîæÂú®Âú∞Âõæ‰∏≠Â§Æ - ÂèØ‰ª•‰Ωú‰∏∫Â°îÈò≤Ê∏∏ÊàèÁöÑÊåáÊå•‰∏≠ÂøÉ
                {
                    1, new PlacedUnit()
                    {
                        Link = Unit.TowerDefenseHero,  // ‰ΩøÁî®‰∏ìÈó®ÁöÑÂ°îÈò≤Ëã±ÈõÑÂçï‰Ωç
                        OwnerPlayerId = 1,
                        Position = new(4000, 1600, 0),
                        IsMainUnit = true,
                        TriggerGetter = true,
                        UniqueId = 1,
                    }
                },
            }
        };

        _ = new GameDataInventory(Inventory.TestInventory6)
        {
            Slots = [
                new (),
                new (),
                new (),
                new (),
                new (),
                new (),
                ]
        };
        _ = new GameDataInventory(Inventory.TestInventory6Equip)
        {
            InventoryFlags = new()
            {
                HandlePickUpRequest = false
            },
            Slots = [
                new (){
                    Type=ItemSlotType.Equip
                },
                new (){
                    Type=ItemSlotType.Equip
                },
                new (){
                    Type=ItemSlotType.Equip
                },
                new (){
                    Type=ItemSlotType.Equip
                },
                new (){
                    Type=ItemSlotType.Equip
                },
                new (){
                    Type=ItemSlotType.Equip
                },
                ]
        };
        _ = new GameDataActorModel(Actor.TestActorModel)
        {
            Model = Model.TestModelScript,
            Socket = "socket_root"u8,
        };
        _ = new GameDataActorModel(Actor.TestActorModelScript)
        {
            Model = Model.TestModelScript,
            Socket = "socket_root"u8,
        };
        _ = new GameDataModel(Model.TestModelScript)
        {
            Radius = 50,
            Asset = "characters/palu_hx/sk_daershu/model.prefab"u8,
        };
        _ = new GameDataActorSite(GameCore.ScopeData.Actor.ScopeStaticSiteTransient)
        {
            ReleaseOnGC = true,
            AttachForwardOnce = true,
        };
        _ = new GameDataActorSite(GameCore.ScopeData.Actor.ScopeStaticSitePersist)
        {
        };
        _ = new GameDataGameMode(GameMode.FlappyBird)
        {
            Name = "Flappy Bird Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                ],
        };
        _ = new GameDataGameMode(GameMode.VampireSurvivors3D)
        {
            Name = "Vampire 3D Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
                ExtraScopeDataVampire3D.Scene.VampireScene
            ],
            DefaultScene = ExtraScopeDataVampire3D.Scene.VampireScene,
        };
        _ = new GameDataGameMode(GameMode.VampireSurvivors2D)
        {
            Name = "Vampire 2D Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
            ],
        };
        _ = new GameDataGameMode(GameMode.JoyStickTest)
        {
            Name = "JoyStick Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
                ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.GameUITest)
        {
            Name = "Game UI Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
                ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.TypedMessageTest)
        {
            Name = "TypedMessage Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
                ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.Gomoku)
        {
            Name = "Gomoku Game Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
                ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.UserCloudDataTest)
        {
            Name = "UserCloudData Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
                ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.AISystemTest)
        {
            Name = "AI System Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.AITestScene,
                ],
            DefaultScene = Scene.AITestScene,
        };
        _ = new GameDataGameMode(GameMode.PrimitiveShapeTest)
        {
            Name = "Primitive Shape Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.PrimitiveShapeTestScene,
                ],
            DefaultScene = Scene.PrimitiveShapeTestScene,
        };
        _ = new GameDataGameMode(GameMode.RPGRoleTest)
        {
            Name = "RPG Role Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.RPGRoleTestScene,
                ],
            DefaultScene = Scene.RPGRoleTestScene,
        };
        _ = new GameDataGameMode(GameMode.ModernUITest)
        {
            Name = "Modern UI Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
                ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.BuffTest)
        {
            Name = "Buff Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
            ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.ScriptPerformanceTest)
        {
            Name = "Script Performance Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                // Êó†ÈúÄÂú∫ÊôØÔºå‰ªÖÊúâUI
            ],
        };
        _ = new GameDataGameMode(GameMode.Game2048)
        {
            Name = "2048 Game Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                // Êó†ÈúÄÂú∫ÊôØÔºå‰ªÖÊúâUI
            ],
        };
        _ = new GameDataGameMode(GameMode.JumpJump)
        {
            Name = "Jump Jump Game Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.JumpJumpScene,
            ],
            DefaultScene = Scene.JumpJumpScene,
        };
        _ = new GameDataGameMode(GameMode.TouchBehaviorTest)
        {
            Name = "TouchBehavior Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                // Êó†ÈúÄÂú∫ÊôØÔºå‰ªÖÊúâUI
            ],
        };
        _ = new GameDataGameMode(GameMode.TowerDefense)
        {
            Name = "Tower Defense Game",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.TowerDefenseScene,
                ],
            DefaultScene = Scene.TowerDefenseScene,
        };
        _ = new GameDataGameMode(GameMode.ARPGMode)
        {
            Name = "ARPGÂâëÂÆ¢Ê®°Âºè",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                ARPGTemplate.ScopeData.ARPGScopeData.Scene.ARPGScene, // ‰ΩøÁî®ARPG‰∏ìÁî®Âú∫ÊôØ
            ],
            DefaultScene = ARPGTemplate.ScopeData.ARPGScopeData.Scene.ARPGScene,
        };
        _ = new GameDataGameMode(GameMode.UIShowcaseDemo)
        {
            Name = "UIËÉΩÂäõÂ±ïÁ§∫Demo",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
            ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.XianJianQiXiaZhuan)
        {
            Name = "‰ªôÂâëÂ•á‰æ†‰º†",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                XianJianQiXiaZhuan.ScopeData.XianJianScopeData.Scene.YuHangTown,
                XianJianQiXiaZhuan.ScopeData.XianJianScopeData.Scene.XianLingIsland,
                XianJianQiXiaZhuan.ScopeData.XianJianScopeData.Scene.SuoYaoTower,
            ],
            DefaultScene = XianJianQiXiaZhuan.ScopeData.XianJianScopeData.Scene.YuHangTown,
        };
        _ = new GameDataGameMode(GameMode.AVGTest)
        {
            Name = "AVGÁ≥ªÁªüÊµãËØï",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
            ],
            DefaultScene = Scene.DefaultScene,
        };
        _ = new GameDataGameMode(GameMode.BlackHoleGame)
        {
            Name = "Black Hole Physics Game",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.BlackHoleScene,
            ],
            DefaultScene = Scene.BlackHoleScene,
        };
        _ = new GameDataGameMode(GameMode.UIFrameworkTest)
        {
            Name = "UI Framework Test Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                // Êó†ÈúÄÂú∫ÊôØÔºå‰ªÖÊúâUI
            ],
            GameUI = GameUI.ScopeData.GameUI.Default,
        };
        _ = new GameDataGameMode(GameCore.ScopeData.GameMode.Default)
        {
            Name = "Default Mode",
            Gameplay = Gameplay.Default,
            PlayerSettings = PlayerSettings.Default,
            SceneList = [
                Scene.DefaultScene,
            ],
            GameUI = GameUI.ScopeData.GameUI.Default,
            DefaultScene = Scene.DefaultScene,
        };

        _ = new GameDataDamageType(DamageType.Physical)
        {
            Name = "Physical Damage",
#if SERVER
            // Ëá™ÂÆö‰πâ‰º§ÂÆ≥ÂÖ¨Âºè
            // CustomFormular =
            // Ëá™ÂÆö‰πâÊö¥ÂáªÂÖ¨Âºè
            // CustomFormularIsCritical
            NotificationPredicate = Formular.DefaultDamageNotificationPredicate,
#endif
            FloatingTextDealt = GameCore.ScopeData.FloatingText.PhysicalDamage,
            FloatingTextDealtCritical = GameCore.ScopeData.FloatingText.CriticalPhysicalDamage,
            FloatingTextReceived = GameCore.ScopeData.FloatingText.DamageReceived,
        };
        _ = new GameDataDamageType(DamageType.Magical)
        {
            Name = "Magical Damage",
#if SERVER
            NotificationPredicate = Formular.DefaultDamageNotificationPredicate,
#endif
            FloatingTextDealt = GameCore.ScopeData.FloatingText.MagicDamage,
            FloatingTextDealtCritical = GameCore.ScopeData.FloatingText.CriticalMagicDamage,
            FloatingTextReceived = GameCore.ScopeData.FloatingText.DamageReceived,
        };
        _ = new GameDataDamageType(DamageType.Pure)
        {
            Name = "Pure Damage",
#if SERVER
            NotificationPredicate = Formular.DefaultDamageNotificationPredicate,
#endif
            FloatingTextDealt = GameCore.ScopeData.FloatingText.PureDamage,
            FloatingTextReceived = GameCore.ScopeData.FloatingText.DamageReceived,
        };
        // ÊµÆÂä®ÊñáÊú¨ÔºåÊöÇÊó∂Êó†Ê≥ïÈÄöËøá‰ª£Á†ÅÁîüÊàêÔºåÈúÄË¶ÅÊâãÂä®ÂàõÂª∫
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.PhysicalDamage)
        {
            Name = "Physical Damage",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.CriticalPhysicalDamage)
        {
            Name = "Critical Physical Damage",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.PhysicalAccumulated)
        {
            Name = "Physical Accumulated",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.MagicDamage)
        {
            Name = "Magic Damage",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.CriticalMagicDamage)
        {
            Name = "Critical Magic Damage",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.MagicAccumulated)
        {
            Name = "Magic Accumulated",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.PureDamage)
        {
            Name = "Pure Damage",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.DamageReceived)
        {
            Name = "Damage Received",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.Heal)
        {
            Name = "Heal",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.ManaSpent)
        {
            Name = "Mana Cost",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.Gold)
        {
            Name = "Gold",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.Exp)
        {
            Name = "Exp",
        };
        _ = new GameDataFloatingText(GameCore.ScopeData.FloatingText.Missed)
        {
            Name = "Missed",
        };
        _ = new GameDataGameUI(GameUI.ScopeData.GameUI.Default)
        {
            Name = "Default Game UI",
            StandardUIRenderingOrder = [
                // Âü∫Á°ÄÊ∏∏ÊàèÊéßÂà∂Â±Ç - ÊúÄÂ∫ïÂ±ÇÔºåÂü∫Á°Ä‰∫§‰∫íÂÖÉÁ¥†
                StandardUIType.Joystick,
                StandardUIType.Map,
                
                // Ê∏∏ÊàèÂÜÖÂ∏∏È©ªUIÂ±Ç - Ê∏∏ÊàèËøõË°å‰∏≠ÂßãÁªàÂèØËßÅÁöÑUIÂÖÉÁ¥†
                StandardUIType.Minimap,
                StandardUIType.Hotbar,
                StandardUIType.StatusBar,
                
                // ‰ø°ÊÅØÈù¢ÊùøÂ±Ç - Ê∏∏ÊàèÊ†∏ÂøÉ‰ø°ÊÅØÁïåÈù¢
                StandardUIType.CharacterSheet,
                StandardUIType.Inventory,
                StandardUIType.Quest,
                StandardUIType.QuestLog,
                StandardUIType.Crafting,
                StandardUIType.TalentTree,
                
                // Á≥ªÁªüÂäüËÉΩÂ±Ç - Á≥ªÁªüÁ∫ßÂäüËÉΩÁïåÈù¢
                StandardUIType.Leaderboards,
                StandardUIType.Settings,
                StandardUIType.Shop,
                StandardUIType.Party,
                StandardUIType.Social,
                StandardUIType.Achievement,
                
                // ‰∫§‰∫íÂèçÈ¶àÂ±Ç - Âç≥Êó∂‰∫§‰∫íÂíåÂèçÈ¶à
                StandardUIType.Chat,
                StandardUIType.Dialogue,
                
                // ÈÄöÁü•ÊèêÁ§∫Â±Ç - ÈáçË¶Å‰ø°ÊÅØÈÄöÁü•
                StandardUIType.Notifications,
                
                // ÊïôÁ®ãÂºïÂØºÂ±Ç - Êñ∞ÊâãÂºïÂØºÂíåÂ∏ÆÂä©
                StandardUIType.Tutorial,
                
                // Ê∏∏ÊàèÂÜÖÊ®°ÊÄÅÂ±Ç - ÈúÄË¶ÅÊöÇÂÅúÊ∏∏ÊàèÁöÑÈÄâÊã©ÁïåÈù¢
                StandardUIType.Reward,
                
                // ÂÖ®Â±èÊ®°ÊÄÅÂ±Ç - Ë¶ÜÁõñÊâÄÊúâÊ∏∏ÊàèÂÜÖÂÆπÁöÑÁïåÈù¢
                StandardUIType.MainMenu,
                
                // ÊúÄÈ´ò‰ºòÂÖàÁ∫ßÂ±Ç - Á≥ªÁªüÁ∫ßÂØπËØùÊ°ÜÔºå‰∏çÂ∫îË¢´‰ªª‰ΩïUIÈÅÆÊå°
                StandardUIType.ConfirmDialog,
                StandardUIType.ErrorDialog,
                StandardUIType.Loading,
                ],
            StandardUIBaseZIndex = 0,
            StandardUIZIndexStep = 100,
        };
        var defaultWaveAI = new GameLink<GameDataWaveAI, GameDataWaveAI>("default"u8);
        _ = new GameDataWaveAI(defaultWaveAI)
        {
            // ‚öîÔ∏è ÊàòÊñóÈÖçÁΩÆ - ÂêØÁî®AIÊàòÊñóÂäüËÉΩ
            EnableCombat = true,

            // üîç Êâ´ÊèèÂíåÊîªÂáªËåÉÂõ¥ÈÖçÁΩÆ
            MinimalScanRange = 500f,
            MaximalScanRange = 1000f,
            MinimalApproachRange = 200f,

            // üèÉ‚Äç‚ôÇÔ∏è ÁâµÂºïÂíåÊí§ÈÄÄÈÖçÁΩÆ
            CombatLeash = 1500f,
            CombatResetRange = 1800f,

            // ‚è±Ô∏è ÊàòÊñóÊåÅÁª≠Êó∂Èó¥
            InCombatMinimalDuration = TimeSpan.FromSeconds(2),

            // üåä Áæ§‰ΩìAIÈÖçÁΩÆ
            EnableWaveFormation = false, // ‰∏™‰ΩìÊàòÊñó‰∏çÈúÄË¶ÅÁºñÈòü
            EnableLinkedAggro = true,    // ÂêØÁî®ËøûÈîÅ‰ªáÊÅ®

            // üîÑ AIÁîüÂëΩÂë®Êúü
            AutoDisposeOnEmpty = true,

            // üìç ÈªòËÆ§Ë°å‰∏∫Á±ªÂûã
            Type = WaveType.Guard,
        };

        // Êï∞ÁºñÊï∞ÊçÆ‰Ωú‰∏∫Êéß‰ª∂Ê®°ÊùøÁöÑÊ†∑‰æã
        _ = new GameDataControlButton(Control.TestButton)
        {
            Background = new SolidColorBrush(Color.AliceBlue),
            Layout = new()
            {
                Width = 500,
                Height = 90,
                // ‰Ωç‰∫éÂ∑¶‰∏äËßí
                HorizontalAlignment = HorizontalAlignment.Center,
                VerticalAlignment = VerticalAlignment.Center,
            },
            // ÊåâÁâπÂÆöÂ±èÂπïÊóãËΩ¨ÊîπÂèòÂ±ûÊÄß
            OverrideByOrientation = new()
            {
                {   
                    // Á´ñÁõ¥Êó∂Â∞ÜÂÆΩÈ´ò‰∫íÊç¢
                    DisplayOrientations.Portrait, new GameDataControlButton(new GameLink<GameDataControl, GameDataControlButton>("TestButtonOverrideByOrientation1"))
                    {
                        Layout = new()
                        {
                            Width = 250,
                            Height = 300,
                        },
                    }.Link
                },
            },
            Children =
            [
                // ÊåâÈíÆÊúâ‰∏Ä‰∏™ÈªòËÆ§LabelÂ≠êÊéß‰ª∂
                new GameDataControlLabel(new("TestButtonLabel"))
                {
                    Text = "Ê®°ÊùøÂàõÂª∫ÁöÑÊåâÈíÆ",
                    TextColor = Color.Green,
                    FontSize = 24,
                    Bold = true,
#if CLIENT
                    OnPostInitialization = static (c) =>
                    {
                        if (c is not Label label)
                        {
                            return;
                        }
                        label.Text = label.DataContext?.ToString();
                    },
#endif
                    // ÊåâÁâπÂÆö‰∏ªÈ¢òÊîπÂèòÂ±ûÊÄß
                    OverrideByTheme = new()
                    {
                        {
                            // Á¨¶Ââë‰∏ªÈ¢òÊó∂ÊòæÁ§∫Á¨¶Ââë
                            Theme.FuJian, new GameDataControlLabel(new GameLink<GameDataControl, GameDataControlLabel>("TestButtonLabelOverrideByTheme1"))
                            {
                                Text = "Á¨¶Ââë",
                            }.Link
                        },
                        {
                            // ÂõûÂìç‰∏ªÈ¢òÊó∂ÊòæÁ§∫ÂõûÂìç
                            Theme.ProjectEcho, new GameDataControlLabel(new GameLink<GameDataControl, GameDataControlLabel>("TestButtonLabelOverrideByTheme2"))
                            {
                                Text = "ÂõûÂìç",
                            }.Link
                        }
                    }
                }.Link,
            ],
#if CLIENT
            OnVirtualizationPhase =
            [
                static (c) =>
                {
                    if (c.Children?[0] is Label label)
                    {
                        label.Text = "??";
                    }
                },
                static (c)=>
                {
                    if (c.Children?[0] is Label label)
                    {
                        label.Text = label.DataContext?.ToString();
                    }
                }
                ]
#endif
        };
        // Êï∞ÁºñÊï∞ÊçÆ‰Ωú‰∏∫Êéß‰ª∂Ê®°ÊùøÁöÑÊ†∑‰æã2
        _ = new GameDataControlButton(Control.TestButton2)
        {
            Background = new SolidColorBrush(Color.OrangeRed),
            Layout = new()
            {
                Width = 500,
                Height = 90,
                // ‰Ωç‰∫éÂ∑¶‰∏äËßí
                HorizontalAlignment = HorizontalAlignment.Center,
                VerticalAlignment = VerticalAlignment.Center,
            },
            Children =
            [
                // ÊåâÈíÆÊúâ‰∏Ä‰∏™ÈªòËÆ§LabelÂ≠êÊéß‰ª∂ÔºåÂÜÖÂÆπ‰∏éTestButton1ÁöÑLabelÁõ∏Âêå
                new GameLink<GameDataControl, GameDataControlLabel>("TestButtonLabel"),
            ],
#if CLIENT
            OnVirtualizationPhase =
            [
                static (c) =>
                {
                    if (c.Children?[0] is Label label)
                    {
                        label.Text = "??";
                    }
                },
                static (c)=>
                {
                    if (c.Children?[0] is Label label)
                    {
                        label.Text = label.DataContext?.ToString();
                    }
                }
                ]
#endif
        };
        _ = new GameDataGameplay(Gameplay.Default)
        {
            Name = "Default Gameplay",
            DefaultWaveAI = defaultWaveAI,
            ItemQualityList = [
                ItemQuality.Poor,
                ItemQuality.Common,
                ItemQuality.Uncommon,
                ItemQuality.Rare,
                ItemQuality.Epic,
                ItemQuality.Legendary,
                ItemQuality.Mythic,
            ],
        };
        _ = new GameDataPlayerSettings(PlayerSettings.Default)
        {
            PlayerTeamData = [
                [
                    new() { Controller = ControllerType.Computer, Id = 0, IsNeutral = true }
                ],
                [
                    new() { Controller = ControllerType.User, Id = 1 },
                    new() { Controller = ControllerType.Computer, Id = 2 }
                ],
                [
                    new() { Controller = ControllerType.Computer, Id = 3 },
                    new() { Controller = ControllerType.Computer, Id = 4 }
                ],
                [
                    new() { Controller = ControllerType.User, Id = 5 },
                ],
            ]
        };
        _ = new GameDataUnitLeveling(UnitLeveling.TestUnitLeveling)
        {
            ExperienceRequiredForEachLevel = [0, 0, 200],
            ExtraLevelExperienceRequiredLevelFactor = 100,
            MaxLevelLeech = true,
        };
        _ = new GameDataItemQuality(ItemQuality.Poor)
        {
            Name = "ÂûÉÂúæ",
            Color = Color.Gray,
            BackgroundImage = "image/Â∫ïÊ°Ü=ÂûÉÂúæ.png",
            BorderImage = "image/ÂìÅË¥®Ê°Ü=ÂûÉÂúæ.png",
        };
        _ = new GameDataItemQuality(ItemQuality.Common)
        {
            Name = "ÊôÆÈÄö",
            Color = Color.FromArgb(146, 150, 155), //#92969B
            BackgroundImage = "image/Â∫ïÊ°Ü=ÊôÆÈÄö.png",
            BorderImage = "image/ÂìÅË¥®Ê°Ü=ÊôÆÈÄö.png",
        };
        _ = new GameDataItemQuality(ItemQuality.Uncommon)
        {
            Name = "‰ºòÁßÄ",
            Color = Color.FromArgb(59, 151, 62), //#3B973E
            BackgroundImage = "image/Â∫ïÊ°Ü=‰ºòÁßÄ.png",
            BorderImage = "image/ÂìÅË¥®Ê°Ü=‰ºòÁßÄ.png",
        };
        _ = new GameDataItemQuality(ItemQuality.Rare)
        {
            Name = "Á®ÄÊúâ",
            Color = Color.FromArgb(35, 141, 227), //#238DE3
            BackgroundImage = "image/Â∫ïÊ°Ü=Á®ÄÊúâ.png",
            BorderImage = "image/ÂìÅË¥®Ê°Ü=Á®ÄÊúâ.png",
        };
        _ = new GameDataItemQuality(ItemQuality.Epic)
        {
            Name = "Âè≤ËØó",
            Color = Color.FromArgb(187, 137, 250), //#BB89FA
            BackgroundImage = "image/Â∫ïÊ°Ü=Âè≤ËØó.png",
            BorderImage = "image/ÂìÅË¥®Ê°Ü=Âè≤ËØó.png",
        };
        _ = new GameDataItemQuality(ItemQuality.Legendary)
        {
            Name = "‰º†ËØ¥",
            Color = Color.FromArgb(208, 143, 60), //#D08F3C
            BackgroundImage = "image/Â∫ïÊ°Ü=‰º†ËØ¥.png",
            BorderImage = "image/ÂìÅË¥®Ê°Ü=‰º†ËØ¥.png",
        };
        _ = new GameDataItemQuality(ItemQuality.Mythic)
        {
            Name = "Á•ûËØù",
            Color = Color.FromArgb(215, 46, 50), //#D72E32
            BackgroundImage = "image/Â∫ïÊ°Ü=Á•ûËØù.png",
            BorderImage = "image/ÂìÅË¥®Ê°Ü=Á•ûËØù.png",
        };
        var defaultCombatBehavior = new GameLink<GameDataAINode, GameDataAINodeSequence>("defaultCombatBehavior"u8);

        // Â≠êËäÇÁÇπ1ÔºöÊâ´ÊèèÊïå‰∫∫ËäÇÁÇπ
        var scanEnemies = new GameLink<GameDataAINode, GameDataAINodeValidateScan>("scanEnemies"u8);
        _ = new GameDataAINodeValidateScan(scanEnemies)
        {
            // ‰∏çÂøΩÁï•ÁâµÂºïÈôêÂà∂
            IgnoreLeash = false,
        };

        // Â≠êËäÇÁÇπ2ÔºöÂØπÊâ´ÊèèÁõÆÊ†áÊñΩÊ≥ï - Áõ¥Êé•‰ΩøÁî®ScanTargetThisTickÔºåÂç≥ scanEnemies ÁöÑËæìÂá∫
        var castAtTarget = new GameLink<GameDataAINode, GameDataAINodeValidateCast>("castAtTarget"u8);
        _ = new GameDataAINodeValidateCast(castAtTarget)
        {
            DoRecast = true,
        };

        // ‰∏ªË°å‰∏∫Ê†ëÔºöÁÆÄÂåñÁöÑÂ∫èÂàóËäÇÁÇπÔºàÊâ´Êèè -> ÊñΩÊ≥ïÔºâ
        _ = new GameDataAINodeSequence(defaultCombatBehavior)
        {
            // üîß ÁÆÄÂåñÁöÑ‰∏§Ê≠•Â∫èÂàóÔºöÊâ´Êèè -> ÊñΩÊ≥ï
            Nodes = [scanEnemies, castAtTarget],
        };
        // Default AI Definitions
        _ = new GameDataAIThinkTree(GameCore.ScopeData.AI.Default)
        {
            ScanFilters = [new() {
                Required=[UnitRelationship.Enemy, UnitFilter.Unit, UnitRelationship.Visible],
                Excluded=[UnitFilter.Item, UnitState.Invulnerable, UnitState.Dead]
            }],
            CombatBehaviorTree = defaultCombatBehavior,
        };

        // AI Combat Test Definitions - optimized for unit vs unit combat
        _ = new GameDataAIThinkTree(AI.CombatTest)
        {
            ScanFilters = [new() {
                Required=[UnitRelationship.Enemy, UnitFilter.Unit, UnitRelationship.Visible],
                Excluded=[UnitFilter.Item, UnitState.Invulnerable, UnitState.Dead]
            }],
            ScanSorts = [UnitFilter.Hero, UnitFilter.Unit], // Prioritize heroes, then units
            CombatBehaviorTree = defaultCombatBehavior,
        };

        _ = new GameDataActorAdditionModel(Actor.TestActorAdditionModel)
        {
            Model = Model.TestActorAdditionModel,
        };
        _ = new GameDataModel(Model.TestActorAdditionModel)
        {
            Radius = 50,
            Asset = "eqpt/weapon/sm_dr_sword_04_02/model.prefab"u8,
        };
        _ = new GameDataModel(Model.HostTestHero)
        {
            Radius = 50,
            Asset = "characters/general/sk_basic2/model.prefab"u8,
            ShadowSetting = new()
            {
                ShadowType = ShadowType.DeviceDependentShadow,
            },
            AnimationMappings = [
                new()
                {
                    AnimationRaw= "sword_idle"u8,
                    AnimationAlias= "idle"u8,
                },
                new()
                {
                    AnimationRaw= "sword_move"u8,
                    AnimationAlias= "move"u8,
                },
                ]
        };
        _ = new GameDataUnit(Unit.HostTestHero)
        {
            Name = "ÊµãËØïËã±ÈõÑ",
            AttackableRadius = 50,
            Properties = new() {
                { UnitProperty.LifeMax, 1000 },
                { UnitProperty.ManaMax, 1000 },
                { UnitProperty.Armor, 10 },
                { UnitProperty.MagicResistance, 10 },
                { UnitProperty.MoveSpeed, 350 }, // Â¢ûÂä†ÁßªÂä®ÈÄüÂ∫¶
                { UnitProperty.TurningSpeed, 1800 },
                { UnitProperty.AttackRange, 200 }, // Â¢ûÂä†ÊîªÂáªËåÉÂõ¥
                { UnitProperty.InventoryPickUpRange, 300 }, // Â¢ûÂä†ÊãæÂèñËåÉÂõ¥
            },
            UpdateFlags = new()
            {
                AllowMover = true,
                Turnable = true,
                Walkable = true,
            },
            VitalProperties = new()
            {
                { PropertyVital.Health, UnitProperty.LifeMax }
            },
            CollisionRadius = 32,
            DynamicCollisionMask = DynamicCollisionMask.Hero | DynamicCollisionMask.Building,
            Inventories = [Inventory.TestInventory6, Inventory.TestInventory6Equip],
            Filter = [UnitFilter.Hero, UnitFilter.Unit],
            DeathRemovalDelay = Timeout.InfiniteTimeSpan,
            ActorArray = [
                Actor.TestActorAdditionModel,
            ],
            StatusBarSetting = new()
            {
                DefaultStatusBar = "$$spark_core.bloodstrip.ALLY_HERO_NONE.root"u8,
                OverrideByRelationShip = new()
                {
                    { PlayerUnitRelationShip.Alliance, "$$spark_core.bloodstrip.ALLY_HERO_NONE.root"u8 },
                    { PlayerUnitRelationShip.Enemy, "$$spark_core.bloodstrip.ENEMY_HERO_NONE.root"u8 },
                    { PlayerUnitRelationShip.Neutral, "$$spark_core.bloodstrip.NEUTRAL_HERO_NONE.root"u8 },
                    { PlayerUnitRelationShip.MainUnit, "$$spark_core.bloodstrip.MAIN_HERO_NONE.root"u8 },
                },
            },
            Leveling = UnitLeveling.TestUnitLeveling,
            Model = Model.HostTestHero,
            Abilities = [Ability.ChargedTestSpell], // Ê∑ªÂä†Êñ∞ÁöÑÂÖÖËÉΩÊäÄËÉΩ
        };

        // AI Combat Test Hero - Â§çÂà∂HostTestHeroÈÖçÁΩÆÂπ∂Ê∑ªÂä†TacticalAI
        _ = new GameDataUnit(Unit.AICombatTestHero)
        {
            Name = "AIÊàòÊñóÊµãËØïËã±ÈõÑ",
            AttackableRadius = 50,
            Properties = new() {
                { UnitProperty.LifeMax, 1000 },
                { UnitProperty.ManaMax, 1000 },
                { UnitProperty.Armor, 10 },
                { UnitProperty.MagicResistance, 10 },
                { UnitProperty.MoveSpeed, 350 }, // Â¢ûÂä†ÁßªÂä®ÈÄüÂ∫¶
                { UnitProperty.TurningSpeed, 1800 },
                { UnitProperty.AttackRange, 200 }, // Â¢ûÂä†ÊîªÂáªËåÉÂõ¥
                { UnitProperty.InventoryPickUpRange, 300 }, // Â¢ûÂä†ÊãæÂèñËåÉÂõ¥
            },
            UpdateFlags = new()
            {
                AllowMover = true,
                Turnable = true,
                Walkable = true,
            },
            VitalProperties = new()
            {
                { PropertyVital.Health, UnitProperty.LifeMax }
            },
            CollisionRadius = 32,
            DynamicCollisionMask = DynamicCollisionMask.Hero | DynamicCollisionMask.Building,
            Inventories = [Inventory.TestInventory6, Inventory.TestInventory6Equip],
            Filter = [UnitFilter.Hero, UnitFilter.Unit],
            DeathRemovalDelay = Timeout.InfiniteTimeSpan,
            ActorArray = [
                Actor.TestActorAdditionModel,
            ],
            StatusBarSetting = new()
            {
                DefaultStatusBar = "$$spark_core.bloodstrip.ALLY_HERO_NONE.root"u8,
                OverrideByRelationShip = new()
                {
                    { PlayerUnitRelationShip.Alliance, "$$spark_core.bloodstrip.ALLY_HERO_NONE.root"u8 },
                    { PlayerUnitRelationShip.Enemy, "$$spark_core.bloodstrip.ENEMY_HERO_NONE.root"u8 },
                    { PlayerUnitRelationShip.Neutral, "$$spark_core.bloodstrip.NEUTRAL_HERO_NONE.root"u8 },
                    { PlayerUnitRelationShip.MainUnit, "$$spark_core.bloodstrip.MAIN_HERO_NONE.root"u8 },
                },
            },
            Model = Model.HostTestHero,
            TacticalAI = AI.CombatTest, // ÂÖ≥ÈîÆÔºöÊ∑ªÂä†TacticalAIÈÖçÁΩÆ
            Abilities = [Ability.TestSpell], // ÂÖ≥ÈîÆÔºöÊ∑ªÂä†ÊîªÂáªÊäÄËÉΩ
        };

        _ = new GameDataModel(Model.TestItem)
        {
            Radius = 50,
            Asset = "deco/handpaintedvol2_campsite/sm_backpack_01_base/model.prefab"u8,
        };

        _ = new GameDataUnit(Unit.TestItem)
        {
            Name = "ÊµãËØïÁâ©ÂìÅÂçï‰Ωç",
            AttackableRadius = 60,
            Filter = [UnitFilter.Item],
            State = [UnitState.Invulnerable],
            CollisionRadius = 32,
            DynamicCollisionMask = DynamicCollisionMask.Item,
            Model = Model.TestItem,
        };


        _ = new GameDataItemMod(Item.TestItem)
        {
            Unit = Unit.TestItem,
            Icon = "image/inventory/ÊòüÁÅ´Â∏ÅÂ§ßÂõæÊ†á.png"u8,
            Modifications = new()
            {
                [ItemSlotType.Equip] = new()
                {
                    Modifications = [new(){
                        Property = UnitProperty.LifeMax,
                        Value = (_) => 100,
                        Random = 75,
                    }],
                    Ability = Ability.TestSpell,
                }
            },
            StackStart = 5,
            Level = 6,
            Quality = 7,
        };
       // ========== Â°îÈò≤ÂïÜÂ∫óÁâ©ÂìÅÈÖçÁΩÆ ==========
        
        // 1. ÂáèÈÄüÂ°îÁâ©ÂìÅ
        _ = new GameDataItemMod(Item.SlowTowerItem)
        {
            Name = "ÂáèÈÄüÂ°î",
            Unit = Unit.TestItem, // ÊöÇÊó∂‰ΩøÁî®Áé∞ÊúâÁâ©ÂìÅÂçï‰Ωç‰Ωú‰∏∫ÊòæÁ§∫
            Modifications = new()
            {
                [ItemSlotType.Carry] = new()
                {
                    Ability = Ability.BuildSlowTower, // ‰∏ªÂä®ÊäÄËÉΩÊòØÂª∫ÈÄ†ÂáèÈÄüÂ°î
                }
            },
            StackStart = 1,
            StackMax = 10, // ÊúÄÂ§öÂ†ÜÂè†10‰∏™
            Level = 1,
            Quality = 1,
        };

        // 2. ÂÖâÁéØÂ°îÁâ©ÂìÅ
        _ = new GameDataItemMod(Item.AuraSlowTowerItem)
        {
            Unit = Unit.TestItem,
            Modifications = new()
            {
                [ItemSlotType.Carry] = new()
                {
                    Ability = Ability.BuildAuraSlowTower, // ‰∏ªÂä®ÊäÄËÉΩÊòØÂª∫ÈÄ†ÂÖâÁéØÂ°î
                }
            },
            StackStart = 1,
            StackMax = 10,
            Level = 2,
            Quality = 2,
        };

        // 3. ÁàÜÁÇ∏Â°îÁâ©ÂìÅ
        _ = new GameDataItemMod(Item.AOETowerItem)
        {
            Unit = Unit.TestItem,
            Modifications = new()
            {
                [ItemSlotType.Carry] = new()
                {
                    Ability = Ability.BuildAOETower, // ‰∏ªÂä®ÊäÄËÉΩÊòØÂª∫ÈÄ†ÁàÜÁÇ∏Â°î
                }
            },
            StackStart = 1,
            StackMax = 10,
            Level = 3,
            Quality = 3,
        };

        // 4. Á©øÈÄèÂ°îÁâ©ÂìÅ
        _ = new GameDataItemMod(Item.PenetrateTowerItem)
        {
            Unit = Unit.TestItem,
            Modifications = new()
            {
                [ItemSlotType.Carry] = new()
                {
                    Ability = Ability.BuildPenetrateTower, // ‰∏ªÂä®ÊäÄËÉΩÊòØÂª∫ÈÄ†Á©øÈÄèÂ°î
                }
            },
            StackStart = 1,
            StackMax = 10,
            Level = 4,
            Quality = 4,
        };

        // üé≠ ÂàõÂª∫Â∏¶ÊúâÈôÑÂ±ûË°®Áé∞ÁöÑÊµãËØïÁâ©ÂìÅÊï∞ÊçÆ

        // 1. ÂàõÂª∫Á≤íÂ≠êÊïàÊûú
        _ = new GameDataParticle(Particle.ItemEquipParticle)
        {
            Name = "Áâ©ÂìÅË£ÖÂ§áÁâπÊïà",
            Asset = "effect/eff_tongyong/huoqiu2/particle.effect"u8,
        };

        // 2. ÂàõÂª∫Ê®°Âûã
        _ = new GameDataModel(Model.TestItemWithActors)
        {
            Name = "ÊµãËØïÁâ©ÂìÅÊ®°ÂûãÔºàÂ∏¶ÈôÑÂ±ûË°®Áé∞Ôºâ",
            Radius = 60,
            Asset = "deco/handpaintedvol2_campsite/sm_backpack_01_base/model.prefab"u8,
        };

        _ = new GameDataModel(Model.ItemEffectModel)
        {
            Name = "Áâ©ÂìÅÁâπÊïàÊ®°Âûã",
            Radius = 30,
            Asset = "characters/palu_hx/sk_daershu/model.prefab"u8,
        };

        // 3. ÂàõÂª∫Actor
        _ = new GameDataActorModel(Actor.ItemSelfActor)
        {
            Name = "Áâ©ÂìÅËá™Ë∫´ÈôÑÂ±ûActor",
            Model = Model.ItemEffectModel,
            Socket = "socket_root"u8,
        };

        _ = new GameDataActorParticle(Actor.ItemEquipEffect)
        {
            Name = "Áâ©ÂìÅË£ÖÂ§áÁâπÊïàActor",
            Particle = Particle.ItemEquipParticle,
        };

        _ = new GameDataActorModel(Actor.ItemCarrierActor)
        {
            Name = "Áâ©ÂìÅÊåÅÊúâËÄÖÈôÑÂ±ûActor",
            Model = Model.ItemEffectModel,
            Socket = "socket_weapon_r"u8,
        };

        // 4. ÂàõÂª∫Â∏¶ActorArrayÁöÑÁâ©ÂìÅÂçï‰Ωç
        _ = new GameDataUnit(Unit.TestItemWithActors)
        {
            Name = "ÊµãËØïÁâ©ÂìÅÂçï‰ΩçÔºàÂ∏¶ÈôÑÂ±ûË°®Áé∞Ôºâ",
            AttackableRadius = 60,
            Filter = [UnitFilter.Item],
            State = [UnitState.Invulnerable],
            CollisionRadius = 32,
            DynamicCollisionMask = DynamicCollisionMask.Item,
            Model = Model.TestItemWithActors,
            // Áâ©ÂìÅÂçï‰ΩçËá™Ë∫´ÁöÑActorArray - Áâ©ÂìÅÂú®Âú∞Èù¢Êó∂ÁöÑÈôÑÂ±ûË°®Áé∞
            ActorArray = [
                Actor.ItemSelfActor,
            ],
        };

        // 5. ÂàõÂª∫Â∏¶ActorArrayÁöÑItemModÊï∞ÊçÆ
        _ = new GameDataItemMod(Item.TestItemWithActors)
        {
            Name = "ÊµãËØïÁâ©ÂìÅÔºàÂ∏¶ÈôÑÂ±ûË°®Áé∞Ôºâ",
            Unit = Unit.TestItemWithActors,
            Modifications = new()
            {
                [ItemSlotType.Equip] = new()
                {
                    Modifications = [new(){
                        Property = UnitProperty.LifeMax,
                        Value = (_) => 150,
                        Random = 50,
                    }],
                    Ability = Ability.TestSpell,
                    // Ë£ÖÂ§áÊó∂ÁªôÊåÅÊúâËÄÖÊ∑ªÂä†ÁöÑActorArray - Ë£ÖÂ§áËÄÖÁöÑÈôÑÂ±ûË°®Áé∞
                    ActorArray = [
                        Actor.ItemEquipEffect,
                        Actor.ItemCarrierActor,
                    ],
                }
            },
            StackStart = 3,
            Level = 5,
            Quality = 8,
        };

        _ = new GameDataUnit(Unit.TestMissileUnit)
        {
            Name = "TestMissileUnit",
            Filter = [UnitFilter.Missile],
            State = [UnitState.Invulnerable],
            CollisionRadius = 32,
            AttackableRadius = 60,
            Particle = "effect/eff_tongyong/huoqiu2/particle.effect"u8,
            UpdateFlags = new()
            {
                AllowMover = true,
            },
        };
        var linkTestEffectDamage = new GameLink<GameDataEffect, GameDataEffectDamage>("TestEffectDamage"u8);
        _ = new GameDataEffectDamage(linkTestEffectDamage)
        {
            Amount = static (_) => 100,
            Type = DamageType.Physical,
            LogExecutionFailure = true,
        };
        var linkTestPrint = new GameLink<GameDataEffect, GameDataEffectLog>("TestEffectPrint"u8);
        _ = new GameDataEffectLog(linkTestPrint)
        {
            Message = static (e) => $"Found {e.Target}",
            LogExecutionFailure = true,
        };
        var linkTestSearch = new GameLink<GameDataEffect, GameDataEffectSearch>("TestEffectSearch"u8);
        _ = new GameDataEffectSearch(linkTestSearch)
        {
            SearchFilters = [new() { Excluded = [UnitState.Dead] }],
            Radius = static (_) => 1000,
            Effect = linkTestPrint,
            LogExecutionFailure = true,
        };
        var linkTestDelay = new GameLink<GameDataEffect, GameDataEffectPersistDelay>("TestEffectDelay"u8);
        _ = new GameDataEffectPersistDelay(linkTestDelay)
        {
            Amount = static (_) => TimeSpan.FromSeconds(1),
            CompleteEffect = linkTestSearch,
            LogExecutionFailure = true,
        };
        var linkImpactSet = new GameLink<GameDataEffect, GameDataEffectSet>("ImpactSet"u8);
        _ = new GameDataEffectSet(linkImpactSet)
        {
            Effects = [
                new() { Link= linkTestEffectDamage },
                new() { Link= linkTestDelay }
                ],

            LogExecutionFailure = true,
        };
        _ = new GameDataParticle(Particle.TestParticleScript)
        {
            Asset = "effect/eff_tongyong/huoqiu_blast/particle.effect"u8,
            Radius = 128
        };
        _ = new GameDataActorParticle(Actor.TestActorParticle)
        {
            AutoPlay = true,
            Particle = Particle.TestParticleScript,
            KillOnFinish = true,
            ForceOneShot = true,
        };
        var linkTestEffectLaunchMissile = new GameLink<GameDataEffect, GameDataEffectLaunchMissile>("TestEffectLaunchMissile"u8);
        _ = new GameDataEffectLaunchMissile(linkTestEffectLaunchMissile)
        {
            Method = GameCore.Struct.EffectLaunchMissileMethod.CreateMissile,
            Missile = Unit.TestMissileUnit,
            DoImpactEntity = true,
            DoStaticCollision = true,
            ImpactMaxCount = static (_) => 1,
            ImpactSearchRadius = static (_) => 20,
            Speed = static (_) => 1250,
            ImpactEffect = linkImpactSet,
            CompleteEffect = linkTestDelay,
            ImpactSearchFilter = [
                new() {
                    Required = [UnitRelationship.Enemy],
                    Excluded = [UnitState.Dead, UnitState.Invulnerable]
                }
                ],
            LogExecutionFailure = true,
            ImpactActors = [Actor.TestActorParticle],
            LaunchHeight = (_) => 110
        };
        _ = new GameDataAnimationSimple(Animation.Idle)
        {
            Name = "Idle Animation",
            File = "idle"u8,
            IsLooping = true,
        };
        _ = new GameDataAnimationSimple(Animation.Move)
        {
            Name = "Move Animation",
            File = "move"u8,
            IsLooping = true,
        };
        _ = new GameDataAnimationSimple(Animation.Attack)
        {
            Name = "Attack Animation",
            File = "attack"u8,
            IsLooping = false,
        };
        _ = new GameDataAnimationSimple(Animation.Death)
        {
            Name = "Death Animation",
            File = "death"u8,
            IsLooping = false,
        };
        _ = new GameDataAnimationSimple(Animation.TestSpell)
        {
            Name = "Test Spell Animation",
            File = "anim/human/barehanded_anim/hand_05/skill_025.ani"u8,
            IsLooping = false,
        };
        var cooldownLink = new GameLink<GameDataCooldown, GameDataCooldownActive>("TestSpell"u8);
        _ = new GameDataCooldownActive(cooldownLink)
        {
            Time = static (_) => TimeSpan.FromSeconds(0.6),
        };
        _ = new GameDataAbilityExecute(Ability.TestSpell)
        {
            Time = new()
            {
                Preswing = static (_) => TimeSpan.FromSeconds(0.391),
                Channel = static (_) => TimeSpan.FromSeconds(0.148),
                Backswing = static (_) => TimeSpan.FromSeconds(0.395),
            },
            Cost = new()
            {
                Cooldown = cooldownLink
            },
            AbilityActiveFlags = new() { AllowEnqueueInCooldown = true },
            AbilityExecuteFlags = new() { }, // üîß ÁßªÈô§IsAttackÊ†áËÆ∞ÔºåÊµãËØïÁº∫ÁúÅÊâ´ÊèèËåÉÂõ¥
            Effect = linkTestEffectLaunchMissile,
            TargetType = AbilityTargetType.Vector,
            Range = static (_) => 800,
            AcquireSettings = new()
            {
                TargetingFilters = [new()
                { 
                    // UnitRelationship.Visible ÈÄöÂ∏∏‰∏çÈúÄË¶ÅÂú®Required‰∏≠ÊåáÂÆöÔºåÁî®Êà∑ËØ∑Ê±ÇÁöÑÊåá‰ª§ÂøÖÂÆö‰ºöÊ£ÄÊµãÁõÆÊ†áÂèØËßÅÊÄß„ÄÇËã•Âú®Required‰∏≠ÊåáÂÆöÔºåÂàô‰ª£Ë°®Âç≥‰ΩøÊòØËÑöÊú¨Ë∞ÉÁî®ÁöÑÊåá‰ª§‰πüÈúÄË¶ÅÊ£ÄÊµãÁõÆÊ†áÂèØËßÅÊÄß„ÄÇ
                    Required = [UnitRelationship.Enemy],
                    Excluded = [UnitState.Dead, UnitState.Invulnerable]
                }],
            },
            TargetingIndicatorInfo = new()
            {
                TargetingIndicator = TargetingIndicator.TestTargetingIndicator,
                CursorRadius = static (_) => 256,
                VectorLineWidth = static (_) => 128,
                VectorHighlightLimit = static (_) => 1
            },
            LogExecutionFailure = true,
            Animation = [Animation.TestSpell],
        };

        // ChargedTestSpell: 2ÁßíÂÜ∑Âç¥ + 10ÁßíÂÖÖËÉΩÊó∂Èó¥ÔºåÊúÄÂ§ßÂÖÖËÉΩÊï∞‰∏∫2ÁöÑÊäÄËÉΩ
        var chargedSpellCooldownLink = new GameLink<GameDataCooldown, GameDataCooldownActive>("ChargedTestSpellCooldown"u8);
        _ = new GameDataCooldownActive(chargedSpellCooldownLink)
        {
            Time = static (_) => TimeSpan.FromSeconds(2),
        };
        var chargedSpellChargeLink = new GameLink<GameDataCooldown, GameDataCooldownCharge>("ChargedTestSpellCharge"u8);
        _ = new GameDataCooldownCharge(chargedSpellChargeLink)
        {
            Time = static (_) => TimeSpan.FromSeconds(10),
            ChargeMax = static (_) => 2,
            ChargeStart = static (_) => 0,
        };
        _ = new GameDataAbilityExecute(Ability.ChargedTestSpell)
        {
            Time = new()
            {
                Preswing = static (_) => TimeSpan.FromSeconds(0.3),
                Backswing = static (_) => TimeSpan.FromSeconds(0.5),
            },
            Cost = new()
            {
                Cooldown = chargedSpellCooldownLink,
                Charge = chargedSpellChargeLink
            },
            AbilityActiveFlags = new() { AllowEnqueueInCooldown = true },
            AbilityExecuteFlags = new() { },
            Effect = linkTestEffectLaunchMissile,
            TargetType = AbilityTargetType.Vector,
            Range = static (_) => 600,
            AcquireSettings = new()
            {
                TargetingFilters = [new()
                {
                    Required = [UnitRelationship.Enemy],
                    Excluded = [UnitState.Dead, UnitState.Invulnerable]
                }],
            },
            TargetingIndicatorInfo = new()
            {
                TargetingIndicator = TargetingIndicator.TestTargetingIndicator,
                CursorRadius = static (_) => 256,
                VectorLineWidth = static (_) => 128,
                VectorHighlightLimit = static (_) => 1
            },
            LogExecutionFailure = true,
            Animation = [Animation.TestSpell],
        };

        _ = new GameDataTargetingIndicator(TargetingIndicator.TestTargetingIndicator)
        {
            CursorActors = [Actor.AOEActor],
            RangeActors = [Actor.RangeActor],
            VectorLineActors = [Actor.LineSegment],
            PreTargetingHighlightActors = [
                Actor.PreTargetingHighlight,
                ],
            Flags = new()
            {
                // DebugDraw = true
            },
        };
        
        // Áõ¥Á∫øÂûãÊåáÁ§∫Âô® - Ê≤°ÊúâcursorActor
        _ = new GameDataTargetingIndicator(TargetingIndicator.LineIndicator)
        {
            RangeActors = [Actor.RangeActor],
            VectorLineActors = [Actor.LineSegment],
            PreTargetingHighlightActors = [
                Actor.PreTargetingHighlight,
                ],
            Flags = new()
            {
                // DebugDraw = true
            },
        };
        
        // Âå∫ÂüüÊåáÁ§∫Âô® - Ê≤°ÊúâvectorLineActors
        _ = new GameDataTargetingIndicator(TargetingIndicator.AreaIndicator)
        {
            CursorActors = [Actor.AOEActor],
            RangeActors = [Actor.RangeActor],
            PreTargetingHighlightActors = [
                Actor.PreTargetingHighlight,
                ],
            Flags = new()
            {
                // DebugDraw = true
            },
        };
        _ = new GameDataActorParticle(Actor.RangeActor)
        {
            Particle = Particle.RangeParticle,
        };
        _ = new GameDataActorParticle(Actor.AOEActor)
        {
            Particle = Particle.AOEParticle,
        };
        _ = new GameDataActorParticle(Actor.LineLaunchActor)
        {
            Particle = Particle.LineLaunchParticle,
        };
        _ = new GameDataActorParticle(Actor.LineCenterActor)
        {
            Particle = Particle.LineCenterParticle,
        };
        _ = new GameDataActorParticle(Actor.LineImpactActor)
        {
            Particle = Particle.LineImpactParticle,
        };
        _ = new GameDataActorParticle(Actor.PreTargetingCircle)
        {
            Particle = Particle.PreTargetingCircle,
            InheritRotation = false,
        };
        _ = new GameDataParticle(Particle.RangeParticle)
        {
            Asset = "effect/effect_new/effect_zhishiqi/eff_zhishiqi/ps_yuanxing_1/particle.effect"u8,
            Radius = 70,
        };
        _ = new GameDataParticle(Particle.PreTargetingCircle)
        {
            Asset = "effect/effect_new/effect_guanghuan/eff_boss_guanghuan/particle.effect"u8,
            AssetLayerScale = 0.4f,
            Radius = 51.2f,
        };
        _ = new GameDataParticle(Particle.AOEParticle)
        {
            Asset = "effect/effect_new/effect_zhishiqi/eff_zhishiqi/ps_jineng_1/particle.effect"u8,
            Radius = 66,
        };
        _ = new GameDataParticle(Particle.LineLaunchParticle)
        {
            Asset = "effect/effect_new/effect_zhishiqi/eff_juxing/ps_wei_1/particle.effect"u8,
            Volume = new(128, 64, 128),
        };
        _ = new GameDataParticle(Particle.LineCenterParticle)
        {
            Asset = "effect/effect_new/effect_zhishiqi/eff_juxing/ps_zhong_1/particle.effect"u8,
            Volume = new(128, 64, 128),
        };
        _ = new GameDataParticle(Particle.LineImpactParticle)
        {
            Asset = "effect/effect_new/effect_zhishiqi/eff_zhixianxing/ps_tou_1/particle.effect"u8,
            Volume = new(128, 64, 128),
        };
        _ = new GameDataActorSegmentedRectangle(Actor.LineSegment)
        {
            HeightTest = ActorSegmentedHeight.LaunchSiteGround,
            LaunchActor = Actor.LineLaunchActor,
            CenterActor = Actor.LineCenterActor,
            ImpactActor = Actor.LineImpactActor,
            SegmentedFlags = new()
            {
                // DebugDraw = true,
            }
        };
        _ = new GameDataActorHighlight(Actor.PreTargetingHighlight)
        {
            From = new()
            {
                Value = new(255, 192, 192)
            },
            To = new()
            {
                Value = new(255, 128, 128)
            },
            AutoReverse = true,
            RepeatBehavior = RepeatBehavior.Forever,
            Duration = TimeSpan.FromSeconds(0.15),
        };

        // ÂàõÂª∫-150ÁßªÂä®ÈÄüÂ∫¶BuffÊï∞ÊçÆ
        _ = new GameDataBuff(Buff.SpeedDebuff)
        {
            DisplayName = new LocalizedString("ÈÄüÂ∫¶Èôç‰Ωé"),
            Description = new LocalizedString("ÁßªÂä®ÈÄüÂ∫¶Èôç‰Ωé150ÁÇπ"),
            SyncType = SyncType.Self,
            Polarity = BuffPolarity.Negative,
            StackStart = 1,
            Duration = (_) => TimeSpan.FromSeconds(5),
            BuffFlags = new BuffFlags
            {
                SingleInstancePerCaster = true,
                Channeling = false
            },
            Modifications = new()
            {
                new()
                {
                    Property = UnitProperty.MoveSpeed,
                    SubType = PropertySubType.Base,
                    Value = (_) => -150.0 // ÂáèÂ∞ë150ÁßªÂä®ÈÄüÂ∫¶
                }
            }
        };


        // Buff definitions
        _ = new GameDataBuff(Buff.Stun)
        {
            Name = "Áú©Êôï",
            // DisplayName = "Áú©Êôï",
            Description = "Êó†Ê≥ïÁßªÂä®ÂíåÊñΩÊ≥ï",
            Duration = static (_) => TimeSpan.FromSeconds(5),
            Icon = "image/buff/buff_1.png",
            ActorArray = [Actor.AOEActor],
            Polarity = GameCore.BuffSystem.Data.Enum.BuffPolarity.Negative, // üéØ ËÆæÁΩÆ‰∏∫Ë¥üÈù¢ÊïàÊûú
        };

        _ = new GameDataBuff(Buff.TestBuff)
        {
            Name = "ÊµãËØïBuff",
            Description = "Áî®‰∫éÊµãËØïÁöÑÊ∞∏‰πÖBuffÊïàÊûú",
            Icon = "image/buff/buff_2.png",
            Polarity = GameCore.BuffSystem.Data.Enum.BuffPolarity.Positive, // üéØ ËÆæÁΩÆ‰∏∫Ê≠£Èù¢ÊïàÊûú
            StackStart = 2, // üéØ Ëµ∑ÂßãÂ†ÜÂè†Êï∞Êîπ‰∏∫2
            StackMax = static (_) => 5, // üéØ ÊúÄÂ§ßÂ†ÜÂè†Êï∞Êîπ‰∏∫5
            BuffFlags = new()
            {
                Permanent = true
            }
        };

        // Effect definitions for adding buffs
        _ = new GameDataEffectBuffAdd(Effect.AddStunBuff)
        {
            BuffLink = Buff.Stun,
            LogExecutionFailure = true,
        };

        _ = new GameDataEffectBuffAdd(Effect.AddTestBuff)
        {
            BuffLink = Buff.TestBuff,
            LogExecutionFailure = true,
        };

        // Effect definition for removing all buffs
        _ = new GameDataEffectBuffRemove(Effect.RemoveAllBuffs)
        {
            LogExecutionFailure = true,
        };

        // Â°îÈò≤ÊÄ™Áâ©Âçï‰ΩçÈÖçÁΩÆ
        _ = new GameDataUnit(Unit.TDMonster)
        {
            Name = "Â°îÈò≤Â∞èÊÄ™",
            AttackableRadius = 40,
            Properties = new() {
                { UnitProperty.LifeMax, 200 },
                { UnitProperty.ManaMax, 100 },
                { UnitProperty.Armor, 5 },
                { UnitProperty.MagicResistance, 5 },
                { UnitProperty.MoveSpeed, 200 }, // ËæÉÊÖ¢ÁßªÂä®ÈÄüÂ∫¶
                { UnitProperty.TurningSpeed, 900 },
                { UnitProperty.AttackRange, 100 },
            },
            UpdateFlags = new()
            {
                AllowMover = true,
                Turnable = true,
                Walkable = true,
            },
            VitalProperties = new()
            {
                { PropertyVital.Health, UnitProperty.LifeMax }
            },
            CollisionRadius = 24,
            DynamicCollisionMask = DynamicCollisionMask.None, // ÊïåÊñπÂçï‰ΩçÊó†ËßÜÁ¢∞ÊíûÔºåÂèØ‰ª•Á©øËøáÂÖ∂‰ªñÂçï‰Ωç
            Filter = [UnitFilter.Unit],
            State = [UnitState.SuppressStaticCollision], // Êó†ËßÜÈùôÊÄÅÁ¢∞ÊíûÔºåÂèØ‰ª•Á©øËøáÂú∞ÂΩ¢ÈöúÁ¢ç
            DeathRemovalDelay = TimeSpan.FromSeconds(5), // Ê≠ª‰∫°5ÁßíÂêéÁßªÈô§
            StatusBarSetting = new()
            {
                DefaultStatusBar = "$$spark_core.bloodstrip.ENEMY_HERO_NONE.root"u8,
                OverrideByRelationShip = new()
                {
                    { PlayerUnitRelationShip.Enemy, "$$spark_core.bloodstrip.ENEMY_HERO_NONE.root"u8 },
                },
            },
            Model = Model.HostTestHero, // ÊöÇÊó∂‰ΩøÁî®Áé∞ÊúâÊ®°Âûã
            TacticalAI = AI.CombatTest, // Ê∑ªÂä†AIË°å‰∏∫
        };

        // Â°îÈò≤Ëã±ÈõÑÂçï‰ΩçÈÖçÁΩÆ - ‰∏ìÈó®Áî®‰∫éÂ°îÈò≤Ê∏∏Êàè
        _ = new GameDataUnit(Unit.TowerDefenseHero)
        {
            Name = "Â°îÈò≤Ëã±ÈõÑ",
            AttackableRadius = 50,
            Properties = new() {
                { UnitProperty.LifeMax, 20 }, // Â°îÈò≤Ëã±ÈõÑË°ÄÈáèËÆæÁΩÆ‰∏∫20ÁÇπ
                { UnitProperty.ManaMax, 100 },
                { UnitProperty.Armor, 0 },
                { UnitProperty.MagicResistance, 0 },
                { UnitProperty.MoveSpeed, 400 }, // Ëã±ÈõÑÁßªÂä®ÈÄüÂ∫¶
                { UnitProperty.TurningSpeed, 1800 },
                { UnitProperty.AttackRange, 150 },
                { UnitProperty.InventoryPickUpRange, 300 },
            },
            UpdateFlags = new()
            {
                AllowMover = true,
                Turnable = true,
                Walkable = true,
            },
            VitalProperties = new()
            {
                { PropertyVital.Health, UnitProperty.LifeMax }
            },
            CollisionRadius = 32,
            DynamicCollisionMask = DynamicCollisionMask.None, // Â°îÈò≤Ëã±ÈõÑÊó†ËßÜÂä®ÊÄÅÁ¢∞ÊíûÔºåÂèØ‰ª•Á©øËøáÂÖ∂‰ªñÂçï‰Ωç
            Inventories = [Inventory.TestInventory6, Inventory.TestInventory6Equip],
            Filter = [UnitFilter.Hero, UnitFilter.Unit],
            State = [UnitState.SuppressStaticCollision], // Êó†ËßÜÈùôÊÄÅÁ¢∞ÊíûÔºåÂèØ‰ª•Á©øËøáÂú∞ÂΩ¢ÈöúÁ¢ç
            // Model = Model.HostTestHero, // ‰ΩøÁî®Áé∞ÊúâÁöÑËã±ÈõÑÊ®°Âûã
            Abilities = [ // ÂõõÁßçÂª∫ÈÄ†ÊäÄËÉΩ
                // Ability.TestSpell,
                // Ability.BuildSlowTower,
                // Ability.BuildAuraSlowTower,
                // Ability.BuildAOETower,
                // Ability.BuildPenetrateTower,
            ],
            StatusBarSetting = new()
            {
                DefaultStatusBar = "$$spark_core.bloodstrip.FRIENDLY_HERO_NONE.root"u8,
                OverrideByRelationShip = new()
                {
                    { PlayerUnitRelationShip.Enemy, "$$spark_core.bloodstrip.ENEMY_HERO_NONE.root"u8 },
                },
            },
        };

        // ========== ÂõõÁßçÂ°îÈò≤Âª∫Á≠ëÁöÑÂÜ∑Âç¥Êó∂Èó¥ÈÖçÁΩÆ ==========
        _ = new GameDataCooldownActive(new GameLink<GameDataCooldown, GameDataCooldownActive>("BuildSlowTowerCooldown"u8))
        {
            Time = static (_) => TimeSpan.FromSeconds(1.5)
        };

        _ = new GameDataCooldownActive(new GameLink<GameDataCooldown, GameDataCooldownActive>("BuildAuraSlowTowerCooldown"u8))
        {
            Time = static (_) => TimeSpan.FromSeconds(1.2)
        };

        _ = new GameDataCooldownActive(new GameLink<GameDataCooldown, GameDataCooldownActive>("BuildAOETowerCooldown"u8))
        {
            Time = static (_) => TimeSpan.FromSeconds(2.0)
        };

        _ = new GameDataCooldownActive(new GameLink<GameDataCooldown, GameDataCooldownActive>("BuildPenetrateTowerCooldown"u8))
        {
            Time = static (_) => TimeSpan.FromSeconds(2.5)
        };

        // ========== ÂõõÁßçÂ°îÈò≤Âª∫Á≠ëÁöÑÂª∫ÈÄ†ÊïàÊûúÈÖçÁΩÆ ==========
        _ = new GameDataBuildingEffect(BuildingEffect.BuildSlowTowerEffect)
        {
            BuildingUnit = Unit.SlowTower,
            SuccessRate = 1.0f,
            CheckCollision = true,
            Offset = Vector3.Zero
        };

        _ = new GameDataBuildingEffect(BuildingEffect.BuildAuraSlowTowerEffect)
        {
            BuildingUnit = Unit.AuraSlowTower,
            SuccessRate = 1.0f,
            CheckCollision = true,
            Offset = Vector3.Zero
        };

        _ = new GameDataBuildingEffect(BuildingEffect.BuildAOETowerEffect)
        {
            BuildingUnit = Unit.AOETower,
            SuccessRate = 1.0f,
            CheckCollision = true,
            Offset = Vector3.Zero
        };

        _ = new GameDataBuildingEffect(BuildingEffect.BuildPenetrateTowerEffect)
        {
            BuildingUnit = Unit.PenetrateTower,
            SuccessRate = 1.0f,
            CheckCollision = true,
            Offset = Vector3.Zero
        };

        // ========== ÂõõÁßçÂ°îÈò≤Âª∫Á≠ëÁöÑÂª∫ÈÄ†ÊäÄËÉΩÈÖçÁΩÆ ==========
        
        // 1. Âª∫ÈÄ†Âçï‰ΩìÂáèÈÄüÂ°î
        _ = new GameDataAbilityExecuteBuilding(Ability.BuildSlowTower)
        {
            Name = "BuildSlowTower",
            DisplayName = "Âª∫ÈÄ†ÂáèÈÄüÂ°î",
            Description = "Âª∫ÈÄ†‰∏ÄÂ∫ßÂèëÂ∞ÑÂáèÈÄüÊäïÂ∞ÑÁâ©ÁöÑÈò≤Âæ°Â°î",
            TargetType = AbilityTargetType.Ground,
            
            Time = new()
            {
                Preswing = static (_) => TimeSpan.FromSeconds(0.2),
                Channel = static (_) => TimeSpan.FromSeconds(1.2),
                Backswing = static (_) => TimeSpan.FromSeconds(0.5)
            },
            
            Range = static (_) => 10000f,
            Cost = new()
            {
                Cooldown = new GameLink<GameDataCooldown, GameDataCooldownActive>("BuildSlowTowerCooldown"u8)
            },
            
            Effect = BuildingEffect.BuildSlowTowerEffect,
            Unit = Unit.SlowTower,
            PreviewActor = Actor.SlowTowerPreviewActor,
            PreviewOffset = Vector3.Zero,
            PreviewAlpha = 0.7f,
            GridSnapSize = 64f * 4, // 4x4ÁΩëÊ†º
            ShowInvalidPreview = true
        };

        // 2. Âª∫ÈÄ†ÂÖâÁéØÂáèÈÄüÂ°î
        _ = new GameDataAbilityExecuteBuilding(Ability.BuildAuraSlowTower)
        {
            Name = "BuildAuraSlowTower",
            DisplayName = "Âª∫ÈÄ†ÂÖâÁéØÂ°î",
            Description = "Âª∫ÈÄ†‰∏ÄÂ∫ßÈáäÊîæÂáèÈÄüÂÖâÁéØÁöÑÈò≤Âæ°Â°î",
            TargetType = AbilityTargetType.Ground,
            
            Time = new()
            {
                Preswing = static (_) => TimeSpan.FromSeconds(0.2),
                Channel = static (_) => TimeSpan.FromSeconds(1.0),
                Backswing = static (_) => TimeSpan.FromSeconds(0.5)
            },
            
            Range = static (_) => 10000f,
            Cost = new()
            {
                Cooldown = new GameLink<GameDataCooldown, GameDataCooldownActive>("BuildAuraSlowTowerCooldown"u8)
            },
            
            Effect = BuildingEffect.BuildAuraSlowTowerEffect,
            Unit = Unit.AuraSlowTower,
            PreviewActor = Actor.AuraSlowTowerPreviewActor,
            PreviewOffset = Vector3.Zero,
            PreviewAlpha = 0.7f,
            GridSnapSize = 64f * 4, // 4x4ÁΩëÊ†º
            ShowInvalidPreview = true
        };

        // 3. Âª∫ÈÄ†Áæ§‰Ωì‰º§ÂÆ≥Â°î
        _ = new GameDataAbilityExecuteBuilding(Ability.BuildAOETower)
        {
            Name = "BuildAOETower",
            DisplayName = "Âª∫ÈÄ†ÁàÜÁÇ∏Â°î",
            Description = "Âª∫ÈÄ†‰∏ÄÂ∫ßÈÄ†ÊàêÁæ§‰Ωì‰º§ÂÆ≥ÁöÑÈò≤Âæ°Â°î",
            TargetType = AbilityTargetType.Ground,
            
            Time = new()
            {
                Preswing = static (_) => TimeSpan.FromSeconds(0.2),
                Channel = static (_) => TimeSpan.FromSeconds(1.3),
                Backswing = static (_) => TimeSpan.FromSeconds(0.5)
            },
            
            Range = static (_) => 10000f,
            Cost = new()
            {
                Cooldown = new GameLink<GameDataCooldown, GameDataCooldownActive>("BuildAOETowerCooldown"u8)
            },
            
            Effect = BuildingEffect.BuildAOETowerEffect,
            Unit = Unit.AOETower,
            PreviewActor = Actor.AOETowerPreviewActor,
            PreviewOffset = Vector3.Zero,
            PreviewAlpha = 0.7f,
            GridSnapSize = 64f * 4, // 4x4ÁΩëÊ†º
            ShowInvalidPreview = true
        };

        // 4. Âª∫ÈÄ†ÂêëÈáèÁ©øÈÄèÂ°î
        _ = new GameDataAbilityExecuteBuilding(Ability.BuildPenetrateTower)
        {
            Name = "BuildPenetrateTower",
            DisplayName = "Âª∫ÈÄ†Á©øÈÄèÂ°î",
            Description = "Âª∫ÈÄ†‰∏ÄÂ∫ßÂèëÂ∞ÑÁ©øÈÄèÊîªÂáªÁöÑÈò≤Âæ°Â°î",
            TargetType = AbilityTargetType.Ground,
            
            Time = new()
            {
                Preswing = static (_) => TimeSpan.FromSeconds(0.2),
                Channel = static (_) => TimeSpan.FromSeconds(1.5),
                Backswing = static (_) => TimeSpan.FromSeconds(0.5)
            },
            
            Range = static (_) => 10000f,
            Cost = new()
            {
                Cooldown = new GameLink<GameDataCooldown, GameDataCooldownActive>("BuildPenetrateTowerCooldown"u8)
            },
            
            Effect = BuildingEffect.BuildPenetrateTowerEffect,
            Unit = Unit.PenetrateTower,
            PreviewActor = Actor.PenetrateTowerPreviewActor,
            PreviewOffset = Vector3.Zero,
            PreviewAlpha = 0.7f,
            GridSnapSize = 64f * 4, // 4x4ÁΩëÊ†º
            ShowInvalidPreview = true
        };

        // Âª∫ÈÄ†È¢ÑËßàActorÈÖçÁΩÆ
        _ = new GameDataActorModel(Actor.TowerPreviewActor)
        {
            Name = "Èò≤Âæ°Â°îÈ¢ÑËßàActor",
            Model = Model.HostTestHero, // ÊöÇÊó∂‰ΩøÁî®Áé∞ÊúâÊ®°ÂûãÔºåÂêéÁª≠ÂèØ‰ª•ÊõøÊç¢‰∏∫‰∏ìÈó®ÁöÑÈ¢ÑËßàÊ®°Âûã
            Offset = Vector3.Zero,
            // Ê∑ªÂä†Êõ¥Â§öÈÖçÁΩÆÁ°Æ‰øùÂÆ¢Êà∑Á´ØÂèØ‰ª•ÂàõÂª∫
            // ÂèØËÉΩÈúÄË¶ÅÁöÑÂÖ∂‰ªñÂ±ûÊÄß...
        };

        _ = new GameDataActorModel(Actor.WallPreviewActor)
        {
            Name = "ÂüéÂ¢ôÈ¢ÑËßàActor",
            Model = Model.HostTestHero, // ÊöÇÊó∂‰ΩøÁî®Áé∞ÊúâÊ®°ÂûãÔºåÂêéÁª≠ÂèØ‰ª•ÊõøÊç¢‰∏∫‰∏ìÈó®ÁöÑÈ¢ÑËßàÊ®°Âûã
            Offset = Vector3.Zero
        };

        // ÂõõÁßçÂ°îÁöÑÈ¢ÑËßàActorÈÖçÁΩÆ
        _ = new GameDataActorModel(Actor.SlowTowerPreviewActor)
        {
            Name = "ÂáèÈÄüÂ°îÈ¢ÑËßàActor",
            Model = Model.SlowTowerModel, // ‰ΩøÁî®ÂáèÈÄüÂ°îÁöÑÊ®°Âûã
            Offset = Vector3.Zero,
        };

        _ = new GameDataActorModel(Actor.AuraSlowTowerPreviewActor)
        {
            Name = "ÂÖâÁéØÂ°îÈ¢ÑËßàActor",
            Model = Model.AuraSlowTowerModel, // ‰ΩøÁî®ÂÖâÁéØÂ°îÁöÑÊ®°Âûã
            Offset = Vector3.Zero,
        };

        _ = new GameDataActorModel(Actor.AOETowerPreviewActor)
        {
            Name = "ÁàÜÁÇ∏Â°îÈ¢ÑËßàActor",
            Model = Model.AOETowerModel, // ‰ΩøÁî®ÁàÜÁÇ∏Â°îÁöÑÊ®°Âûã
            Offset = Vector3.Zero,
        };

        _ = new GameDataActorModel(Actor.PenetrateTowerPreviewActor)
        {
            Name = "Á©øÈÄèÂ°îÈ¢ÑËßàActor",
            Model = Model.PenetrateTowerModel, // ‰ΩøÁî®Á©øÈÄèÂ°îÁöÑÊ®°Âûã
            Offset = Vector3.Zero,
        };

        // Âª∫ÈÄ†ÁΩëÊ†ºÊ®°ÂûãÈÖçÁΩÆ
        _ = new GameDataModel(Model.BuildGridModel)
        {
            Name = "Âª∫ÈÄ†ÁΩëÊ†ºÊ®°Âûã_Á∫¢Ëâ≤",
            Asset = "deco/engine/SM_Plane_A01/model.prefab", // Á∫¢Ëâ≤ÁΩëÊ†º
            AssetLayerScale = 0.5f,
        };

        _ = new GameDataModel(Model.BuildGridModel_1)
        {
            Name = "Âª∫ÈÄ†ÁΩëÊ†ºÊ®°Âûã_ÁªøËâ≤", 
            Asset = "deco/engine/SM_Plane_A02/model.prefab", // ÁªøËâ≤ÁΩëÊ†º
            AssetLayerScale = 0.5f,
        };

        _ = new GameDataModel(Model.BuildGridModel_2)
        {
            Name = "Âª∫ÈÄ†ÁΩëÊ†ºÊ®°Âûã_ÈªÑËâ≤",
            Asset = "deco/engine/SM_Plane_A03/model.prefab", // ÈªÑËâ≤ÁΩëÊ†º
            AssetLayerScale = 0.5f,
        };

        // Âª∫ÈÄ†ÁΩëÊ†ºActorÈÖçÁΩÆÔºàÁî®‰∫éÊòæÁ§∫ÊúâÊïà/Êó†Êïà‰ΩçÁΩÆÔºâ
        _ = new GameDataActorGrid(Actor.BuildingValidGrid)
        {
            Name = "Âª∫ÈÄ†ÊúâÊïàÁΩëÊ†º",
            GridSize = 64f, // Â¢ûÂ§ßÁΩëÊ†ºÂ∞∫ÂØ∏‰ª•ÊòæÁ§∫2x2Âå∫Âüü
            StateModels = new List<IGameLink<GameDataModel>?>
            {
                null,                   // 0: ÈöêËóèÊ†ºÂ≠ê
                Model.BuildGridModel_1, // 1: ÈªòËÆ§ÊòæÁ§∫ÔºàÁªøËâ≤ - SM_Plane_A02Ôºâ
                Model.BuildGridModel_1, // 2: ÊúâÊïàÈ´ò‰∫ÆÔºàÁªøËâ≤ - SM_Plane_A02Ôºâ
                Model.BuildGridModel,   // 3: Êó†ÊïàÈ´ò‰∫ÆÔºàÁ∫¢Ëâ≤ - SM_Plane_A01Ôºâ
                Model.BuildGridModel_1  // 4: ‰øùÁïôÔºàÁªøËâ≤ - SM_Plane_A02Ôºâ
            }
        };

        Game.Logger.LogInformation("üèóÔ∏è Âª∫ÈÄ†Á≥ªÁªüÊï∞ÁºñË°®ÂàùÂßãÂåñÂÆåÊàê");
        Game.Logger.LogInformation("üé≠ Âª∫ÈÄ†È¢ÑËßàActorÈÖçÁΩÆÂÆåÊàê");
        Game.Logger.LogInformation("ü¶∏ Ëã±ÈõÑÂçï‰ΩçÂ∑≤ÈÖçÁΩÆÂª∫ÈÄ†ÊäÄËÉΩ‰Ωú‰∏∫ÈªòËÆ§ÊäÄËÉΩ");

        // ========== Â°îÈò≤Âª∫Á≠ëÁ≥ªÁªüÈÖçÁΩÆ ==========
        InitializeTowerDefenseBuildings();
        
        Game.Logger.LogInformation("üè∞ Â°îÈò≤Âª∫Á≠ëÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàê");
    }

    /// <summary>
    /// ÂàùÂßãÂåñÂ°îÈò≤Âª∫Á≠ëÁ≥ªÁªü
    /// </summary>
    private static void InitializeTowerDefenseBuildings()
    {
        // ========== Ê®°ÂûãÈÖçÁΩÆ ==========
        _ = new GameDataModel(Model.SlowTowerModel)
        {
            Name = "Âçï‰ΩìÂáèÈÄüÂ°îÊ®°Âûã",
            Asset = "deco/dungeon/sk_garden_stonetower_a03/model.prefab",
        };

        _ = new GameDataModel(Model.AuraSlowTowerModel)
        {
            Name = "ÂÖâÁéØÂáèÈÄüÂ°îÊ®°Âûã",
            Asset = "deco/dungeon/sk_garden_stonetower_a/model.prefab",
        };

        _ = new GameDataModel(Model.AOETowerModel)
        {
            Name = "Áæ§‰Ωì‰º§ÂÆ≥Â°îÊ®°Âûã",
            Asset = "deco/dungeon/sk_garden_stonetower_a05/model.prefab",
        };

        _ = new GameDataModel(Model.PenetrateTowerModel)
        {
            Name = "ÂêëÈáèÁ©øÈÄèÂ°îÊ®°Âûã",
            Asset = "deco/dungeon/sk_garden_stonetower_a04/model.prefab",
        };
        // ========== Â°îÈò≤Âª∫Á≠ëÁ≠âÁ∫ßÁ≥ªÁªüÈÖçÁΩÆ ==========
        
        // 1. ÂáèÈÄüÂ°îÁ≠âÁ∫ßÁ≥ªÁªü
        _ = new GameDataUnitLeveling(UnitLeveling.SlowTowerLeveling)
        {
            ExperienceRequiredForEachLevel = [0, 100, 200, 400, 800, 1600], // ÊØèÁ∫ßÊâÄÈúÄÁªèÈ™åÔºö1Á∫ß0ÁªèÈ™åÔºå2Á∫ß100ÁªèÈ™åÔºå3Á∫ß200ÁªèÈ™å...
            Modifications = new()
            {
                // ÊØèÁ∫ßÊèêÂçáÊîªÂáªÂäõÂíåË°ÄÈáè
                new() { Property = UnitProperty.AttackDamage, SubType = PropertySubType.Base, Value = (context) => 50.0 }, // 1Á∫ßÊîªÂáªÂäõ
                new() { Property = UnitProperty.LifeMax, SubType = PropertySubType.Base, Value = (context) => 800.0 }, // 1Á∫ßË°ÄÈáè
            }
        };

        // 2. ÂÖâÁéØÂáèÈÄüÂ°îÁ≠âÁ∫ßÁ≥ªÁªü
        _ = new GameDataUnitLeveling(UnitLeveling.AuraSlowTowerLeveling)
        {
            ExperienceRequiredForEachLevel = [0, 120, 240, 480, 960, 1920],
            Modifications = new()
            {
                new() { Property = UnitProperty.AttackDamage, SubType = PropertySubType.Base, Value = (context) => 40.0 }, // 1Á∫ßÊîªÂáªÂäõ
                new() { Property = UnitProperty.LifeMax, SubType = PropertySubType.Base, Value = (context) => 700.0 }, // 1Á∫ßË°ÄÈáè
            }
        };

        // 3. Áæ§‰Ωì‰º§ÂÆ≥Â°îÁ≠âÁ∫ßÁ≥ªÁªü
        _ = new GameDataUnitLeveling(UnitLeveling.AOETowerLeveling)
        {
            ExperienceRequiredForEachLevel = [0, 150, 300, 600, 1200, 2400],
            Modifications = new()
            {
                new() { Property = UnitProperty.AttackDamage, SubType = PropertySubType.Base, Value = (context) => 80.0 }, // 1Á∫ßÊîªÂáªÂäõ
                new() { Property = UnitProperty.LifeMax, SubType = PropertySubType.Base, Value = (context) => 600.0 }, // 1Á∫ßË°ÄÈáè
            }
        };

        // 4. ÂêëÈáèÁ©øÈÄèÂ°îÁ≠âÁ∫ßÁ≥ªÁªü
        _ = new GameDataUnitLeveling(UnitLeveling.PenetrateTowerLeveling)
        {
            ExperienceRequiredForEachLevel = [0, 200, 400, 800, 1600, 3200],
            Modifications = new()
            {
                new() { Property = UnitProperty.AttackDamage, SubType = PropertySubType.Base, Value = (context) => 100.0 }, // 1Á∫ßÊîªÂáªÂäõ
                new() { Property = UnitProperty.LifeMax, SubType = PropertySubType.Base, Value = (context) => 900.0 }, // 1Á∫ßË°ÄÈáè
            }
        };

        // ========== Â°îÂçï‰ΩçÈÖçÁΩÆ ==========
        
        // 1. Âçï‰ΩìÂáèÈÄüÂ°î
        _ = new GameDataUnit(Unit.SlowTower)
        {
            Name = "Âçï‰ΩìÂáèÈÄüÂ°î",
            AttackableRadius = 400,
            Leveling = UnitLeveling.SlowTowerLeveling, // üîß Ê∑ªÂä†Á≠âÁ∫ßÁ≥ªÁªü
            Properties = new()
            {
                { UnitProperty.LifeMax, 800 },
                { UnitProperty.AttackRange, 400 },
                { UnitProperty.AttackDamage, 50 }, // Âü∫Á°ÄÊîªÂáªÂäõÔºà1Á∫ßÔºâ
            },
            VitalProperties = new()
            {
                { PropertyVital.Health, UnitProperty.LifeMax }
            },
            CollisionRadius = 48,
            DynamicCollisionMask = DynamicCollisionMask.Unit,
            Filter = [UnitFilter.Structure], // üèóÔ∏è Êîπ‰∏∫Âª∫Á≠ëÁ±ªÂûãÊ†áËØÜ
            DeathRemovalDelay = Timeout.InfiniteTimeSpan,
            Model = Model.SlowTowerModel,
            Abilities = [
                Ability.SlowProjectilePassive  // ‚úÖ Âè™‰øùÁïôË¢´Âä®ÊäÄËÉΩ (Ëá™Âä®ÊîªÂáª)
            ],
            // 4x4ÁΩëÊ†ºË∂≥Ëøπ
            Footprint = new Footprint(4, 4, GameCore.CollisionSystem.Data.Enum.CollisionType.Static)
            {
                // ËÆæÁΩÆÊâÄÊúâ4x4Ê†ºÂ≠êÈÉΩË¢´Âç†Áî®
                [0, 0] = true, [1, 0] = true, [2, 0] = true, [3, 0] = true,
                [0, 1] = true, [1, 1] = true, [2, 1] = true, [3, 1] = true,
                [0, 2] = true, [1, 2] = true, [2, 2] = true, [3, 2] = true,
                [0, 3] = true, [1, 3] = true, [2, 3] = true, [3, 3] = true
            },
        };

        // 2. ÂÖâÁéØÂáèÈÄüÂ°î
        _ = new GameDataUnit(Unit.AuraSlowTower)
        {
            Name = "ÂÖâÁéØÂáèÈÄüÂ°î",
            AttackableRadius = 300,
            Leveling = UnitLeveling.AuraSlowTowerLeveling, // üîß Ê∑ªÂä†Á≠âÁ∫ßÁ≥ªÁªü
            Properties = new()
            {
                { UnitProperty.LifeMax, 700 },
                { UnitProperty.AttackRange, 300 },
                { UnitProperty.AttackDamage, 40 }, // Âü∫Á°ÄÊîªÂáªÂäõÔºà1Á∫ßÔºâ
            },
            VitalProperties = new()
            {
                { PropertyVital.Health, UnitProperty.LifeMax }
            },
            CollisionRadius = 48,
            DynamicCollisionMask = DynamicCollisionMask.Unit,
            Filter = [UnitFilter.Structure], // üèóÔ∏è Êîπ‰∏∫Âª∫Á≠ëÁ±ªÂûãÊ†áËØÜ
            DeathRemovalDelay = Timeout.InfiniteTimeSpan,
            Model = Model.AuraSlowTowerModel,
            Abilities = [
                Ability.AuraSlowPassive  // ‚úÖ Âè™‰øùÁïôË¢´Âä®ÊäÄËÉΩ (Ëá™Âä®ÊîªÂáª)
            ],            
            // 4x4ÁΩëÊ†ºË∂≥Ëøπ
            Footprint = new Footprint(4, 4, GameCore.CollisionSystem.Data.Enum.CollisionType.Static)
            {
                // ËÆæÁΩÆÊâÄÊúâ4x4Ê†ºÂ≠êÈÉΩË¢´Âç†Áî®
                [0, 0] = true, [1, 0] = true, [2, 0] = true, [3, 0] = true,
                [0, 1] = true, [1, 1] = true, [2, 1] = true, [3, 1] = true,
                [0, 2] = true, [1, 2] = true, [2, 2] = true, [3, 2] = true,
                [0, 3] = true, [1, 3] = true, [2, 3] = true, [3, 3] = true
            },
        };

        // 3. Áæ§‰Ωì‰º§ÂÆ≥Â°î
        _ = new GameDataUnit(Unit.AOETower)
        {
            Name = "Áæ§‰Ωì‰º§ÂÆ≥Â°î",
            AttackableRadius = 250,
            Leveling = UnitLeveling.AOETowerLeveling, // üîß Ê∑ªÂä†Á≠âÁ∫ßÁ≥ªÁªü
            Properties = new()
            {
                { UnitProperty.LifeMax, 600 },
                { UnitProperty.AttackRange, 250 },
                { UnitProperty.AttackDamage, 80 }, // Âü∫Á°ÄÊîªÂáªÂäõÔºà1Á∫ßÔºâ
            },
            VitalProperties = new()
            {
                { PropertyVital.Health, UnitProperty.LifeMax }
            },
            CollisionRadius = 48,
            DynamicCollisionMask = DynamicCollisionMask.Unit,
            Filter = [UnitFilter.Structure], // üèóÔ∏è Êîπ‰∏∫Âª∫Á≠ëÁ±ªÂûãÊ†áËØÜ
            DeathRemovalDelay = Timeout.InfiniteTimeSpan,
            Model = Model.AOETowerModel,
            Abilities = [
                Ability.AOEDamagePassive  // ‚úÖ Âè™‰øùÁïôË¢´Âä®ÊäÄËÉΩ (Ëá™Âä®ÊîªÂáª)
            ],
            // 4x4ÁΩëÊ†ºË∂≥Ëøπ
            Footprint = new Footprint(4, 4, GameCore.CollisionSystem.Data.Enum.CollisionType.Static)
            {
                // ËÆæÁΩÆÊâÄÊúâ4x4Ê†ºÂ≠êÈÉΩË¢´Âç†Áî®
                [0, 0] = true, [1, 0] = true, [2, 0] = true, [3, 0] = true,
                [0, 1] = true, [1, 1] = true, [2, 1] = true, [3, 1] = true,
                [0, 2] = true, [1, 2] = true, [2, 2] = true, [3, 2] = true,
                [0, 3] = true, [1, 3] = true, [2, 3] = true, [3, 3] = true
            },
        };

        // 4. ÂêëÈáèÁ©øÈÄèÂ°î
        _ = new GameDataUnit(Unit.PenetrateTower)
        {
            Name = "ÂêëÈáèÁ©øÈÄèÂ°î",
            AttackableRadius = 3000, // üéØ Êõ¥Êñ∞ÊîªÂáªËåÉÂõ¥‰∏∫3000 (Â¶Ç‰∏ª‰∫∫Ë¶ÅÊ±Ç)
            Leveling = UnitLeveling.PenetrateTowerLeveling, // üîß Ê∑ªÂä†Á≠âÁ∫ßÁ≥ªÁªü
            Properties = new()
            {
                { UnitProperty.LifeMax, 900 },
                { UnitProperty.AttackRange, 3000 }, // üéØ Êõ¥Êñ∞ÊîªÂáªËåÉÂõ¥‰∏∫3000
                { UnitProperty.AttackDamage, 100 }, // Âü∫Á°ÄÊîªÂáªÂäõÔºà1Á∫ßÔºâ
            },
            VitalProperties = new()
            {
                { PropertyVital.Health, UnitProperty.LifeMax }
            },
            CollisionRadius = 48,
            DynamicCollisionMask = DynamicCollisionMask.Unit,
            Filter = [UnitFilter.Structure], // üèóÔ∏è Êîπ‰∏∫Âª∫Á≠ëÁ±ªÂûãÊ†áËØÜ
            DeathRemovalDelay = Timeout.InfiniteTimeSpan,
            Model = Model.PenetrateTowerModel,
            Abilities = [
                Ability.PenetrateAttackPassive  // ‚úÖ Âè™‰øùÁïôË¢´Âä®ÊäÄËÉΩ (Ëá™Âä®ÊîªÂáª)
            ],
            // 4x4ÁΩëÊ†ºË∂≥Ëøπ
            Footprint = new Footprint(4, 4, GameCore.CollisionSystem.Data.Enum.CollisionType.Static)
            {
                // ËÆæÁΩÆÊâÄÊúâ4x4Ê†ºÂ≠êÈÉΩË¢´Âç†Áî®
                [0, 0] = true, [1, 0] = true, [2, 0] = true, [3, 0] = true,
                [0, 1] = true, [1, 1] = true, [2, 1] = true, [3, 1] = true,
                [0, 2] = true, [1, 2] = true, [2, 2] = true, [3, 2] = true,
                [0, 3] = true, [1, 3] = true, [2, 3] = true, [3, 3] = true
            },
        };

        // ============================================================
        // Â°îÈò≤Âà∑ÊÄ™Á≥ªÁªüÈÖçÁΩÆÊï∞ÊçÆ
        // ============================================================

        // ÂàõÂª∫Âà∑ÊÄ™Âô®ÈÖçÁΩÆ
        _ = new GameDataSpawnerBasic(Spawner.WolfSpawner)
        {
            Monster = Unit.TDMonster, // ‰ΩøÁî®Áé∞ÊúâÁöÑÂ°îÈò≤ÊÄ™Áâ©
            Times = 5,
            Number = 1,
            Pulse = 1.0f,
            Delay = 0.0f,
            LineEx = "Áé©ÂÆ∂1ÂâçËøõË∑ØÁ∫ø",
            Enabled = true
        };

        _ = new GameDataSpawnerBasic(Spawner.CrawlerSpawner)
        {
            Monster = Unit.TDMonster,
            Times = 2,
            Number = 1,
            Pulse = 1.0f,
            Delay = 5.0f,
            LineEx = "Áé©ÂÆ∂1ÂâçËøõË∑ØÁ∫ø",
            Enabled = true
        };

        _ = new GameDataSpawnerBasic(Spawner.VultureSpawner)
        {
            Monster = Unit.TDMonster,
            Times = 2,
            Number = 1,
            Pulse = 1.0f,
            Delay = 0.0f,
            LineEx = "Áé©ÂÆ∂1ÂâçËøõË∑ØÁ∫ø",
            Enabled = true
        };

        _ = new GameDataSpawnerBasic(Spawner.WaterElementalSpawner)
        {
            Monster = Unit.TDMonster,
            Times = 2, // ÂáèÂ∞ëÂà∞2‰∏™
            Number = 1,
            Pulse = 2.0f, // Â¢ûÂä†Èó¥ÈöîÂà∞2Áßí
            Delay = 0.0f,
            LineEx = "Áé©ÂÆ∂1ÂâçËøõË∑ØÁ∫ø",
            Enabled = true
        };

        _ = new GameDataSpawnerBasic(Spawner.BoarSpawner)
        {
            Monster = Unit.TDMonster,
            Times = 3, // ÂáèÂ∞ëÂà∞3‰∏™
            Number = 1,
            Pulse = 2.0f, // Â¢ûÂä†Èó¥ÈöîÂà∞2Áßí
            Delay = 5.0f,
            LineEx = "Áé©ÂÆ∂1ÂâçËøõË∑ØÁ∫ø",
            Enabled = true
        };

        // ÂàõÂª∫Ê≥¢Ê¨°ÈÖçÁΩÆ
        _ = new GameDataWaveBasic(Wave.Wave1)
        {
            WaveName = "Á¨¨‰∏ÄÊ≥¢",
            WaveDelay = 5.0f,
            WaveData = [
                Spawner.WolfSpawner,
                Spawner.CrawlerSpawner
            ],
            Enabled = true
        };

        _ = new GameDataWaveBasic(Wave.Wave2)
        {
            WaveName = "Á¨¨‰∫åÊ≥¢",
            WaveDelay = 15.0f,
            WaveData = [
                Spawner.VultureSpawner,
                Spawner.VultureSpawner
            ],
            Enabled = true
        };

        _ = new GameDataWaveBasic(Wave.Wave3)
        {
            WaveName = "Á¨¨‰∏âÊ≥¢",
            WaveDelay = 30.0f,
            WaveData = [
                Spawner.WaterElementalSpawner,
                Spawner.BoarSpawner
            ],
            Enabled = true
        };

        // ÂàõÂª∫ÂÖ≥Âç°ÈÖçÁΩÆ
        _ = new GameDataLevelBasic(Level.DefaultLevel)
        {
            LevelName = "ÈªòËÆ§Â°îÈò≤ÂÖ≥Âç°",
            Description = "Â°îÈò≤Ê∏∏ÊàèÁöÑÈªòËÆ§ÂÖ≥Âç°ÔºåÂåÖÂê´3‰∏™Ê≥¢Ê¨°ÁöÑÊÄ™Áâ©",
            DifficultyLevel = 1,
            InitialPlayerHealth = 20,
            InitialPlayerGold = 10,
            Waves = [
                Wave.Wave1,
                Wave.Wave2,
                Wave.Wave3
            ],
            Enabled = true
        };

        Game.Logger.LogInformation("‚úÖ Tower Defense spawn system data initialized successfully!");
    }
}
