<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TriggerEncapsulation</name>
    </assembly>
    <members>
        <member name="T:TriggerEncapsulation.BuffUtility">
            <summary>
            Buff 相关的便利功能
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.BuffUtility.InternalBuffAddEffectLink">
            <summary>
            内部使用的添加Buff效果数编Link
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.BuffUtility.#cctor">
            <summary>
            静态构造函数，初始化必要的数编对象
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.BuffUtility.AddBuff(GameCore.EntitySystem.Unit,GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff},GameCore.EntitySystem.Unit,System.Nullable{System.UInt32},System.Nullable{System.TimeSpan})">
            <summary>
            在指定单位上添加Buff，这个方法会自动创建一个虚拟的EffectBuffAdd效果以记录施法者。
            但若要在技能或者效果树中添加Buff，请尽可能使用<see cref="T:GameCore.Execution.Data.GameDataEffectBuffAdd"/>来添加，否则Buff会丢失完整的效果树信息。
            当前方法应当仅用于在没有效果树环境的情况下直接对单位添加Buff。
            </summary>
            <param name="target">目标单位</param>
            <param name="buffLink">要添加的Buff数编Link</param>
            <param name="caster">施法者，可选。如果为null，则使用目标单位自身作为施法者</param>
            <param name="stack">堆叠数量，可选</param>
            <param name="duration">持续时间，可选</param>
            <returns>创建的Buff实例，如果创建失败则返回null</returns>
        </member>
        <member name="T:TriggerEncapsulation.UnitBuffExtensions">
            <summary>
            Unit扩展方法，提供便利的Buff添加功能
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UnitBuffExtensions.AddBuff(GameCore.EntitySystem.Unit,GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff},GameCore.EntitySystem.Unit,System.Nullable{System.UInt32},System.Nullable{System.TimeSpan})">
            <summary>
            在当前单位上添加Buff，这个方法会自动创建一个虚拟的EffectBuffAdd效果以记录施法者。
            但若要在技能或者效果树中添加Buff，请尽可能使用<see cref="T:GameCore.Execution.Data.GameDataEffectBuffAdd"/>来添加，否则Buff会丢失完整的效果树信息。
            当前方法应当仅用于在没有效果树环境的情况下直接对单位添加Buff。
            </summary>
            <param name="target">目标单位</param>
            <param name="buffLink">要添加的Buff数编Link</param>
            <param name="caster">施法者，可选。如果为null，则使用目标单位自身作为施法者</param>
            <param name="stack">堆叠数量，可选</param>
            <param name="duration">持续时间，可选</param>
            <returns>创建的Buff实例，如果创建失败则返回null</returns>
        </member>
        <member name="T:TriggerEncapsulation.BuffManagerExtensions">
            <summary>
            BuffManager扩展方法，提供便利的Buff添加功能
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.BuffManagerExtensions.AddBuff(GameCore.BuffSystem.Manager.BuffManager,GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff},GameCore.EntitySystem.Unit,System.Nullable{System.UInt32},System.Nullable{System.TimeSpan})">
            <summary>
            在BuffManager管理的单位上添加Buff，这个方法会自动创建一个虚拟的EffectBuffAdd效果以记录施法者。
            但若要在技能或者效果树中添加Buff，请尽可能使用<see cref="T:GameCore.Execution.Data.GameDataEffectBuffAdd"/>来添加，否则Buff会丢失完整的效果树信息。
            当前方法应当仅用于在没有效果树环境的情况下直接对单位添加Buff。
            </summary>
            <param name="buffManager">目标单位的BuffManager</param>
            <param name="buffLink">要添加的Buff数编Link</param>
            <param name="caster">施法者，可选。如果为null，则使用目标单位自身作为施法者</param>
            <param name="stack">堆叠数量，可选</param>
            <param name="duration">持续时间，可选</param>
            <returns>创建的Buff实例，如果创建失败则返回null</returns>
        </member>
        <member name="M:TriggerEncapsulation.BuffManagerExtensions.AddBuffs(GameCore.BuffSystem.Manager.BuffManager,System.Collections.Generic.IEnumerable{GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff}},GameCore.EntitySystem.Unit)">
            <summary>
            批量添加多个Buff到BuffManager管理的单位上
            </summary>
            <param name="buffManager">目标单位的BuffManager</param>
            <param name="buffLinks">要添加的Buff数编Link数组</param>
            <param name="caster">施法者，可选。如果为null，则使用目标单位自身作为施法者</param>
            <returns>成功添加的Buff列表</returns>
        </member>
        <member name="M:TriggerEncapsulation.BuffManagerExtensions.AddOrRefreshBuff(GameCore.BuffSystem.Manager.BuffManager,GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff},GameCore.EntitySystem.Unit,System.Nullable{System.UInt32},System.Nullable{System.TimeSpan})">
            <summary>
            尝试添加Buff，如果目标单位已经有相同的Buff则刷新持续时间
            </summary>
            <param name="buffManager">目标单位的BuffManager</param>
            <param name="buffLink">要添加的Buff数编Link</param>
            <param name="caster">施法者，可选</param>
            <param name="stack">堆叠数量，可选</param>
            <param name="duration">持续时间，可选</param>
            <returns>添加或刷新的Buff实例</returns>
        </member>
        <member name="T:TriggerEncapsulation.Collection.DisposableObjectGroup`1">
            <summary>
            Represents a group of disposable objects that extends <see cref="T:GameCore.Collection.IterationSafeHashSet`1"/>.
            This class ensures that objects marked as disposed are automatically removed during iteration.
            </summary>
            <typeparam name="T">The type of elements in the group, which must inherit from <see cref="T:GameCore.BaseType.DisposableObject"/>.</typeparam>
        </member>
        <member name="T:TriggerEncapsulation.Commands.CommandBuilder">
            <summary>
            Command构建器，提供流式API来简化Command的创建和配置
            </summary>
            <remarks>
            这个构建器解决了Command系统中常见的问题：
            - 重复的构建代码
            - 容易出错的参数组合
            - Index和Type的不匹配
            - Flag和Player的错误设置
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.Create">
            <summary>
            创建新的Command构建器
            </summary>
            <returns>新的CommandBuilder实例</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithIndex(GameCore.OrderSystem.CommandIndex)">
            <summary>
            设置命令索引
            </summary>
            <param name="index">命令索引</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithType(GameCore.BaseType.ComponentTag)">
            <summary>
            设置组件类型
            </summary>
            <param name="type">组件类型</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithFlag(GameCore.OrderSystem.CommandFlag)">
            <summary>
            设置命令标志
            </summary>
            <param name="flag">命令标志</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithPlayer(GameCore.PlayerAndUsers.Player)">
            <summary>
            设置玩家
            </summary>
            <param name="player">玩家实例</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithTarget(GameCore.BaseInterface.ICommandTarget)">
            <summary>
            设置目标
            </summary>
            <param name="target">目标</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithAbility(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            设置技能链接
            </summary>
            <param name="abilityLink">技能链接</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithAbility(GameCore.AbilitySystem.Ability)">
            <summary>
            设置技能实例（服务端专用）
            </summary>
            <param name="ability">技能实例</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
            <remarks>
            此方法仅在服务端可用，允许直接使用Ability实例而不是AbilityLink。
            在执行时会自动使用AbilityManager.CreateOrder方法以获得更好的性能。
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithToggle(GameCore.AbilitySystem.Ability)">
            <summary>
            设置技能切换命令（智能切换）- 服务端专用
            </summary>
            <param name="ability">技能实例</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithTurnOn(GameCore.AbilitySystem.Ability)">
            <summary>
            设置技能开启命令 - 服务端专用
            </summary>
            <param name="ability">技能实例</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithTurnOff(GameCore.AbilitySystem.Ability)">
            <summary>
            设置技能关闭命令 - 服务端专用
            </summary>
            <param name="ability">技能实例</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithItem(GameCore.ItemSystem.Item)">
            <summary>
            设置物品
            </summary>
            <param name="item">物品实例</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithToggle(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            设置技能切换命令（智能切换）
            </summary>
            <param name="abilityLink">技能链接</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithTurnOn(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            设置技能开启命令
            </summary>
            <param name="abilityLink">技能链接</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithTurnOff(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            设置技能关闭命令
            </summary>
            <param name="abilityLink">技能链接</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithPickUp(GameCore.ItemSystem.IPickUpItem)">
            <summary>
            设置物品拾取命令
            </summary>
            <param name="item">要拾取的物品</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithDrop(GameCore.ItemSystem.ItemPickable)">
            <summary>
            设置物品丢弃命令
            </summary>
            <param name="item">要丢弃的物品</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.WithUse(GameCore.ItemSystem.Item)">
            <summary>
            设置物品使用命令
            </summary>
            <param name="item">要使用的物品</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.AsUser(GameCore.PlayerAndUsers.Player)">
            <summary>
            配置为用户命令（客户端玩家操作）
            </summary>
            <param name="player">玩家，如果为null则使用Player.LocalPlayer</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.AsAI(GameCore.PlayerAndUsers.Player)">
            <summary>
            配置为AI命令（服务端AI操作）
            </summary>
            <param name="player">AI控制的玩家</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.AsSystem">
            <summary>
            配置为系统命令（服务端系统操作，无权限限制）
            </summary>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.ToAngle(GameCore.BaseType.Angle)">
            <summary>
            设置角度目标
            </summary>
            <param name="angle">角度</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.ToAngle(System.Single)">
            <summary>
            设置角度目标（以度为单位）
            </summary>
            <param name="degrees">角度（度）</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.ToUnit(GameCore.EntitySystem.Unit)">
            <summary>
            设置单位目标
            </summary>
            <param name="unit">目标单位</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.ToPosition(GameCore.SceneSystem.ScenePoint)">
            <summary>
            设置位置目标
            </summary>
            <param name="position">目标位置</param>
            <returns>CommandBuilder实例，支持链式调用</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.Build">
            <summary>
            构建Command对象
            </summary>
            <returns>配置好的Command实例</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.Execute(GameCore.EntitySystem.Entity,System.Boolean)">
            <summary>
            构建并立即对指定单位执行命令
            </summary>
            <param name="unit">执行命令的单位</param>
            <param name="testOnly">是否仅测试而不实际执行</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.Execute``1(GameCore.EntitySystem.Entity,System.Boolean)">
            <summary>
            构建并立即对指定单位执行命令（泛型版本）
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="unit">执行命令的单位</param>
            <param name="testOnly">是否仅测试而不实际执行</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.ExecuteWithAbilityInstance(GameCore.EntitySystem.Entity,System.Boolean)">
            <summary>
            使用Ability实例执行命令的特殊逻辑（服务端专用）
            </summary>
            <param name="unit">执行命令的单位</param>
            <param name="testOnly">是否仅测试而不实际执行</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.Validate">
            <summary>
            验证当前配置的Command是否有效
            </summary>
            <returns>验证结果和错误信息</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandBuilder.op_Implicit(TriggerEncapsulation.Commands.CommandBuilder)~GameCore.OrderSystem.Command">
            <summary>
            隐式转换为Command
            </summary>
            <param name="builder">CommandBuilder实例</param>
        </member>
        <member name="T:TriggerEncapsulation.Commands.CommandContext">
            <summary>
            命令上下文，提供特定环境下的命令创建便利方法
            </summary>
            <remarks>
            CommandContext封装了特定场景下的Player和Flag设置，使得在特定上下文中
            创建命令时不需要重复设置这些参数。支持以下场景：
            - 用户操作上下文（客户端）
            - AI操作上下文（服务端）
            - 系统操作上下文（服务端）
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.ApplyContext(TriggerEncapsulation.Commands.CommandBuilder)">
            <summary>
            应用上下文设置到CommandBuilder
            </summary>
            <param name="builder">CommandBuilder实例</param>
            <returns>应用了上下文设置的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.CastAbility(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility},GameCore.BaseInterface.ICommandTarget)">
            <summary>
            在当前上下文中创建技能释放命令
            </summary>
            <param name="abilityLink">技能链接</param>
            <param name="target">技能目标</param>
            <returns>配置好的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.MoveInDirection(GameCore.BaseType.Angle)">
            <summary>
            在当前上下文中创建向量移动命令
            </summary>
            <param name="angle">移动角度</param>
            <returns>配置好的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.MoveInDirection(System.Single)">
            <summary>
            在当前上下文中创建向量移动命令（以度为单位）
            </summary>
            <param name="degrees">移动角度（度）</param>
            <returns>配置好的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.MoveTo(GameCore.SceneSystem.ScenePoint)">
            <summary>
            在当前上下文中创建位置移动命令
            </summary>
            <param name="position">目标位置</param>
            <returns>配置好的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.AttackTarget(GameCore.EntitySystem.Unit)">
            <summary>
            在当前上下文中创建攻击命令
            </summary>
            <param name="target">攻击目标</param>
            <returns>配置好的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.StopMovement">
            <summary>
            在当前上下文中创建停止移动命令
            </summary>
            <returns>配置好的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.Stop">
            <summary>
            在当前上下文中创建停止所有动作命令
            </summary>
            <returns>配置好的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.ForUser(GameCore.PlayerAndUsers.Player)">
            <summary>
            创建用户操作上下文（客户端）
            </summary>
            <param name="player">玩家，如果为null则使用Player.LocalPlayer</param>
            <returns>用户命令上下文</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.ForAI(GameCore.PlayerAndUsers.Player)">
            <summary>
            创建AI操作上下文（服务端）
            </summary>
            <param name="player">AI控制的玩家</param>
            <returns>AI命令上下文</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContext.ForSystem">
            <summary>
            创建系统操作上下文（服务端，无权限限制）
            </summary>
            <returns>系统命令上下文</returns>
        </member>
        <member name="T:TriggerEncapsulation.Commands.UserCommandContext">
            <summary>
            用户命令上下文（客户端玩家操作）
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Commands.AICommandContext">
            <summary>
            AI命令上下文（服务端AI操作）
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Commands.SystemCommandContext">
            <summary>
            系统命令上下文（服务端系统操作）
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Commands.CommandContextExtensions">
            <summary>
            命令上下文的便利扩展方法
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContextExtensions.AsUser(GameCore.EntitySystem.Entity,GameCore.PlayerAndUsers.Player)">
            <summary>
            为Entity创建用户命令上下文
            </summary>
            <param name="entity">实体（通常是Unit）</param>
            <param name="player">玩家，如果为null则使用entity的Owner</param>
            <returns>绑定到实体的用户命令上下文</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContextExtensions.AsAI(GameCore.EntitySystem.Entity,GameCore.PlayerAndUsers.Player)">
            <summary>
            为Entity创建AI命令上下文
            </summary>
            <param name="entity">实体（通常是Unit）</param>
            <param name="player">AI控制的玩家，如果为null则使用entity的Owner</param>
            <returns>绑定到实体的AI命令上下文</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandContextExtensions.AsSystem(GameCore.EntitySystem.Entity)">
            <summary>
            为Entity创建系统命令上下文
            </summary>
            <param name="entity">实体</param>
            <returns>绑定到实体的系统命令上下文</returns>
        </member>
        <member name="T:TriggerEncapsulation.Commands.BoundCommandContext">
            <summary>
            绑定到特定实体的命令上下文
            </summary>
            <remarks>
            这个类将CommandContext绑定到特定的Entity，使得可以直接调用Execute方法
            而不需要每次都指定目标实体
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.Commands.BoundCommandContext.CastAbility(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility},GameCore.BaseInterface.ICommandTarget)">
            <summary>
            在绑定实体上施放技能
            </summary>
            <param name="abilityLink">技能链接</param>
            <param name="target">技能目标</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.BoundCommandContext.MoveInDirection(GameCore.BaseType.Angle)">
            <summary>
            让绑定实体向指定角度移动
            </summary>
            <param name="angle">移动角度</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.BoundCommandContext.MoveInDirection(System.Single)">
            <summary>
            让绑定实体向指定角度移动（以度为单位）
            </summary>
            <param name="degrees">移动角度（度）</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.BoundCommandContext.MoveTo(GameCore.SceneSystem.ScenePoint)">
            <summary>
            让绑定实体移动到指定位置
            </summary>
            <param name="position">目标位置</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.BoundCommandContext.AttackTarget(GameCore.EntitySystem.Unit)">
            <summary>
            让绑定实体攻击目标
            </summary>
            <param name="target">攻击目标</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.BoundCommandContext.StopMovement">
            <summary>
            让绑定实体停止移动
            </summary>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.BoundCommandContext.Stop">
            <summary>
            让绑定实体停止所有动作
            </summary>
            <returns>命令执行结果</returns>
        </member>
        <member name="T:TriggerEncapsulation.Commands.CommandExtensions">
            <summary>
            Command系统的扩展方法，提供常见命令的快捷创建方式
            </summary>
            <remarks>
            这些扩展方法封装了最常用的命令模式，包括：
            - 技能释放
            - 单位移动
            - 攻击指令
            - 停止指令
            每个方法都会自动设置正确的Index、Type等参数组合
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.CastAbility(GameCore.EntitySystem.Entity,GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility},GameCore.BaseInterface.ICommandTarget,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达技能释放命令
            </summary>
            <param name="unit">执行技能的单位</param>
            <param name="abilityLink">技能链接</param>
            <param name="target">技能目标（可以是单位、位置、角度等）</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家（如果为null且asUser为true，则使用LocalPlayer）</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.CastAbility(GameCore.EntitySystem.Entity,GameCore.AbilitySystem.Ability,GameCore.BaseInterface.ICommandTarget,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达技能释放命令（服务端专用，使用技能实例）
            </summary>
            <param name="unit">执行技能的单位</param>
            <param name="ability">技能实例</param>
            <param name="target">技能目标（可以是单位、位置、角度等）</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家（如果为null且asUser为true，则使用LocalPlayer）</param>
            <returns>命令执行结果</returns>
            <remarks>
            此重载方法仅在服务端可用，直接使用Ability实例而不是AbilityLink，
            避免了Link查找过程，提供更好的性能。
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.ToggleAbility(GameCore.EntitySystem.Entity,GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility},System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达技能切换命令（智能切换）
            </summary>
            <param name="unit">执行切换的单位</param>
            <param name="abilityLink">技能链接</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.TurnOnAbility(GameCore.EntitySystem.Entity,GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility},System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达技能开启命令
            </summary>
            <param name="unit">执行开启的单位</param>
            <param name="abilityLink">技能链接</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.TurnOffAbility(GameCore.EntitySystem.Entity,GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility},System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达技能关闭命令
            </summary>
            <param name="unit">执行关闭的单位</param>
            <param name="abilityLink">技能链接</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.ToggleAbility(GameCore.EntitySystem.Entity,GameCore.AbilitySystem.Ability,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达技能切换命令（智能切换）- 服务端专用
            </summary>
            <param name="unit">执行切换的单位</param>
            <param name="ability">技能实例</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.TurnOnAbility(GameCore.EntitySystem.Entity,GameCore.AbilitySystem.Ability,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达技能开启命令 - 服务端专用
            </summary>
            <param name="unit">执行开启的单位</param>
            <param name="ability">技能实例</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.TurnOffAbility(GameCore.EntitySystem.Entity,GameCore.AbilitySystem.Ability,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达技能关闭命令 - 服务端专用
            </summary>
            <param name="unit">执行关闭的单位</param>
            <param name="ability">技能实例</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.MoveInDirection(GameCore.EntitySystem.Entity,GameCore.BaseType.Angle,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达向量移动命令
            </summary>
            <param name="unit">移动的单位</param>
            <param name="angle">移动角度</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.MoveInDirection(GameCore.EntitySystem.Entity,System.Single,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达向量移动命令（以度为单位）
            </summary>
            <param name="unit">移动的单位</param>
            <param name="degrees">移动角度（度）</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.MoveTo(GameCore.EntitySystem.Entity,GameCore.SceneSystem.ScenePoint,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达移动到指定位置的命令
            </summary>
            <param name="unit">移动的单位</param>
            <param name="position">目标位置</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.StopMovement(GameCore.EntitySystem.Entity,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达停止移动命令
            </summary>
            <param name="unit">停止的单位</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.AttackTarget(GameCore.EntitySystem.Entity,GameCore.EntitySystem.Unit,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达攻击目标命令
            </summary>
            <param name="unit">攻击的单位</param>
            <param name="target">攻击目标</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.Stop(GameCore.EntitySystem.Entity,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达停止所有动作的命令
            </summary>
            <param name="unit">停止的单位</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.PickUpItem(GameCore.EntitySystem.Entity,GameCore.ItemSystem.IPickUpItem,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达拾取物品命令
            </summary>
            <param name="unit">执行拾取的单位</param>
            <param name="item">要拾取的物品</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.DropItem(GameCore.EntitySystem.Entity,GameCore.ItemSystem.ItemPickable,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达丢弃物品命令
            </summary>
            <param name="unit">执行丢弃的单位</param>
            <param name="item">要丢弃的物品</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.UseItem(GameCore.EntitySystem.Entity,GameCore.ItemSystem.Item,System.Boolean,GameCore.PlayerAndUsers.Player)">
            <summary>
            对单位下达使用物品命令
            </summary>
            <param name="unit">执行使用的单位</param>
            <param name="item">要使用的物品</param>
            <param name="asUser">是否作为用户命令执行</param>
            <param name="player">命令的玩家</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.CastAbilityWithMainUnit(GameCore.PlayerAndUsers.Player,GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility},GameCore.BaseInterface.ICommandTarget,System.Boolean)">
            <summary>
            让玩家的主控单位施放技能
            </summary>
            <param name="player">玩家</param>
            <param name="abilityLink">技能链接</param>
            <param name="target">技能目标</param>
            <param name="asUser">是否作为用户命令执行</param>
            <returns>命令执行结果，如果玩家没有主控单位则返回错误</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.CastAbilityWithMainUnit(GameCore.PlayerAndUsers.Player,GameCore.AbilitySystem.Ability,GameCore.BaseInterface.ICommandTarget,System.Boolean)">
            <summary>
            让玩家的主控单位施放技能（服务端专用，使用技能实例）
            </summary>
            <param name="player">玩家</param>
            <param name="ability">技能实例</param>
            <param name="target">技能目标</param>
            <param name="asUser">是否作为用户命令执行</param>
            <returns>命令执行结果，如果玩家没有主控单位则返回错误</returns>
            <remarks>
            此重载方法仅在服务端可用，直接使用Ability实例而不是AbilityLink。
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.MoveMainUnitInDirection(GameCore.PlayerAndUsers.Player,GameCore.BaseType.Angle,System.Boolean)">
            <summary>
            让玩家的主控单位移动
            </summary>
            <param name="player">玩家</param>
            <param name="angle">移动角度</param>
            <param name="asUser">是否作为用户命令执行</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.MoveMainUnitTo(GameCore.PlayerAndUsers.Player,GameCore.SceneSystem.ScenePoint,System.Boolean)">
            <summary>
            让玩家的主控单位移动到指定位置
            </summary>
            <param name="player">玩家</param>
            <param name="position">目标位置</param>
            <param name="asUser">是否作为用户命令执行</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.StopMainUnit(GameCore.PlayerAndUsers.Player,System.Boolean)">
            <summary>
            让玩家的主控单位停止移动
            </summary>
            <param name="player">玩家</param>
            <param name="asUser">是否作为用户命令执行</param>
            <returns>命令执行结果</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.CastAbility(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            创建技能释放命令构建器的快捷方法
            </summary>
            <param name="abilityLink">技能链接</param>
            <returns>预配置的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.CastAbility(GameCore.AbilitySystem.Ability)">
            <summary>
            创建技能释放命令构建器的快捷方法（服务端专用，使用技能实例）
            </summary>
            <param name="ability">技能实例</param>
            <returns>预配置的CommandBuilder</returns>
            <remarks>
            此重载方法仅在服务端可用，直接使用Ability实例而不是AbilityLink。
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.MoveInDirection(GameCore.BaseType.Angle)">
            <summary>
            创建向量移动命令构建器的快捷方法
            </summary>
            <param name="angle">移动角度</param>
            <returns>预配置的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.MoveTo(GameCore.SceneSystem.ScenePoint)">
            <summary>
            创建位置移动命令构建器的快捷方法
            </summary>
            <param name="position">目标位置</param>
            <returns>预配置的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.AttackTarget(GameCore.EntitySystem.Unit)">
            <summary>
            创建攻击命令构建器的快捷方法
            </summary>
            <param name="target">攻击目标</param>
            <returns>预配置的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.StopMovement">
            <summary>
            创建停止移动命令构建器的快捷方法
            </summary>
            <returns>预配置的CommandBuilder</returns>
        </member>
        <member name="M:TriggerEncapsulation.Commands.CommandExtensions.Stop">
            <summary>
            创建停止所有动作命令构建器的快捷方法
            </summary>
            <returns>预配置的CommandBuilder</returns>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatMessageType">
            <summary>
            调试作弊系统消息类型
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.DebugCheatMessageType.ToggleInvincibility">
            <summary>
            切换玩家无敌状态请求
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.DebugCheatMessageType.CreateUnit">
            <summary>
            创建单位请求
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.DebugCheatMessageType.HealAll">
            <summary>
            治疗所有单位请求
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.DebugCheatMessageType.KillAllEnemies">
            <summary>
            杀死所有敌人请求
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.DebugCheatMessageType.TeleportToOrigin">
            <summary>
            传送玩家到原点请求
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.DebugCheatMessageType.GetOrderQueueInfo">
            <summary>
            请求单位指令队列信息
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatToggleInvincibilityMessage">
            <summary>
            切换无敌状态消息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatToggleInvincibilityMessageJsonContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatToggleInvincibilityMessageJsonContext.DebugCheatToggleInvincibilityMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatToggleInvincibilityMessageJsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatToggleInvincibilityMessageJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatToggleInvincibilityMessageJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatToggleInvincibilityMessageJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatToggleInvincibilityMessageJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatToggleInvincibilityMessageJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatCreateUnitMessage">
            <summary>
            创建单位消息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.Single">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.DebugCheatCreateUnitMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatCreateUnitMessageJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatSimpleMessage">
            <summary>
            简单作弊请求消息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatSimpleMessageJsonContext.DebugCheatMessageType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatSimpleMessageJsonContext.DebugCheatSimpleMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatSimpleMessageJsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatSimpleMessageJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatSimpleMessageJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSimpleMessageJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSimpleMessageJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSimpleMessageJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessage">
            <summary>
            请求单位指令队列信息消息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessage.UnitEntityId">
            <summary>
            单位的EntityId（十六进制字符串）
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessageJsonContext.DebugCheatGetOrderQueueInfoMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessageJsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessageJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessageJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessageJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessageJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatGetOrderQueueInfoMessageJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessage">
            <summary>
            开始跟踪单位指令队列消息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessage.UnitEntityId">
            <summary>
            单位的EntityId（十六进制字符串）
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessageJsonContext.DebugCheatStartOrderQueueTrackingMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessageJsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessageJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessageJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessageJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessageJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatStartOrderQueueTrackingMessageJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessage">
            <summary>
            停止跟踪单位指令队列消息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessage.UnitEntityId">
            <summary>
            单位的EntityId（十六进制字符串），空字符串表示停止所有跟踪
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessageJsonContext.DebugCheatStopOrderQueueTrackingMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessageJsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessageJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessageJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessageJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessageJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatStopOrderQueueTrackingMessageJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatOrderQueueInfoResponse">
            <summary>
            指令队列信息响应消息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponse.UnitEntityId">
            <summary>
            单位的EntityId
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponse.UnitInfo">
            <summary>
            单位基本信息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponse.Orders">
            <summary>
            指令队列信息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponse.ErrorMessage">
            <summary>
            错误信息（如果查询失败）
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.OrderQueueUnitInfo">
            <summary>
            单位基本信息
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.OrderInfo">
            <summary>
            指令详细信息
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.Index">
            <summary>
            指令在队列中的索引
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.IsCurrent">
            <summary>
            是否为当前执行的指令
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.AbilityName">
            <summary>
            技能/指令类型名称
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.CommandType">
            <summary>
            指令类型和索引
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.CommandIndex">
            <summary>
            指令索引
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.TargetDescription">
            <summary>
            目标描述
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.TargetPosition">
            <summary>
            目标位置（如果有的话）
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.Stage">
            <summary>
            指令阶段
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.State">
            <summary>
            指令状态
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.Flags">
            <summary>
            指令标志
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderInfo.IsUnInterruptible">
            <summary>
            是否不可打断
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.OrderTargetPosition">
            <summary>
            指令目标位置
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderTargetPosition.TargetType">
            <summary>
            目标类型（Unit, ScenePoint, Angle等）
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.OrderTargetPosition.AngleRadians">
            <summary>
            角度目标的角度值（弧度）
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.Single">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.NullableSingle">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.ListOrderInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.DebugCheatOrderQueueInfoResponse">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.OrderInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.OrderQueueUnitInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.OrderTargetPosition">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatOrderQueueInfoResponseJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatMessageHandler">
            <summary>
            调试作弊消息处理器
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatMessageSender">
            <summary>
            客户端消息发送器
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.EDebugCheatPropertyPlayer">
            <summary>
            扩展 PropertyPlayer 枚举，添加调试作弊相关的玩家属性
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.EDebugCheatPropertyPlayer.Invincible">
            <summary>
            玩家无敌状态 (bool) - 当为 true 时，玩家单位不会受到伤害
            此属性会在服务器和客户端之间自动同步，并在断线重连后恢复
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatSystem">
            <summary>
            调试作弊系统管理器
            仅在DEBUG模式和Game.IsDebugTestMode为真时工作
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.Initialize">
            <summary>
            初始化作弊系统
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.SetPlayerInvincible(System.Int32,System.Boolean)">
            <summary>
            设置玩家无敌状态
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.IsPlayerInvincible(System.Int32)">
            <summary>
            获取玩家无敌状态
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.CreateUnit(System.String,System.Int32,GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle)">
            <summary>
            在指定位置创建单位（客户端存根）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.GetUnitInfoAtMousePosition">
            <summary>
            获取鼠标位置下的单位信息（使用Raycast实现）
            </summary>
            <remarks>
            <para><strong>⚠️ 射线检测模式说明：</strong></para>
            <para>使用 <c>RayCastMode.AABB</c> 模式，因为有些游戏中单位没有设置 SimpleBoundingCylinder 数据。</para>
            <para>如果单位无法被检测到，请检查其模型是否有有效的包围盒数据。</para>
            </remarks>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.GetUnitAtMousePosition">
            <summary>
            获取鼠标位置下的单位对象（用于Overlay系统）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.GetUnitProperties(GameCore.EntitySystem.Unit)">
            <summary>
            获取单位的详细属性信息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.HealUnit(GameCore.EntitySystem.Unit)">
            <summary>
            治疗指定单位到满血（客户端存根）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.KillUnit(GameCore.EntitySystem.Unit)">
            <summary>
            杀死指定单位（客户端存根）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.TeleportUnit(GameCore.EntitySystem.Unit,GameCore.SceneSystem.ScenePoint)">
            <summary>
            传送单位到指定位置（客户端存根）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.GetAllPlayers">
            <summary>
            获取所有活跃的玩家列表
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.DebugCheatSystem.GetAllUnitsInScene(GameCore.SceneSystem.Scene)">
            <summary>
            获取指定场景中的所有单位
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.DebugCheatSystemInitializer">
            <summary>
            调试作弊系统初始化器
            实现IGameClass接口以在游戏启动时自动初始化作弊系统
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.ItemModPropertyExtensions">
            <summary>
            物品属性遍历扩展方法集合
            提供便利的方法来遍历物品上的各种属性加成
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.ItemModPropertyExtensions.RegularModificationInfo">
            <summary>
            普通属性修改信息
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="PropertyLink">属性链接</param>
            <param name="SubType">属性子类型</param>
            <param name="Value">修改值</param>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.RegularModificationInfo.#ctor(GameCore.Container.ItemSlotType,GameData.IGameLink{GameCore.Data.GameDataUnitProperty},GameCore.BaseType.PropertySubType,System.Double)">
            <summary>
            普通属性修改信息
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="PropertyLink">属性链接</param>
            <param name="SubType">属性子类型</param>
            <param name="Value">修改值</param>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.RegularModificationInfo.SlotType">
            <summary>槽位类型</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.RegularModificationInfo.PropertyLink">
            <summary>属性链接</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.RegularModificationInfo.SubType">
            <summary>属性子类型</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.RegularModificationInfo.Value">
            <summary>修改值</summary>
        </member>
        <member name="T:TriggerEncapsulation.ItemModPropertyExtensions.DynamicModificationInfo">
            <summary>
            动态属性修改信息
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="PropertyLink">属性链接</param>
            <param name="SubType">属性子类型</param>
            <param name="Value">修改值</param>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.DynamicModificationInfo.#ctor(GameCore.Container.ItemSlotType,GameData.IGameLink{GameCore.Data.GameDataUnitProperty},GameCore.BaseType.PropertySubType,System.Double)">
            <summary>
            动态属性修改信息
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="PropertyLink">属性链接</param>
            <param name="SubType">属性子类型</param>
            <param name="Value">修改值</param>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.DynamicModificationInfo.SlotType">
            <summary>槽位类型</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.DynamicModificationInfo.PropertyLink">
            <summary>属性链接</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.DynamicModificationInfo.SubType">
            <summary>属性子类型</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.DynamicModificationInfo.Value">
            <summary>修改值</summary>
        </member>
        <member name="T:TriggerEncapsulation.ItemModPropertyExtensions.UnifiedModificationInfo">
            <summary>
            统一的属性修改信息
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="PropertyLink">属性链接</param>
            <param name="SubType">属性子类型</param>
            <param name="Value">修改值</param>
            <param name="IsDynamic">是否为动态修改</param>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.UnifiedModificationInfo.#ctor(GameCore.Container.ItemSlotType,GameData.IGameLink{GameCore.Data.GameDataUnitProperty},GameCore.BaseType.PropertySubType,System.Double,System.Boolean)">
            <summary>
            统一的属性修改信息
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="PropertyLink">属性链接</param>
            <param name="SubType">属性子类型</param>
            <param name="Value">修改值</param>
            <param name="IsDynamic">是否为动态修改</param>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.UnifiedModificationInfo.SlotType">
            <summary>槽位类型</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.UnifiedModificationInfo.PropertyLink">
            <summary>属性链接</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.UnifiedModificationInfo.SubType">
            <summary>属性子类型</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.UnifiedModificationInfo.Value">
            <summary>修改值</summary>
        </member>
        <member name="P:TriggerEncapsulation.ItemModPropertyExtensions.UnifiedModificationInfo.IsDynamic">
            <summary>是否为动态修改</summary>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.EnumerateRegularModifications(GameCore.ItemSystem.Item,GameCore.Container.ItemSlotType)">
            <summary>
            遍历物品上指定槽位类型的所有普通属性修改
            </summary>
            <param name="itemMod">目标物品</param>
            <param name="slotType">槽位类型</param>
            <returns>指定槽位类型的所有普通属性修改</returns>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.EnumerateDynamicModifications(GameCore.ItemSystem.Item,GameCore.Container.ItemSlotType)">
            <summary>
            遍历物品上指定槽位类型的所有动态属性修改
            </summary>
            <param name="itemMod">目标物品</param>
            <param name="slotType">槽位类型</param>
            <returns>指定槽位类型的所有动态属性修改</returns>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.EnumerateAllModifications(GameCore.ItemSystem.Item,GameCore.Container.ItemSlotType)">
            <summary>
            遍历物品上指定槽位类型的所有属性修改（普通+动态）
            </summary>
            <param name="itemMod">目标物品</param>
            <param name="slotType">槽位类型</param>
            <returns>指定槽位类型的所有属性修改</returns>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.EnumerateAllModifications(GameCore.ItemSystem.Item)">
            <summary>
            遍历物品上所有槽位类型的所有属性修改（普通+动态）
            </summary>
            <param name="itemMod">目标物品</param>
            <returns>所有槽位类型的所有属性修改</returns>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.GetModificationValue(GameCore.ItemSystem.Item,GameCore.Container.ItemSlotType,GameData.IGameLink{GameCore.Data.GameDataUnitProperty},GameCore.BaseType.PropertySubType)">
            <summary>
            获取物品上指定槽位类型、属性、子类型的属性修改值（普通+动态）
            </summary>
            <param name="itemMod">目标物品</param>
            <param name="slotType">槽位类型</param>
            <param name="propertyLink">属性链接</param>
            <param name="subType">属性子类型</param>
            <returns>属性修改值，如果不存在则返回0</returns>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.HasModification(GameCore.ItemSystem.Item,GameCore.Container.ItemSlotType,GameData.IGameLink{GameCore.Data.GameDataUnitProperty},GameCore.BaseType.PropertySubType)">
            <summary>
            检查物品上是否存在指定槽位类型、属性、子类型的属性修改
            </summary>
            <param name="itemMod">目标物品</param>
            <param name="slotType">槽位类型</param>
            <param name="propertyLink">属性链接</param>
            <param name="subType">属性子类型</param>
            <returns>是否存在属性修改</returns>
        </member>
        <member name="M:TriggerEncapsulation.ItemModPropertyExtensions.GetModificationCount(GameCore.ItemSystem.Item,GameCore.Container.ItemSlotType)">
            <summary>
            获取物品上指定槽位类型的所有属性修改数量
            </summary>
            <param name="itemMod">目标物品</param>
            <param name="slotType">槽位类型</param>
            <returns>属性修改数量</returns>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ExtendableEnumJsonConverterFactory">
            <summary>
            可扩展枚举JSON转换器工厂
            为所有实现IExtendedEnum的类型提供自动序列化支持
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ExtendableEnumJsonConverter`1">
            <summary>
            泛型可扩展枚举JSON转换器
            处理具体类型的可扩展枚举序列化和反序列化
            </summary>
            <typeparam name="T">可扩展枚举类型</typeparam>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.MessageBuilder`1">
            <summary>
            流畅的消息构建器，提供链式API来创建和发送消息
            
            <para><strong>架构设计说明：</strong></para>
            <list type="bullet">
            <item><description><strong>客户端</strong>：简化设计，主要职责是向服务器发送消息</description></item>
            <item><description><strong>服务器端</strong>：完全功能，支持广播、队列、可靠传输等高级特性</description></item>
            </list>
            
            <para>这种设计反映了典型的C/S架构模式，其中：</para>
            <list type="bullet">
            <item><description>客户端：轻量级消息发送者</description></item>
            <item><description>服务器：重型消息处理中心</description></item>
            </list>
            </summary>
            <typeparam name="T">消息数据类型</typeparam>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.Create(`0)">
            <summary>
            创建消息构建器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.WithPriority(TriggerEncapsulation.Messaging.MessagePriority)">
            <summary>
            设置消息优先级
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.WithTimeout(System.TimeSpan)">
            <summary>
            设置消息超时时间
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.ToPlayersWhere(System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})">
            <summary>
            设置接收玩家过滤条件（仅服务器端）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.ToPlayers(GameCore.PlayerAndUsers.Player[])">
            <summary>
            发送给特定的玩家列表（仅服务器端）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.ToPlayer(GameCore.PlayerAndUsers.Player)">
            <summary>
            发送给特定玩家（仅服务器端）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.ToOnlinePlayers">
            <summary>
            发送给在线玩家（仅服务器端）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.Send">
            <summary>
            发送消息（服务器端功能）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.SendAsync">
            <summary>
            异步发送消息（服务器端功能）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder`1.Build">
            <summary>
            获取构建的消息（用于高级操作）
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.MessageBuilder">
            <summary>
            消息构建器静态工厂
            
            <para><strong>使用模式：</strong></para>
            <list type="bullet">
            <item><description><strong>客户端</strong>：主要使用 SendToServerAsync() 方法</description></item>
            <item><description><strong>服务器端</strong>：使用完整的广播和目标选择功能</description></item>
            </list>
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder.Create``1(``0)">
            <summary>
            创建消息构建器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageBuilder.BroadcastAsync``1(``0,System.Func{GameCore.PlayerAndUsers.Player,System.Boolean},TriggerEncapsulation.Messaging.MessagePriority)">
            <summary>
            快速广播消息（服务器端功能）
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ReliableMessageSender">
            <summary>
            可靠消息发送器，支持确认和重试
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.ReliableMessageSender.SendReliableAsync``1(``0,GameCore.PlayerAndUsers.Player,System.Nullable{System.TimeSpan})">
            <summary>
            可靠发送消息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.ReliableMessageSender.OnMessageAcknowledged(System.Guid)">
            <summary>
            处理消息确认
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ReliableMessage`1">
            <summary>
            可靠消息数据结构
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.MessageAcknowledgment">
            <summary>
            消息确认数据结构
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.IReliableMessage">
            <summary>
            可靠消息接口
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.PendingReliableMessage">
            <summary>
            待处理的可靠消息
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.MessageQueueManager">
            <summary>
            消息队列管理器，支持优先级和批处理
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.MessageQueueManager.EnqueueMessage(TriggerEncapsulation.Messaging.ITypedMessage)">
            <summary>
            将消息加入队列
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ProtoCustomMessage">
            <summary>
            表示自定义协议消息，用于在客户端和服务器之间传递任意格式的数据
            </summary>
            <remarks>
            <para>
            <see cref="T:TriggerEncapsulation.Messaging.ProtoCustomMessage"/> 是一个通用的消息传输容器，支持双向通信：
            </para>
            <list type="bullet">
            <item><description><strong>客户端到服务器</strong>：使用 <see cref="!:SendToServer"/> 方法发送消息</description></item>
            <item><description><strong>服务器到客户端</strong>：使用 <see cref="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.Broadcast(System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})"/> 或 <see cref="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.SendTo(GameCore.PlayerAndUsers.Player,System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})"/> 方法发送消息</description></item>
            </list>
            <para>
            <strong>消息处理流程：</strong>
            </para>
            <list type="number">
            <item><description>发送方创建 <see cref="T:TriggerEncapsulation.Messaging.ProtoCustomMessage"/> 实例并设置 <see cref="P:TriggerEncapsulation.Messaging.ProtoCustomMessage.Message"/> 属性</description></item>
            <item><description>调用相应的发送方法（<see cref="!:SendToServer"/>、<see cref="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.Broadcast(System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})"/> 或 <see cref="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.SendTo(GameCore.PlayerAndUsers.Player,System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})"/>）</description></item>
            <item><description>接收方的 <see cref="!:Handle()"/> 或 <see cref="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.Handle(GameCore.PlayerAndUsers.Player)"/> 方法被自动调用</description></item>
            <item><description>消息内容通过相应的事件（<see cref="T:TriggerEncapsulation.Event.EventServerMessage"/> 或 <see cref="T:TriggerEncapsulation.Event.EventClientMessage"/>）分发给监听器</description></item>
            </list>
            <para>
            <strong>使用示例：</strong>
            </para>
            <code>
            // 服务器端广播消息
            var message = new ProtoCustomMessage { Message = Encoding.UTF8.GetBytes("Hello World") };
            message.Broadcast();
            
            // 客户端发送消息到服务器
            var clientMessage = new ProtoCustomMessage { Message = jsonBytes };
            clientMessage.SendToServer();
            </code>
            <para>
            <strong>注意事项：</strong>
            </para>
            <list type="bullet">
            <item><description>消息内容需要自行进行序列化和反序列化</description></item>
            <item><description>建议使用 JSON、MessagePack 或其他标准化格式进行数据编码</description></item>
            <item><description>消息大小应该合理控制，避免网络传输压力</description></item>
            <item><description>服务器端的广播操作会发送给所有在线玩家，注意性能影响</description></item>
            </list>
            </remarks>
            <seealso cref="T:GameCore.ProtocolServerTransient.IProtocolServerTransient"/>
            <seealso cref="T:GameCore.ProtocolClientTransient.IProtocolClientTransient"/>
            <seealso cref="T:TriggerEncapsulation.Event.EventServerMessage"/>
            <seealso cref="T:TriggerEncapsulation.Event.EventClientMessage"/>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.ProtoCustomMessage.TypeHash">
            <summary>
            获取协议消息的类型哈希值，用于消息路由和识别
            </summary>
            <remarks>
            此哈希值由 <see cref="T:TriggerEncapsulation.Messaging.ProtoCustomMessage"/> 类型自动生成，
            用于在网络传输层标识和路由消息到正确的处理器。
            框架会使用此值来确保消息能够正确地被对应的处理方法接收。
            </remarks>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.ProtoCustomMessage.Message">
            <summary>
            获取或设置消息的字节数据内容
            </summary>
            <value>
            包含实际消息数据的字节数组。可以是任意格式的数据，
            如 JSON 字符串的 UTF-8 编码、序列化的二进制数据等。
            </value>
            <remarks>
            <para>
            消息内容的格式和编码完全由应用程序决定。常见的做法包括：
            </para>
            <list type="bullet">
            <item><description><strong>JSON</strong>：易于调试和跨平台兼容</description></item>
            <item><description><strong>MessagePack</strong>：高效的二进制格式</description></item>
            <item><description><strong>Protocol Buffers</strong>：Google 的序列化格式</description></item>
            <item><description><strong>自定义二进制格式</strong>：最大化性能优化</description></item>
            </list>
            <para>
            建议在消息前添加类型标识符，以便接收方能够正确解析不同类型的消息。
            </para>
            </remarks>
            <example>
            <code>
            // 使用 JSON 格式
            var data = new { Type = "PlayerUpdate", PlayerId = 123, Health = 100 };
            var json = JsonSerializer.Serialize(data);
            var message = new ProtoCustomMessage { Message = Encoding.UTF8.GetBytes(json) };
            
            // 使用自定义二进制格式
            var buffer = new byte[8];
            BitConverter.GetBytes(messageType).CopyTo(buffer, 0);
            BitConverter.GetBytes(playerId).CopyTo(buffer, 4);
            var message = new ProtoCustomMessage { Message = buffer };
            </code>
            </example>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.Handle(GameCore.PlayerAndUsers.Player)">
            <summary>
            处理从客户端接收到的自定义消息
            </summary>
            <param name="player">
            发送此消息的玩家对象。可用于：
            <list type="bullet">
            <item><description>验证玩家权限</description></item>
            <item><description>获取玩家状态信息</description></item>
            <item><description>向特定玩家发送回复消息</description></item>
            <item><description>记录玩家操作日志</description></item>
            </list>
            </param>
            <remarks>
            <para>
            此方法在服务器端自动被调用，当从客户端接收到 <see cref="T:TriggerEncapsulation.Messaging.ProtoCustomMessage"/> 时执行。
            该方法会触发 <see cref="T:TriggerEncapsulation.Event.EventClientMessage"/> 事件，将消息内容和发送者信息传递给注册的监听器。
            </para>
            <para>
            <strong>事件处理流程：</strong>
            </para>
            <list type="number">
            <item><description>网络层接收到来自客户端的消息</description></item>
            <item><description>框架识别消息类型并调用此 <see cref="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.Handle(GameCore.PlayerAndUsers.Player)"/> 方法</description></item>
            <item><description>方法获取 <see cref="T:TriggerEncapsulation.Event.EventClientMessage"/> 事件发布器</description></item>
            <item><description>触发事件，传递发送者（<paramref name="player"/>）和消息内容</description></item>
            </list>
            <para>
            服务器应用程序应该注册 <see cref="T:TriggerEncapsulation.Event.EventClientMessage"/> 事件的监听器来处理客户端消息。
            通过事件参数可以获取发送消息的玩家信息，实现基于玩家的消息处理逻辑。
            </para>
            </remarks>
            <example>
            <code>
            // 注册客户端消息监听器
            var trigger = new Trigger&amp;lt;EventClientMessage&amp;gt;(OnClientMessageReceived);
            trigger.Register(Game.Instance);
            
            private static async Task&amp;lt;bool&amp;gt; OnClientMessageReceived(object sender, EventClientMessage eventArgs)
            {
                var player = eventArgs.Player;
                var messageBytes = eventArgs.Message;
                
                // 验证玩家权限
                if (!player.IsOnline)
                {
                    return false;
                }
                
                // 解析消息内容
                var json = Encoding.UTF8.GetString(messageBytes);
                var playerAction = JsonSerializer.Deserialize&amp;lt;PlayerAction&amp;gt;(json);
                
                // 处理玩家操作...
                Game.Logger.LogInformation("Player {playerId} performed action: {action}", 
                                          player.Id, playerAction.Action);
                return true;
            }
            </code>
            </example>
            <seealso cref="T:TriggerEncapsulation.Event.EventClientMessage"/>
            <seealso cref="!:SendToServer"/>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.Broadcast(System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})">
            <summary>
            向所有符合条件的玩家广播自定义协议消息
            </summary>
            <param name="filter">
            可选的玩家过滤条件。如果提供，只有通过过滤器的玩家才会接收到消息。
            如果为 <c>null</c>，则向所有在线玩家广播。
            </param>
            <remarks>
            <para>
            此方法用于向多个玩家同时发送消息，常用于游戏状态更新、全局通知等场景。
            消息会被发送到所有在线玩家，可以通过过滤器函数来限制接收范围。
            </para>
            <para>
            <strong>性能注意事项：</strong>
            </para>
            <list type="bullet">
            <item><description>广播操作会遍历所有在线玩家，玩家数量较多时可能影响性能</description></item>
            <item><description>建议控制广播频率，避免过于频繁的全局消息发送</description></item>
            <item><description>对于大量数据的广播，考虑使用分批发送或优化消息内容</description></item>
            </list>
            <para>
            <strong>过滤器使用：</strong>
            </para>
            <list type="bullet">
            <item><description>过滤器函数接收 <see cref="T:GameCore.PlayerAndUsers.Player"/> 参数，返回 <c>true</c> 表示该玩家应接收消息</description></item>
            <item><description>可以基于玩家等级、位置、队伍等条件进行过滤</description></item>
            <item><description>过滤器在每个玩家的发送过程中都会被调用</description></item>
            </list>
            </remarks>
            <example>
            <code>
            // 向所有玩家广播游戏状态更新
            var gameState = new { Wave = 5, TimeRemaining = 120 };
            var message = new ProtoCustomMessage 
            { 
                Message = Encoding.UTF8.GetBytes(JsonSerializer.Serialize(gameState)) 
            };
            message.Broadcast();
            
            // 只向高等级玩家广播特殊事件
            message.Broadcast(player =&gt; player.Level &gt;= 10);
            
            // 向指定区域的玩家广播
            message.Broadcast(player =&gt; Vector3.Distance(player.Position, eventPosition) &lt; 100f);
            </code>
            </example>
            <seealso cref="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.SendTo(GameCore.PlayerAndUsers.Player,System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})"/>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.SendTo(GameCore.PlayerAndUsers.Player,System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})">
            <summary>
            向指定玩家发送自定义协议消息
            </summary>
            <param name="player">目标玩家实例</param>
            <param name="filter">
            可选的额外过滤条件。即使指定了目标玩家，仍需要通过此过滤器才能发送消息。
            如果为 <c>null</c>，则直接发送给目标玩家。
            </param>
            <returns>
            如果消息成功发送则返回 <c>true</c>；否则返回 <c>false</c>
            </returns>
            <remarks>
            <para>
            此方法用于向特定玩家发送消息，常用于个人通知、私聊消息、个性化数据更新等场景。
            消息通过玩家的槽控制器（<see cref="P:GameCore.PlayerAndUsers.Player.SlotController"/>）发送，确保消息能够正确路由到目标客户端。
            </para>
            <para>
            <strong>发送流程：</strong>
            </para>
            <list type="number">
            <item><description>检查目标玩家是否有效和在线</description></item>
            <item><description>如果提供了过滤器，验证玩家是否通过过滤条件</description></item>
            <item><description>通过玩家的槽控制器发送消息</description></item>
            <item><description>返回发送结果</description></item>
            </list>
            <para>
            <strong>返回值说明：</strong>
            </para>
            <list type="bullet">
            <item><description><c>true</c>：消息已成功提交到该玩家的发送队列</description></item>
            <item><description><c>false</c>：发送失败，可能原因包括玩家离线、网络问题或过滤器拒绝</description></item>
            </list>
            <para>
            <strong>额外过滤器的用途：</strong>
            </para>
            <list type="bullet">
            <item><description>动态权限检查：验证玩家是否有权接收特定类型的消息</description></item>
            <item><description>状态验证：确保玩家处于合适的游戏状态</description></item>
            <item><description>防重复发送：避免向已处理过的玩家重复发送</description></item>
            </list>
            </remarks>
            <example>
            <code>
            // 向特定玩家发送个人通知
            var notification = new { Type = "LevelUp", NewLevel = 15, Rewards = new[] { "Sword", "Shield" } };
            var message = new ProtoCustomMessage 
            { 
                Message = Encoding.UTF8.GetBytes(JsonSerializer.Serialize(notification)) 
            };
            
            if (message.SendTo(targetPlayer))
            {
                Game.Logger.LogInformation("Notification sent to player {playerId}", targetPlayer.Id);
            }
            
            // 带条件检查的发送
            bool success = message.SendTo(targetPlayer, p =&gt; p.IsOnline &amp;&amp; p.Level &gt;= 5);
            if (!success)
            {
                Game.Logger.LogWarning("Failed to send message to player {playerId}", targetPlayer.Id);
            }
            </code>
            </example>
            <seealso cref="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.Broadcast(System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})"/>
            <seealso cref="P:GameCore.PlayerAndUsers.Player.SlotController"/>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.ProtoCustomMessage.GameCore#BaseInterface#IGameClass#OnRegisterGameClass">
            <summary>
            注册游戏类时的回调方法
            </summary>
            <remarks>
            在客户端注册消息处理器，建立类型哈希到处理方法的映射。
            </remarks>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.MessagePriority">
            <summary>
            消息优先级枚举
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ITypedMessage">
            <summary>
            强类型消息接口
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.TypedMessage`1">
            <summary>
            强类型消息基类，提供自动序列化和类型安全的消息传递
            </summary>
            <typeparam name="T">消息数据类型</typeparam>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.TypedMessage`1.Data">
            <summary>
            消息数据
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.TypedMessage`1.Priority">
            <summary>
            消息优先级
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.TypedMessage`1.Timeout">
            <summary>
            消息超时时间（可选）
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.TypedMessage`1.Timestamp">
            <summary>
            消息时间戳
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.TypedMessage`1.MessageType">
            <summary>
            消息类型名称
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.TypedMessage`1.MessageId">
            <summary>
            消息ID（用于追踪和去重）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessage`1.#ctor(`0)">
            <summary>
            创建强类型消息
            </summary>
            <param name="data">消息数据</param>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessage`1.#ctor">
            <summary>
            创建空的强类型消息（需要手动设置Data）
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessage`1.Serialize">
            <summary>
            序列化消息为字节数组
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessage`1.Deserialize(System.Byte[])">
            <summary>
            从字节数组反序列化消息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessage`1.SendTo(GameCore.PlayerAndUsers.Player)">
            <summary>
            向指定玩家发送消息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessage`1.SendToAsync(GameCore.PlayerAndUsers.Player)">
            <summary>
            异步向指定玩家发送消息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessage`1.Broadcast(System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})">
            <summary>
            广播消息给所有玩家
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessage`1.BroadcastAsync(System.Func{GameCore.PlayerAndUsers.Player,System.Boolean})">
            <summary>
            异步广播消息
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.TypedMessageEnvelope">
            <summary>
            消息信封，用于包装序列化数据
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.MessageSerializerOptions">
            <summary>
            消息序列化选项
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.TimeSpanJsonConverter">
            <summary>
            TimeSpan 的自定义 JSON 转换器
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.NullableTimeSpanJsonConverter">
            <summary>
            TimeSpan? 的自定义 JSON 转换器
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.DateTimeJsonConverter">
            <summary>
            DateTime 的自定义 JSON 转换器
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.EntityJsonConverter">
            <summary>
            Entity 的自定义 JSON 转换器，将 Entity/Unit 对象序列化为 ProtoEntity 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.IActorScopeJsonConverter">
            <summary>
            IActorScope 的自定义 JSON 转换器，将 IActorScope 对象序列化为 ProtoActorScope 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.AbilityJsonConverter">
            <summary>
            Ability 的自定义 JSON 转换器，将 Ability 对象序列化为 ProtoAbility 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.IAttachedObjectJsonConverter">
            <summary>
            IAttachedObject 的自定义 JSON 转换器，将 IAttachedObject 对象序列化为 ProtoIAttachedObject 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ICooldownHostJsonConverter">
            <summary>
            ICooldownHost 的自定义 JSON 转换器，将 ICooldownHost 对象序列化为 ProtoICooldownHost 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.IExtendedEnumJsonConverter">
            <summary>
            IExtendedEnum 的自定义 JSON 转换器，将 IExtendedEnum 对象序列化为 ProtoIExtendedEnum 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.IGameLinkJsonConverter">
            <summary>
            IGameLink 的自定义 JSON 转换器，将 IGameLink 对象序列化为 ProtoIGameLink 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.InventoryJsonConverter">
            <summary>
            Inventory 的自定义 JSON 转换器，将 Inventory 对象序列化为 ProtoInventory 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.InventorySlotJsonConverter">
            <summary>
            InventorySlot 的自定义 JSON 转换器，将 InventorySlot 对象序列化为 ProtoInventorySlot 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ItemJsonConverter">
            <summary>
            Item 的自定义 JSON 转换器，将 Item 对象序列化为 ProtoItem 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.PlayerJsonConverter">
            <summary>
            Player 的自定义 JSON 转换器，将 Player 对象序列化为 ProtoPlayer 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.SceneJsonConverter">
            <summary>
            Scene 的自定义 JSON 转换器，将 Scene 对象序列化为 ProtoScene 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.ScenePointJsonConverter">
            <summary>
            ScenePoint 的自定义 JSON 转换器，将 ScenePoint 对象序列化为 ProtoScenePoint 结构体
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.TypedMessageMetrics">
            <summary>
            消息指标收集器
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.MessageStats">
            <summary>
            消息统计信息
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.MessageHandlerAttribute">
            <summary>
            消息处理器特性，用于自动注册消息处理方法
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.MessageHandlerAttribute.Priority">
            <summary>
            消息处理优先级
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.MessageHandlerAttribute.IsAsync">
            <summary>
            是否异步处理
            </summary>
        </member>
        <member name="P:TriggerEncapsulation.Messaging.MessageHandlerAttribute.Name">
            <summary>
            处理器名称（可选，用于调试）
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.TypedMessageHandlerDelegate`1">
            <summary>
            消息处理委托
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.UntypedMessageHandlerDelegate">
            <summary>
            无类型的消息处理委托
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.TypedMessageHandler">
            <summary>
            强类型消息处理器管理器
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.Messaging.TypedMessageHandler.MessageHandlerInfo">
            <summary>
            消息处理器信息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.Initialize">
            <summary>
            初始化消息处理器系统
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.Register``1(TriggerEncapsulation.Messaging.TypedMessageHandlerDelegate{``0},TriggerEncapsulation.Messaging.MessagePriority,System.String)">
            <summary>
            手动注册消息处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.AutoRegisterHandlers">
            <summary>
            自动扫描程序集中的消息处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.RegisterMethodAsHandler(System.Reflection.MethodInfo)">
            <summary>
            将方法注册为消息处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.RegisterProtoMessageHandlers">
            <summary>
            注册ProtoCustomMessage的处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.OnClientMessageReceived(System.Object,TriggerEncapsulation.Event.EventClientMessage)">
            <summary>
            处理来自客户端的消息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.ProcessTypedMessage(GameCore.PlayerAndUsers.Player,System.Byte[])">
            <summary>
            处理强类型消息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.InvokeHandlers(GameCore.PlayerAndUsers.Player,System.Object,System.Type,TriggerEncapsulation.Messaging.TypedMessageEnvelope)">
            <summary>
            调用消息处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.GetMessageType(System.String)">
            <summary>
            根据类型名称获取消息类型
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.GetHandlerStats">
            <summary>
            获取处理器统计信息
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.RemoveHandlers``1">
            <summary>
            移除指定类型的所有处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.Messaging.TypedMessageHandler.ClearAllHandlers">
            <summary>
            清除所有处理器
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.UIProperty.PlayerUIPropertyExtensions">
            <summary>
            Player类的UI属性扩展方法
            提供客户端设置UI属性的功能
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.UIProperty.UIPropertySetRequest">
            <summary>
            UI属性设置请求消息
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.UIProperty.UIPropertyBatchSetRequest">
            <summary>
            UI属性批量设置请求消息
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.UIProperty.UIPropertyMessageHandler">
            <summary>
            UI属性消息处理器
            负责处理来自客户端的UI属性设置请求
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyMessageHandler.Initialize">
            <summary>
            初始化UI属性消息处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyMessageHandler.HandleUIPropertySetRequest(GameCore.PlayerAndUsers.Player,TriggerEncapsulation.UIProperty.UIPropertySetRequest)">
            <summary>
            处理单个UI属性设置请求
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyMessageHandler.HandleUIPropertyBatchSetRequest(GameCore.PlayerAndUsers.Player,TriggerEncapsulation.UIProperty.UIPropertyBatchSetRequest)">
            <summary>
            处理批量UI属性设置请求
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyMessageHandler.TryParseUIProperty(System.String,GameCore.PlayerAndUsers.PropertyPlayerUI@)">
            <summary>
            尝试解析UI属性字符串为PropertyPlayerUI
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyMessageHandler.HandleTypedValue``1(GameCore.PlayerAndUsers.Player,GameCore.PlayerAndUsers.PropertyPlayerUI,TriggerEncapsulation.UIProperty.UIPropertySetRequest)">
            <summary>
            处理特定类型的UI属性值
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyMessageHandler.DeserializePropertyValue(System.String,System.String)">
            <summary>
            根据类型名称反序列化属性值
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.UIProperty.UIPropertyUsageExample">
            <summary>
            UI属性系统使用示例
            展示如何在TriggerEncapsulation库中使用UI属性扩展功能
            </summary>
        </member>
        <member name="F:TriggerEncapsulation.UIProperty.UIPropertyUsageExample.uiPropertyChangeTrigger">
            <summary>
            UI属性变更事件触发器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyUsageExample.Initialize">
            <summary>
            初始化示例 - 注册必要的处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyUsageExample.ServerUsageExample">
            <summary>
            服务端使用示例
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyUsageExample.SetDefaultUIPropertiesForPlayer(GameCore.PlayerAndUsers.Player)">
            <summary>
            为新玩家设置默认UI属性
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyUsageExample.RegisterUIPropertyEventHandlers">
            <summary>
            注册UI属性事件处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyUsageExample.OnUIPropertyChanged(System.Object,GameCore.Event.EventPlayerUIPropertyChange)">
            <summary>
            UI属性变更事件处理器
            </summary>
        </member>
        <member name="M:TriggerEncapsulation.UIProperty.UIPropertyUsageExample.BadUsageExamples">
            <summary>
            错误使用示例 - 展示应该避免的做法
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.UnitPropertyExtensions">
            <summary>
            单位属性遍历扩展方法集合
            提供便利的方法来遍历单位身上的各种属性
            </summary>
        </member>
        <member name="T:TriggerEncapsulation.UnitPropertyExtensions.VitalInfo">
            <summary>
            活力值属性信息
            </summary>
            <param name="VitalType">活力值类型</param>
            <param name="Current">当前值</param>
            <param name="Max">最大值</param>
            <param name="Regen">恢复速率</param>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.VitalInfo.#ctor(GameCore.BaseType.PropertyVital,System.Double,System.Double,GameCore.BaseType.GameRate)">
            <summary>
            活力值属性信息
            </summary>
            <param name="VitalType">活力值类型</param>
            <param name="Current">当前值</param>
            <param name="Max">最大值</param>
            <param name="Regen">恢复速率</param>
        </member>
        <member name="P:TriggerEncapsulation.UnitPropertyExtensions.VitalInfo.VitalType">
            <summary>活力值类型</summary>
        </member>
        <member name="P:TriggerEncapsulation.UnitPropertyExtensions.VitalInfo.Current">
            <summary>当前值</summary>
        </member>
        <member name="P:TriggerEncapsulation.UnitPropertyExtensions.VitalInfo.Max">
            <summary>最大值</summary>
        </member>
        <member name="P:TriggerEncapsulation.UnitPropertyExtensions.VitalInfo.Regen">
            <summary>恢复速率</summary>
        </member>
        <member name="T:TriggerEncapsulation.UnitPropertyExtensions.UnitPropertyInfo">
            <summary>
            单位属性信息
            </summary>
            <param name="PropertyType">属性类型</param>
            <param name="ValueGetter">值获取器，支持泛型类型转换</param>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.UnitPropertyInfo.GetValue``1">
            <summary>
            获取属性值并尝试转换为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>转换后的属性值，如果转换失败则返回default(T)</returns>
        </member>
        <member name="T:TriggerEncapsulation.UnitPropertyExtensions.UnitPropertyComplexInfo">
            <summary>
            数值公式属性信息
            </summary>
            <param name="PropertyLink">属性链接</param>
            <param name="FinalValue">最终计算值</param>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.UnitPropertyComplexInfo.#ctor(GameData.IGameLink{GameCore.Data.GameDataUnitProperty},System.Double)">
            <summary>
            数值公式属性信息
            </summary>
            <param name="PropertyLink">属性链接</param>
            <param name="FinalValue">最终计算值</param>
        </member>
        <member name="P:TriggerEncapsulation.UnitPropertyExtensions.UnitPropertyComplexInfo.PropertyLink">
            <summary>属性链接</summary>
        </member>
        <member name="P:TriggerEncapsulation.UnitPropertyExtensions.UnitPropertyComplexInfo.FinalValue">
            <summary>最终计算值</summary>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.GetAllPropertyVitalExtensions">
            <summary>
            获取所有扩展了PropertyVital的可扩展枚举列表
            </summary>
            <returns>所有PropertyVital扩展枚举的列表</returns>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.GetAllPropertyUnitExtensions">
            <summary>
            获取所有扩展了PropertyUnit的可扩展枚举列表
            </summary>
            <returns>所有PropertyUnit扩展枚举的列表</returns>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.EnumerateVitals(GameCore.EntitySystem.Unit)">
            <summary>
            遍历单位身上所有的活力值(Vital)
            </summary>
            <param name="unit">目标单位</param>
            <returns>单位身上所有活力值的信息</returns>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.EnumeratePropertyUnits(GameCore.EntitySystem.Unit)">
            <summary>
            遍历单位身上所有的PropertyUnit属性
            </summary>
            <param name="unit">目标单位</param>
            <returns>单位身上所有PropertyUnit属性的信息，包含泛型Getter</returns>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.EnumerateUnitPropertyComplexValues(GameCore.EntitySystem.Unit)">
            <summary>
            遍历单位身上所有数值公式属性(UnitPropertyComplex)的最终值
            </summary>
            <param name="unit">目标单位</param>
            <returns>单位身上所有数值公式属性的最终值信息</returns>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.GetVital(GameCore.EntitySystem.Unit,GameCore.BaseType.PropertyVital)">
            <summary>
            获取单位身上指定类型的活力值
            </summary>
            <param name="unit">目标单位</param>
            <param name="vitalType">活力值类型</param>
            <returns>活力值信息，如果不存在则返回null</returns>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.GetPropertyUnitValue``1(GameCore.EntitySystem.Unit,GameCore.EntitySystem.PropertyUnit)">
            <summary>
            获取单位身上指定类型的属性值
            </summary>
            <typeparam name="T">属性值的类型</typeparam>
            <param name="unit">目标单位</param>
            <param name="propertyType">属性类型</param>
            <returns>属性值，如果不存在或类型不匹配则返回default(T)</returns>
        </member>
        <member name="M:TriggerEncapsulation.UnitPropertyExtensions.GetUnitPropertyComplexValue(GameCore.EntitySystem.Unit,GameData.IGameLink{GameCore.Data.GameDataUnitProperty})">
            <summary>
            获取单位身上指定数值公式属性的最终值
            </summary>
            <param name="unit">目标单位</param>
            <param name="propertyLink">属性链接</param>
            <returns>最终值，如果不存在则返回0</returns>
        </member>
        <member name="F:TriggerEncapsulation.DebugCheatPropertyPlayer.Invincible">
            <summary>
            玩家无敌状态 (bool) - 当为 true 时，玩家单位不会受到伤害
            此属性会在服务器和客户端之间自动同步，并在断线重连后恢复
            </summary>
        </member>
    </members>
</doc>
