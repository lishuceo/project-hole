<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameCore</name>
    </assembly>
    <members>
        <member name="T:GameCore.AbilitySystem.Ability">
            <summary>
            Represents an ability (skill/spell) object in the game, attached to units and responsible for managing ability lifecycle, state, and cooldowns.
            </summary>
            <remarks>
            Abilities are the core system for unit capabilities in the game, including spells, skills, attacks, and special powers.
            Each ability manages its own state, cooldowns, resource costs, and execution logic. Abilities can be granted by the unit's
            base configuration or by items, and they support various modes including active, toggle, and passive behaviors.
            The ability system integrates with other game systems like targeting, effects, and animations to provide
            comprehensive gameplay mechanics. Abilities can persist through unit transformations based on their configuration.
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.Stage">
            <summary>
            Only used for client-side ability animation replication.
            </summary>
        </member>
        <member name="M:GameCore.AbilitySystem.Ability.SetDeactivatedFromReplication(System.Boolean)">
            <summary>
            Sets the deactivated state from server replication.
            </summary>
        </member>
        <member name="M:GameCore.AbilitySystem.Ability.SetDisabledFromReplication(System.Boolean)">
            <summary>
            Sets the disabled state from server replication.
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.Manager">
            <summary>
            Gets the ability manager that owns this ability.
            </summary>
            <value>The manager responsible for this ability's lifecycle and state.</value>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.LevelMax">
            <summary>
            Gets the maximum level this ability can reach.
            </summary>
            <value>The maximum level allowed for this ability, or null if there is no level limit.</value>
            <remarks>
            The maximum level determines how many times an ability can be upgraded or improved.
            Some abilities may not have level restrictions and can be upgraded indefinitely.
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.IsGrantedByItem">
            <summary>
            Gets a value indicating whether this ability is granted by an item.
            </summary>
            <value>True if the ability comes from an equipped or possessed item; otherwise, false.</value>
            <remarks>
            Item-granted abilities typically have special behaviors such as persisting through
            unit transformations and being removed when the item is unequipped or destroyed.
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.IsPersistDuringMorph">
            <summary>
            Gets a value indicating whether this ability persists when the unit undergoes morphing or transformation.
            </summary>
            <value>True if the ability should remain active during morph effects; otherwise, false.</value>
            <remarks>
            Abilities can be configured to persist through unit transformations either through explicit
            configuration or by being granted by items. This is important for maintaining unit capabilities
            during temporary transformation effects.
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.ShouldPersistDuringMorph">
            <summary>
            Gets or sets a value indicating whether this ability should persist during morphing operations.
            </summary>
            <value>True if the ability should remain available during transformations; otherwise, false.</value>
            <remarks>
            This property controls whether the ability remains accessible when the unit is transformed.
            It can be set either from the ability's configuration data or modified dynamically.
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.Paused">
            <summary>
            Gets a value indicating whether the ability is currently paused.
            </summary>
            <value>True if the ability is paused and not actively processing; otherwise, false.</value>
            <remarks>
            Paused abilities do not execute their periodic effects or update their states.
            This is used for temporarily suspending ability functionality without removing the ability.
            </remarks>
        </member>
        <member name="M:GameCore.AbilitySystem.Ability.Replace(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            Replaces the current ability's data configuration with a new data link.
            </summary>
            <param name="link">The new ability data link to apply to this ability.</param>
            <returns>True if the replacement was successful; otherwise, false.</returns>
            <remarks>
            This method allows dynamic modification of ability behavior by changing its underlying
            data configuration. The replacement will fail if the provided link contains invalid data.
            This is useful for ability evolution, morphing effects, or item-based ability modifications.
            </remarks>
        </member>
        <member name="M:GameCore.AbilitySystem.Ability.ToString">
            <summary>
            Returns a string representation of this ability.
            </summary>
            <returns>A formatted string containing the ability's type, friendly name, and sync ID.</returns>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.SyncIdType">
            <summary>
            Gets the synchronization ID type for this ability.
            </summary>
            <value>The sync ID type indicating this is an ability object.</value>
        </member>
        <member name="M:GameCore.AbilitySystem.Ability.#ctor(GameCore.EntitySystem.Unit,GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility},GameCore.ItemSystem.Item,GameCore.AbilitySystem.Ability@)">
            <summary>
            Initializes a new ability instance attached to the specified unit.
            </summary>
            <param name="host">The unit that will own this ability.</param>
            <param name="link">The game data link defining the ability's configuration.</param>
            <param name="item">The item that grants this ability, or null if it's a native ability.</param>
            <param name="ability">Returns the final ability instance after manager processing.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided link has invalid data.</exception>
            <remarks>
            This constructor sets up the ability with all necessary components including modification management,
            state tracking, cooldown integration, and manager registration. The ability may be processed or
            modified by the manager before being returned as the final instance.
            </remarks>
        </member>
        <member name="M:GameCore.AbilitySystem.Ability.GameCore#BaseInterface#IAttachedObject{GameCore#AbilitySystem#Ability,GameCore#AbilitySystem#Data#GameDataAbility}#OnAttached">
            <summary>
            Handles the ability attachment process and initializes active functionality.
            </summary>
            <remarks>
            This method is called when the ability is successfully attached to its host unit.
            It initializes response handlers, refreshes states and modifications on the server,
            and sets up passive periodic effects if configured.
            </remarks>
        </member>
        <member name="M:GameCore.AbilitySystem.Ability.DisposeManaged">
            <summary>
            Releases managed resources used by this ability.
            </summary>
            <remarks>
            This method cleans up all ability resources including timers, event handlers, cooldowns,
            and manager registrations. It ensures proper cleanup when the ability is removed from its host.
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Ability.GameCore#DisplayInfo#IDisplayInfo#Level">
            <summary>
            Gets the current level value for display purposes, or <see langword="null"/> if the level is not set.
            </summary>
        </member>
        <member name="T:GameCore.AbilitySystem.AbilityActive">
            <summary>
            表示具有主动行为的技能（Ability），支持多段、冷却等机制。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityActive.Cooldown">
            <summary>
            获取主动技能的冷却对象。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityActive.Charge">
            <summary>
            获取主动技能的充能对象。
            </summary>
        </member>
        <member name="M:GameCore.AbilitySystem.AbilityActive.GetCooldown(GameCore.BaseType.CooldownType)">
            <summary>
            根据类型获取对应的冷却对象。
            </summary>
            <param name="type">冷却类型。</param>
            <returns>对应的冷却对象或 null。</returns>
        </member>
        <member name="T:GameCore.AbilitySystem.AbilityActive.PhaseInfoStruct">
            <summary>
            阶段信息结构体。
            </summary>
        </member>
        <member name="M:GameCore.AbilitySystem.AbilityActive.PhaseInfoStruct.#ctor(GameCore.AbilitySystem.Ability)">
            <summary>
            阶段信息结构体。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityActive.PhaseInfoStruct.PhaseSettings">
            <summary>
            阶段设置列表。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityActive.PhaseInfoStruct.Duration">
            <summary>
            当前阶段的持续时间。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityActive.PhaseInfoStruct.CurrentPhase">
            <summary>
            当前阶段索引。
            </summary>
        </member>
        <member name="E:GameCore.AbilitySystem.AbilityActive.PhaseInfoStruct.OnPhaseChanged">
            <summary>
            阶段变化事件。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityActive.PhaseInfo">
            <summary>
            获取或设置阶段信息。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityActive.IsMultiPhase">
            <summary>
            指示该技能是否为多阶段技能。
            </summary>
        </member>
        <member name="T:GameCore.AbilitySystem.AbilityExecute">
            <summary>
            表示可执行的技能，如主动技能、攻击技能等。
            继承自 <see cref="T:GameCore.AbilitySystem.AbilityActive"/>，提供即时执行的技能功能。
            </summary>
            <remarks>
            该类是技能系统中最常用的技能类型，用于实现各种主动释放的技能。
            攻击技能也是通过此类实现，通过设置 <see cref="P:GameCore.AbilitySystem.AbilityExecute.IsAttack"/> 标志来区分。
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityExecute.IsAttack">
            <summary>
            获取技能是否为攻击技能。
            <para><strong>重要</strong>：只有当数编表中的 <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/> 设置为 <see langword="true"/> 时，该技能才能被 <see cref="F:GameCore.OrderSystem.CommandIndex.Attack"/> 指令使用。</para>
            </summary>
            <value>
            <see langword="true"/> 表示该技能是攻击技能，可以被攻击指令调用；
            <see langword="false"/> 表示该技能不是攻击技能，只能通过技能指令直接调用。
            </value>
            <example>
            <code>
            // 检查单位是否有攻击技能
            var abilityManager = unit.GetComponent&lt;AbilityManager&gt;();
            var attackAbility = abilityManager?.GetValidAttack();
            
            if (attackAbility?.IsAttack == true)
            {
                // 可以使用攻击指令
                var attackCommand = new Command
                {
                    Index = CommandIndex.Attack,
                    Target = enemy
                };
                attackCommand.IssueOrder(unit);
            }
            </code>
            </example>
            <seealso cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/>
            <seealso cref="F:GameCore.OrderSystem.CommandIndex.Attack"/>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityExecute.Range">
            <summary>
            获取技能的有效范围。
            该值由数编表中的 <see cref="P:GameCore.AbilitySystem.Data.GameDataAbilityExecute.Range"/> 函数计算得出。
            </summary>
            <value>技能的有效作用距离，单位为游戏世界单位。</value>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityExecute.AlwaysAcquireTarget">
            <summary>
            获取无目标和向量目标技能是否总是获取目标。
            <para>该属性仅对 <see cref="F:GameCore.AbilitySystem.Data.Enum.AbilityTargetType.None"/> 和 <see cref="F:GameCore.AbilitySystem.Data.Enum.AbilityTargetType.Vector"/> 目标类型的技能生效。</para>
            <para>对于其他目标类型的技能，此属性始终返回 <see langword="true"/>。</para>
            </summary>
            <value>
            对于无目标和向量目标技能，返回 <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.AlwaysAcquireTarget"/> 的值；
            对于其他目标类型的技能，始终返回 <see langword="true"/>。
            </value>
        </member>
        <member name="M:GameCore.AbilitySystem.AbilityExecute.Replace(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            替换当前技能的数据链接。
            只有当新链接指向的是 <see cref="T:GameCore.AbilitySystem.Data.GameDataAbilityExecute"/> 类型的数据时才能成功替换。
            </summary>
            <param name="link">新的技能数据链接。</param>
            <returns>如果替换成功返回 <see langword="true"/>；否则返回 <see langword="false"/>。</returns>
        </member>
        <member name="P:GameCore.AbilitySystem.AbilityMorph.IsPersistDuringMorph">
            <summary>
            Don't remove the morphing ability itself when morphed
            </summary>
        </member>
        <member name="T:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage">
            <summary>
            Defines the execution stages during an ability's lifecycle for controlling when actors are spawned and cleared.
            </summary>
            <remarks>
            <para>
            These stages correspond to the different phases of ability execution, allowing precise timing control
            for visual effects, audio, projectiles, and other actors. The stages progress in a fixed order during
            ability execution.
            </para>
            <para>
            Stage progression: <c>Preswing</c> → <c>Cast</c> → <c>Channel</c> → <c>Backswing</c> → <c>Left</c>
            </para>
            <para>
            Not all abilities use every stage. For example, instant abilities may skip <c>Channel</c>,
            while non-channeled abilities will have minimal or no <c>Channel</c> duration.
            </para>
            </remarks>
            <seealso cref="!:AbilityStageSpawn"/>
            <seealso cref="P:GameCore.AbilitySystem.Data.GameDataAbilityActive.StagedSpawns"/>
        </member>
        <member name="F:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage.Preswing">
            <summary>
            The preparation phase before the main ability execution begins.
            </summary>
            <remarks>
            <para>
            During this stage, the caster typically performs wind-up animations, charge-up effects,
            or other preparatory actions. This stage is ideal for:
            </para>
            <list type="bullet">
            <item><description>Charge-up visual effects (glowing hands, energy gathering)</description></item>
            <item><description>Preparation sounds (spell charging, weapon drawing)</description></item>
            <item><description>Targeting indicators or aiming assists</description></item>
            <item><description>Early warning effects for enemies</description></item>
            </list>
            <para>
            Preswing effects are commonly cleared when <c>Cast</c> begins to make way for the main spell effects.
            </para>
            </remarks>
        </member>
        <member name="F:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage.Cast">
            <summary>
            The main execution phase where the ability's primary effect occurs.
            </summary>
            <remarks>
            <para>
            This is the core stage where the ability's main functionality is executed. Most abilities
            spawn their primary actors during this stage, including:
            </para>
            <list type="bullet">
            <item><description>Projectiles (fireballs, arrows, magic missiles)</description></item>
            <item><description>Main visual effects (spell circles, explosions, beams)</description></item>
            <item><description>Primary audio feedback (cast sounds, impact effects)</description></item>
            <item><description>Damage or healing effects</description></item>
            </list>
            <para>
            For instant abilities, this stage contains most of the ability's effects. For channeled abilities,
            this stage sets up the channeling process.
            </para>
            </remarks>
        </member>
        <member name="F:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage.Channel">
            <summary>
            The sustained execution phase for channeled or continuous abilities.
            </summary>
            <remarks>
            <para>
            This stage is active only for abilities that require sustained casting or channeling.
            During channeling, the caster typically cannot perform other actions and must maintain
            concentration. Suitable effects include:
            </para>
            <list type="bullet">
            <item><description>Continuous beams or streams</description></item>
            <item><description>Sustained visual effects (ongoing magic circles, persistent auras)</description></item>
            <item><description>Looping audio (channeling hum, continuous spell sounds)</description></item>
            <item><description>Progressive or escalating effects</description></item>
            </list>
            <para>
            For non-channeled abilities, this stage may have zero or minimal duration.
            Channel effects are typically cleared when <c>Backswing</c> begins.
            </para>
            </remarks>
        </member>
        <member name="F:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage.Backswing">
            <summary>
            The recovery phase after the main ability execution completes.
            </summary>
            <remarks>
            <para>
            During this stage, the caster performs recovery animations and the ability winds down.
            This stage is used for aftermath effects and recovery-related actors:
            </para>
            <list type="bullet">
            <item><description>Aftermath visual effects (smoke, sparks, fading magic)</description></item>
            <item><description>Recovery sounds (spell completion, weapon sheathing)</description></item>
            <item><description>Cooldown indicators or status effects</description></item>
            <item><description>Environmental effects (scorch marks, impact craters)</description></item>
            </list>
            <para>
            Backswing effects typically persist until the ability fully completes (<c>Left</c> stage).
            </para>
            </remarks>
        </member>
        <member name="F:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage.Left">
            <summary>
            The final stage when the ability execution is completely finished.
            </summary>
            <remarks>
            <para>
            This stage marks the end of the ability's execution. It's rarely used for spawning new actors,
            but serves important cleanup functions:
            </para>
            <list type="bullet">
            <item><description>Final cleanup of all remaining non-transient actors</description></item>
            <item><description>Completion notifications or status updates</description></item>
            <item><description>Rarely: very brief completion effects</description></item>
            </list>
            <para>
            <strong>Important:</strong> All actors spawned during the ability are forcibly cleaned up
            when this stage is reached, regardless of their configured <c>ClearStage</c>, to prevent memory leaks.
            </para>
            </remarks>
        </member>
        <member name="T:GameCore.AbilitySystem.Data.GameDataAbility">
            <summary>
            表示游戏中技能（Ability）的数据定义，包括技能的显示信息、属性修改、状态变更、响应、图标等。
            用于驱动技能的创建、同步、被动效果、目标类型等核心逻辑。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.DisplayName">
            <summary>
            技能的本地化显示名称。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.Description">
            <summary>
            技能的本地化描述。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.SyncType">
            <summary>
            技能的同步类型，决定同步范围（如自身或视野内）。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.Flags">
            <summary>
            技能的标志位，控制技能的特殊行为（如被动、可切换等）。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.PassivePeriod">
            <summary>
            被动技能的周期（如定时触发）。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.PassivePeriodicEffect">
            <summary>
            被动周期性触发的效果。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.LevelMax">
            <summary>
            技能的最大等级。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.TargetType">
            <summary>
            技能的目标类型（如单体、范围、自身等）。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.Categories">
            <summary>
            技能所属的分类列表。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.Modifications">
            <summary>
            技能对单位属性的修改列表。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.AddStates">
            <summary>
            技能添加的单位状态列表。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.RemoveStates">
            <summary>
            技能移除的单位状态列表。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.ImmuneStates">
            <summary>
            技能赋予免疫的单位状态列表。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.Responses">
            <summary>
            技能触发的响应（如被动触发、命中触发等）。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.Icon">
            <summary>
            技能的图标信息。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbility.ActorArray">
            <summary>
            技能相关的特效/表现Actor数组。
            </summary>
        </member>
        <member name="M:GameCore.AbilitySystem.Data.GameDataAbility.CreateAbility(GameCore.EntitySystem.Unit,GameCore.ItemSystem.Item)">
            <summary>
            创建技能实例。
            </summary>
            <param name="owner">技能所属单位。</param>
            <param name="item">（可选）技能关联的物品。</param>
            <returns>新建的Ability实例。</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Data.GameDataAbility.Replicate(GameCore.BaseInterface.ICooldownHost,System.Nullable{System.Int32})">
            <summary>
            客户端复制技能对象，用于同步。
            </summary>
            <param name="host">冷却宿主。</param>
            <param name="syncId">同步ID。</param>
            <returns>复制的技能对象。</returns>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbilityActive.StagedSpawns">
            <summary>
            Gets or sets the list of staged actor spawns that define when visual effects and other actors are created and destroyed during ability execution.
            </summary>
            <remarks>
            <para>
            This property allows fine-grained control over the lifecycle of visual effects, projectiles, and other actors throughout the ability's execution phases.
            Each <see cref="T:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn"/> entry defines a set of actors to spawn at a specific stage and when to clean them up.
            </para>
            <para>
            The ability execution follows these stages in order: <c>Preswing</c> → <c>Cast</c> → <c>Channel</c> → <c>Backswing</c> → <c>Left</c>.
            </para>
            <para>
            Common usage patterns:
            <list type="bullet">
            <item><description>Preswing effects (charge-up visuals): Spawn at <c>Preswing</c>, clear at <c>Cast</c></description></item>
            <item><description>Cast effects (main spell visuals): Spawn at <c>Cast</c>, clear at <c>Backswing</c> or <c>Left</c></description></item>
            <item><description>Channel effects (sustained visuals): Spawn at <c>Channel</c>, clear at <c>Backswing</c></description></item>
            <item><description>Persistent effects: Spawn at <c>Cast</c>, clear at <c>Left</c> (or rely on transient cleanup)</description></item>
            </list>
            </para>
            <para>
            Transient actors (those with <c>IsTransient = true</c>) are automatically cleaned up and ignore the <c>ClearStage</c> setting.
            All remaining actors are forcibly cleaned up when the ability reaches the <c>Left</c> stage to prevent memory leaks.
            </para>
            </remarks>
            <example>
            Example configuration for a fireball spell:
            <code>
            StagedSpawns = [
                new AbilityStageSpawn {
                    SpawnStage = AbilitySpawnStage.Preswing,
                    ClearStage = AbilitySpawnStage.Cast,
                    Spawns = [FireChargeEffect] // Charge-up visual
                },
                new AbilityStageSpawn {
                    SpawnStage = AbilitySpawnStage.Cast,
                    ClearStage = AbilitySpawnStage.Left,
                    Spawns = [FireballProjectile, CastFlameEffect] // Main projectile and cast visual
                }
            ]
            </code>
            </example>
            <seealso cref="T:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn"/>
            <seealso cref="!:AbilitySpawnStage"/>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbilityActive.Animation">
            <summary>
            If set, the animation will be played when the ability is casting. When multiple animations are provided, a random one will be selected for each cast.
            </summary>
        </member>
        <member name="T:GameCore.AbilitySystem.Data.GameDataAbilityExecute">
            <summary>
            可执行技能的数编表数据，用于配置主动技能和攻击技能的各种属性和行为。
            该类定义了技能的执行参数、目标获取设置、范围计算等核心配置。
            </summary>
            <remarks>
            <para>该数编表是技能系统中最重要的配置类之一，通过 <see cref="M:GameCore.AbilitySystem.Data.GameDataAbilityExecute.CreateAbility(GameCore.EntitySystem.Unit,GameCore.ItemSystem.Item)"/> 方法创建 <see cref="T:GameCore.AbilitySystem.AbilityExecute"/> 实例。</para>
            <para><strong>攻击技能配置</strong>：要使技能能够被攻击指令使用，必须设置 <see cref="P:GameCore.AbilitySystem.Data.GameDataAbilityExecute.AbilityExecuteFlags"/>.<see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/> = <see langword="true"/>。</para>
            </remarks>
            <example>
            <code>
            // 配置攻击技能
            var swordAttackData = new GameDataAbilityExecute
            {
                AbilityExecuteFlags = new AbilityExecuteFlags 
                { 
                    IsAttack = true  // 关键：标记为攻击技能
                },
                Range = static (_) => 150f,  // 攻击范围
                Arc = Angle.FromDegree(90),  // 攻击弧度
                // 其他配置...
            };
            
            // 配置普通技能
            var fireballData = new GameDataAbilityExecute
            {
                AbilityExecuteFlags = new AbilityExecuteFlags 
                { 
                    IsAttack = false  // 不是攻击技能，只能通过技能指令使用
                },
                Range = static (_) => 300f,
                // 其他配置...
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbilityExecute.AbilityExecuteFlags">
            <summary>
            获取或设置技能的执行标志配置。
            <para><strong>重要</strong>：<see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/> 标志决定了技能是否能被攻击指令使用。</para>
            </summary>
            <value>技能执行标志的配置对象，包含 <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/> 等重要属性。</value>
            <remarks>
            这是攻击技能配置的关键属性。如果要创建攻击技能，必须设置：
            <code>AbilityExecuteFlags = new AbilityExecuteFlags { IsAttack = true }</code>
            </remarks>
            <seealso cref="T:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags"/>
            <seealso cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbilityExecute.Arc">
            <summary>
            获取或设置技能的作用弧度。
            定义技能影响的角度范围，通常用于扇形攻击或锥形技能。
            </summary>
            <value>技能作用的弧度角度。</value>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbilityExecute.ArcSlop">
            <summary>
            获取或设置技能弧度的容差角度。
            用于在目标获取时提供一定的角度容差，提升游戏体验。
            </summary>
            <value>弧度容差角度，默认为 12 度。</value>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbilityExecute.Range">
            <summary>
            获取或设置技能的有效范围计算函数。
            该函数接收技能实例作为参数，返回技能的有效作用距离。
            </summary>
            <value>范围计算函数，默认返回 0（无范围限制或接触范围）。</value>
            <remarks>
            该函数在运行时被调用以动态计算技能范围，可以根据技能等级、装备等因素进行调整。
            </remarks>
            <example>
            <code>
            // 固定范围
            Range = static (_) => 150f;
            
            // 根据技能等级调整范围
            Range = ability => 100f + ability.Level * 10f;
            </code>
            </example>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbilityExecute.TargetingIndicatorInfo">
            <summary>
            获取或设置技能的目标指示器信息。
            用于配置技能在选择目标时的视觉提示和交互行为。
            </summary>
            <value>目标指示器配置信息，如果为 <see langword="null"/> 则使用默认配置。</value>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.GameDataAbilityExecute.AcquireSettings">
            <summary>
            获取或设置技能的目标获取设置。
            配置技能如何选择和过滤目标，包括目标类型过滤器等。
            </summary>
            <value>目标获取设置配置。</value>
        </member>
        <member name="M:GameCore.AbilitySystem.Data.GameDataAbilityExecute.CreateAbility(GameCore.EntitySystem.Unit,GameCore.ItemSystem.Item)">
            <summary>
            创建技能实例。
            根据当前数编表配置创建一个 <see cref="T:GameCore.AbilitySystem.AbilityExecute"/> 技能实例。
            </summary>
            <param name="owner">技能的拥有者单位。</param>
            <param name="item">关联的物品（可选），通常用于装备技能。</param>
            <returns>创建的技能实例。</returns>
            <remarks>
            该方法是技能系统的工厂方法，由框架在添加技能时自动调用。
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityActiveFlags.AllowEnqueueInCooldown">
            <summary>
            是否可以在冷却中下达指令，用于技能的连续释放，技能依然需要等待冷却完成才能进入前摇
            </summary>
        </member>
        <member name="T:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags">
            <summary>
            技能执行标志配置，用于控制技能的执行行为和特性。
            这些标志决定了技能如何与指令系统交互，特别是攻击指令的处理方式。
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.InfiniteCasting">
            <summary>
            获取或设置技能是否可以无限施法。
            当设置为 true 时，技能可以持续施法而不会自动停止。
            </summary>
            <remarks>
            TODO: SCE-19755 InfiniteCasting
            https://xindong.atlassian.net/browse/SCE-19755 
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack">
            <summary>
            获取或设置技能是否为攻击技能。
            <para><strong>重要</strong>：只有设置为 <see langword="true"/> 的技能才能被 <see cref="F:GameCore.OrderSystem.CommandIndex.Attack"/> 指令使用。</para>
            <para>攻击指令会自动查找单位的第一个有效攻击技能（<see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/> = true）来执行攻击。</para>
            </summary>
            <value>
            <see langword="true"/> 表示该技能是攻击技能，可以被攻击指令调用；
            <see langword="false"/> 表示该技能不是攻击技能，只能通过技能指令直接调用。
            </value>
            <example>
            <code>
            // 配置攻击技能
            var weaponSkillData = new GameDataAbilityExecute
            {
                AbilityExecuteFlags = new AbilityExecuteFlags 
                { 
                    IsAttack = true  // 标记为攻击技能
                }
            };
            
            // 现在可以使用攻击指令
            var attackCommand = new Command
            {
                Index = CommandIndex.Attack,  // 系统会自动找到上面的技能
                Target = enemy
            };
            </code>
            </example>
            <seealso cref="F:GameCore.OrderSystem.CommandIndex.Attack"/>
            <seealso cref="P:GameCore.AbilitySystem.AbilityExecute.IsAttack"/>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.AlwaysAcquireTarget">
            <summary>
            获取或设置无目标和向量目标技能是否总是获取目标。
            <para>仅对 <see cref="F:GameCore.AbilitySystem.Data.Enum.AbilityTargetType.None"/> 和 <see cref="F:GameCore.AbilitySystem.Data.Enum.AbilityTargetType.Vector"/> 目标类型的技能生效。</para>
            </summary>
            <value>
            <see langword="true"/> 表示技能总是尝试获取目标；
            <see langword="false"/> 表示技能按默认规则处理目标获取。
            </value>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.Reapproachable">
            <summary>
            获取或设置技能是否可以重新接近目标。
            当技能执行过程中目标移动超出范围时，是否允许重新接近。
            </summary>
            <remarks>
            TODO: SCE-19756 Implement this
            https://xindong.atlassian.net/browse/SCE-19756
            </remarks>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityFlags.PersistDuringMorph">
            <summary>
            Decides if the ability will be removed from the unit when the unit morphs.
            Morphing will remove all abilities that are not persistent, except for the morph ability itself, and any other morph abilities that are toggled on at that point.
            </summary>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityFlags.DisableWhenDead">
            <summary>
            If true, the ability will be disabled when the unit dies.
            </summary>
        </member>
        <member name="T:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn">
            <summary>
            Defines a group of actors that should be spawned and cleared at specific stages during ability execution.
            </summary>
            <remarks>
            <para>
            This class represents a single staging rule for actor lifecycle management during ability execution.
            It allows precise control over when visual effects, projectiles, and other actors are created and destroyed
            throughout the ability's execution phases.
            </para>
            <para>
            The lifecycle works as follows:
            <list type="number">
            <item><description>When the ability reaches <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.SpawnStage"/>, all actors in <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.Spawns"/> are created</description></item>
            <item><description>When the ability reaches <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.ClearStage"/>, all non-transient actors from this spawn group are destroyed</description></item>
            <item><description>Transient actors ignore <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.ClearStage"/> and are cleaned up automatically by the system</description></item>
            <item><description>Any remaining actors are forcibly cleaned up when the ability reaches the <c>Left</c> stage</description></item>
            </list>
            </para>
            </remarks>
            <example>
            Example usage for different effect types:
            <code>
            // Charge-up effect that appears during preswing and disappears when casting starts
            new AbilityStageSpawn {
                SpawnStage = AbilitySpawnStage.Preswing,
                ClearStage = AbilitySpawnStage.Cast,
                Spawns = [ChargeUpGlow, PowerBuildupSound]
            }
            
            // Main spell effects that last from cast until the ability ends
            new AbilityStageSpawn {
                SpawnStage = AbilitySpawnStage.Cast,
                ClearStage = AbilitySpawnStage.Left,
                Spawns = [SpellProjectile, CastingLight, MagicCircle]
            }
            
            // Channel-specific effects for channeled spells
            new AbilityStageSpawn {
                SpawnStage = AbilitySpawnStage.Channel,
                ClearStage = AbilitySpawnStage.Backswing,
                Spawns = [ChannelBeam, SustainedSound]
            }
            </code>
            </example>
            <seealso cref="T:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage"/>
            <seealso cref="P:GameCore.AbilitySystem.Data.GameDataAbilityActive.StagedSpawns"/>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.Spawns">
            <summary>
            Gets or sets the list of actor data links that define which actors should be spawned for this staging rule.
            </summary>
            <remarks>
            <para>
            Each actor in this list will be instantiated when the ability reaches the <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.SpawnStage"/>.
            The created actors will be tracked for cleanup unless they are marked as transient.
            </para>
            <para>
            Common actor types include:
            <list type="bullet">
            <item><description><strong>Visual Effects:</strong> Particle systems, lighting effects, magical auras</description></item>
            <item><description><strong>Audio Effects:</strong> Sound effects, ambient audio loops</description></item>
            <item><description><strong>Projectiles:</strong> Missiles, beams, area-of-effect markers</description></item>
            <item><description><strong>Temporary Objects:</strong> Magic circles, targeting indicators, spell components</description></item>
            </list>
            </para>
            </remarks>
            <example>
            <code>
            Spawns = [
                FireballProjectileData,    // Main projectile
                CastFlameEffect,          // Visual effect at caster
                FireMagicSound,           // Audio feedback
                SpellTargetMarker         // Ground target indicator
            ]
            </code>
            </example>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.SpawnStage">
            <summary>
            Gets or sets the ability stage at which the actors in <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.Spawns"/> will be instantiated.
            </summary>
            <remarks>
            <para>
            This determines when during the ability execution the actors will be created. The ability progresses through
            stages in this order: <c>Preswing</c> → <c>Cast</c> → <c>Channel</c> → <c>Backswing</c> → <c>Left</c>.
            </para>
            <para>
            Common spawn timing strategies:
            <list type="bullet">
            <item><description><c>Preswing</c>: For charge-up effects, wind-up animations, or preparation visuals</description></item>
            <item><description><c>Cast</c>: For main spell effects, projectiles, or primary visual/audio feedback</description></item>
            <item><description><c>Channel</c>: For sustained effects during channeled abilities</description></item>
            <item><description><c>Backswing</c>: For follow-up effects, recovery animations, or aftermath visuals</description></item>
            <item><description><c>Left</c>: Rarely used for spawning, mainly for cleanup</description></item>
            </list>
            </para>
            </remarks>
            <value>Defaults to <see cref="F:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage.Cast"/> if not specified.</value>
            <seealso cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.ClearStage"/>
            <seealso cref="T:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage"/>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.ClearStage">
            <summary>
            Gets or sets the ability stage at which non-transient actors from <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.Spawns"/> will be destroyed.
            </summary>
            <remarks>
            <para>
            This controls when the spawned actors are cleaned up. Only non-transient actors are affected by this setting;
            transient actors are automatically cleaned up by the system and ignore this property.
            </para>
            <para>
            Common cleanup timing strategies:
            <list type="bullet">
            <item><description><c>Cast</c>: Clean up preswing effects when the main cast begins</description></item>
            <item><description><c>Channel</c>: Clean up cast effects when channeling starts (for channeled spells)</description></item>
            <item><description><c>Backswing</c>: Clean up main effects when entering recovery phase</description></item>
            <item><description><c>Left</c>: Keep effects until the ability completely finishes (most persistent effects)</description></item>
            </list>
            </para>
            <para>
            <strong>Important:</strong> All remaining actors are forcibly cleaned up when the ability reaches the <c>Left</c> stage,
            regardless of this setting, to prevent memory leaks.
            </para>
            </remarks>
            <value>Defaults to <see cref="F:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage.Left"/> if not specified.</value>
            <seealso cref="P:GameCore.AbilitySystem.Data.Struct.AbilityStageSpawn.SpawnStage"/>
            <seealso cref="T:GameCore.AbilitySystem.Data.Enum.AbilitySpawnStage"/>
        </member>
        <member name="P:GameCore.AbilitySystem.Data.Struct.TargetingIndicatorInfo.VectorHighlightLimit">
            <summary>
            Gets or sets the function that determines the maximum number of vector line highlights to display.
            Only works when the targeting indicator have highlight actors set;
            </summary>
            <remarks>Use this property to define a custom logic for limiting the number of vector highlights.
            Setting this property to <see langword="null"/>  indicates
            that all vector highlights will be displayed without restriction.</remarks>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.HasAbility(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            检查是否有指定的技能
            </summary>
            <param name="abilityLink">技能数编Link</param>
            <returns>如果存在指定技能则返回true</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.HasAnyAbility(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility}[])">
            <summary>
            检查是否有任意一个指定的技能
            </summary>
            <param name="abilityLinks">技能数编Link数组</param>
            <returns>如果存在任意一个指定技能则返回true</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.HasAllAbilities(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility}[])">
            <summary>
            检查是否有所有指定的技能
            </summary>
            <param name="abilityLinks">技能数编Link数组</param>
            <returns>如果存在所有指定技能则返回true</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.GetActivatedAbilities">
            <summary>
            获取所有激活的技能
            </summary>
            <returns>激活的技能集合</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.GetEnabledAbilities">
            <summary>
            获取所有启用的技能
            </summary>
            <returns>启用的技能集合</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.GetAbilitiesByTargetType(GameCore.AbilitySystem.Data.Enum.AbilityTargetType)">
            <summary>
            获取指定目标类型的技能
            </summary>
            <param name="targetType">技能目标类型</param>
            <returns>指定目标类型的技能集合</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.GetPassiveAbilities">
            <summary>
            获取所有被动技能（非AbilityActive的技能）
            </summary>
            <returns>被动技能集合</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.GetActiveAbilities">
            <summary>
            获取所有主动技能（AbilityActive类型的技能）
            </summary>
            <returns>主动技能集合</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.RemoveByPredicate(System.Func{GameCore.AbilitySystem.Ability,System.Boolean})">
            <summary>
            按条件移除技能
            </summary>
            <param name="predicate">移除条件</param>
            <returns>移除的技能数量</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.CountAbilities(System.Func{GameCore.AbilitySystem.Ability,System.Boolean})">
            <summary>
            统计指定类型的技能数量
            </summary>
            <param name="predicate">统计条件</param>
            <returns>满足条件的技能数量</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.CountAbilitiesByTargetType(GameCore.AbilitySystem.Data.Enum.AbilityTargetType)">
            <summary>
            统计指定目标类型的技能数量
            </summary>
            <param name="targetType">技能目标类型</param>
            <returns>指定目标类型的技能数量</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.CountPassiveAbilities">
            <summary>
            统计被动技能数量
            </summary>
            <returns>被动技能数量</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.CountActiveAbilities">
            <summary>
            统计主动技能数量
            </summary>
            <returns>主动技能数量</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.CountActivatedAbilities">
            <summary>
            统计激活技能数量
            </summary>
            <returns>激活技能数量</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.IsAbilityActivated(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            检查指定技能是否激活
            </summary>
            <param name="abilityLink">技能数编Link</param>
            <returns>如果技能激活则返回true</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.IsAbilityEnabled(GameData.IGameLink{GameCore.AbilitySystem.Data.GameDataAbility})">
            <summary>
            检查指定技能是否启用
            </summary>
            <param name="abilityLink">技能数编Link</param>
            <returns>如果技能启用则返回true</returns>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.GetValidAttacks">
            <summary>
            获取单位的所有有效攻击技能。
            <para>有效攻击技能必须同时满足以下条件：</para>
            <list type="bullet">
            <item><description><see cref="P:GameCore.AbilitySystem.AbilityExecute.IsAttack"/> = <see langword="true"/> （在数编表中设置 <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/> = true）</description></item>
            <item><description><see cref="!:Ability.IsValid"/> = <see langword="true"/> （技能有效）</description></item>
            <item><description><see cref="!:Ability.IsEnabled"/> = <see langword="true"/> （技能启用）</description></item>
            </list>
            </summary>
            <returns>所有满足条件的攻击技能的枚举。如果没有有效的攻击技能，返回空枚举。</returns>
            <remarks>
            该方法用于攻击指令系统查找可用的攻击技能。攻击指令会按顺序尝试这些技能。
            </remarks>
            <seealso cref="M:GameCore.AbilitySystem.Manager.AbilityManager.GetValidAttack"/>
            <seealso cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/>
        </member>
        <member name="M:GameCore.AbilitySystem.Manager.AbilityManager.GetValidAttack">
            <summary>
            获取单位的第一个有效攻击技能。
            <para>有效攻击技能必须同时满足以下条件：</para>
            <list type="bullet">
            <item><description><see cref="P:GameCore.AbilitySystem.AbilityExecute.IsAttack"/> = <see langword="true"/> （在数编表中设置 <see cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/> = true）</description></item>
            <item><description><see cref="!:Ability.IsValid"/> = <see langword="true"/> （技能有效）</description></item>
            <item><description><see cref="!:Ability.IsEnabled"/> = <see langword="true"/> （技能启用）</description></item>
            </list>
            </summary>
            <returns>第一个满足条件的攻击技能，如果没有有效的攻击技能则返回 <see langword="null"/>。</returns>
            <remarks>
            这是攻击指令系统最常用的方法，用于快速获取默认的攻击技能。
            攻击指令 (<see cref="F:GameCore.OrderSystem.CommandIndex.Attack"/>) 会自动调用此方法来查找攻击技能。
            </remarks>
            <example>
            <code>
            var abilityManager = unit.GetComponent&lt;AbilityManager&gt;();
            var attackAbility = abilityManager?.GetValidAttack();
            
            if (attackAbility != null)
            {
                // 单位有可用的攻击技能，可以使用攻击指令
                var attackCommand = new Command
                {
                    Index = CommandIndex.Attack,
                    Target = enemy
                };
                attackCommand.IssueOrder(unit);
            }
            else
            {
                // 单位没有攻击技能，需要添加攻击技能或使用技能指令
                Game.Logger.LogWarning("单位没有有效的攻击技能");
            }
            </code>
            </example>
            <seealso cref="M:GameCore.AbilitySystem.Manager.AbilityManager.GetValidAttacks"/>
            <seealso cref="P:GameCore.AbilitySystem.Data.Struct.AbilityExecuteFlags.IsAttack"/>
            <seealso cref="F:GameCore.OrderSystem.CommandIndex.Attack"/>
        </member>
        <member name="T:GameCore.ActorSystem.Actor">
            <summary>
            Represents the base class for all actors in the game world, providing visual representation and interactive capabilities.
            </summary>
            <remarks>
            Actors are objects that can be displayed on the client side within the game world, such as effects, models, animations, 
            sounds, and other visual elements. They are managed by actor scopes and can be attached to entities or other actors to 
            create complex visual hierarchies. Actors can be transient (temporary) or persistent based on their configuration and 
            scope.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.Actor.GetByViewActorId(System.Int32)">
            <summary>
            Get actor by ViewActor's Id, only work for model and particle actors, and only work if the actor is not transient, and not destroyed or Garbage collected.
            </summary>
            <param name="viewActorId"></param>
            <returns></returns>
        </member>
        <member name="P:GameCore.ActorSystem.Actor.Rotation">
            <summary>
            获取或设置Actor的旋转角度（欧拉角，以度为单位）
            </summary>
            <remarks>
            <para>
            重要注意事项：
            </para>
            <list type="bullet">
            <item><description>
            旋转是相对于父对象的本地坐标系进行的。
            </description></item>
            <item><description>
            旋转顺序：先绕X轴，再绕Y轴，最后绕Z轴（欧拉角顺序）。
            </description></item>
            <item><description>
            若设置附着后的旋转，需要在调用AttachTo之后设置旋转，因为AttachTo会重置旋转值。
            正确的操作顺序是：AttachTo → Rotation → SetOffset
            </description></item>
            <item><description>
            旋转不会影响偏移值，但会影响子对象的坐标系。
            </description></item>
            <item><description>
            常用的旋转值：
            <list type="bullet">
            <item><description>new Vector3(0, 0, 90) - 绕Z轴旋转90度</description></item>
            <item><description>new Vector3(90, 0, 0) - 绕X轴旋转90度（水平放置）</description></item>
            <item><description>new Vector3(180, 0, 0) - 绕X轴旋转180度（倒置）</description></item>
            <item><description>new Vector3(0, 90, 0) - 绕Y轴旋转90度</description></item>
            </list>
            </description></item>
            </list>
            <para>
            示例用法：
            </para>
            <code>
            // 将轮子附着到车身
            wheel.AttachTo(carBody);
            // 设置轮子水平放置
            wheel.Rotation = new Vector3(90, 0, 0);
            // 设置轮子位置
            wheel.SetOffset(wheelPosition);
            </code>
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.Actor.SetOffset(System.Numerics.Vector3)">
            <summary>
            设置Actor相对于其父对象的偏移量
            </summary>
            <param name="vector3">偏移向量，相对于父对象的本地坐标系</param>
            <remarks>
            <para>
            重要注意事项：
            </para>
            <list type="bullet">
            <item><description>
            偏移值会自动受到父对象缩放的影响。如果父对象在某个轴上缩放了2倍，
            那么该轴上的偏移值也会被放大2倍。
            </description></item>
            <item><description>
            偏移是相对于附着绑点计算的。
            </description></item>
            <item><description>
            在调用AttachTo之后设置偏移，因为AttachTo可能会重置之前的偏移值。
            </description></item>
            <item><description>
            偏移值通常需要根据父对象的实际尺寸来计算，而不是标准尺寸。
            例如：如果父对象是圆柱体，标准高度100，缩放0.5f，实际高度50，
            那么要在顶部放置子对象，偏移应该是50而不是100。
            </description></item>
            </list>
            <para>
            示例用法：
            </para>
            <code>
            // 将头部附着到身体上
            head.AttachTo(body);
            // 设置头部在身体顶部，考虑身体的实际高度
            head.SetOffset(new Vector3(0, 0, bodyHeight * scale));
            </code>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Actor.GroundZ">
            <summary>
            Gets or sets the ground Z-coordinate value. It's really just a calculated Z-coordinate value offset from the ground, there is no 'UseGroundHeight' state internally.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Actor.Player">
            <summary>
            Gets or sets the player that owns this actor.
            </summary>
            <remarks>
            If no player is explicitly set, the actor will use the player from its scope context
            or fall back to the default player.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Actor.Scope">
            <summary>
            Gets or sets the actor scope that manages this actor's lifecycle and context.
            </summary>
            <remarks>
            The scope provides context information such as position, targets, and other actors
            within the same logical group. This property is managed internally by the scope system.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Actor.Context">
            <summary>
            Gets the context information from the actor's scope, if available.
            </summary>
            <remarks>
            The context provides access to targets, position, scale, and other environmental
            information that affects how the actor behaves and appears.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Actor.Parent">
            <summary>
            Gets the parent actor in the attachment hierarchy.
            </summary>
            <value>
            Have to be set via AttachTo, cannot be set directly.
            </value>
            <remarks>
            The parent relationship determines visual hierarchy and can affect transformations
            like position, rotation, and scale inheritance. Use the AttachTo method to establish
            parent-child relationships between actors.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Actor.IsTransient">
            <summary>
            Gets a value indicating whether this actor is transient (temporary).
            </summary>
            <remarks>
            Transient actors are typically short-lived effects or animations that are not
            persisted and may be cleaned up more aggressively.
            Transient actors are often fire and forget, they will kill themselves after they 
            are done playing 'OneShot' animations/effects/sounds. While persistent actors are 
            designed to be long-lived and persistent, they will have to be killed manually.
            This value is determined by the actor's data configuration and its scope settings.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.Actor.DisposeUnmanaged(System.Boolean)">
            <summary>
            Only destroy the view actor when not finalizing.
            </summary>
            <param name="finalizing"></param>
        </member>
        <member name="P:GameCore.ActorSystem.Actor.HasDelayedInitialization">
            <summary>
            Some actor will need to wait for 1 tick to Initialize.
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.Actor.ToString">
            <summary>
            Returns a string representation of this unit including its type and friendly name.
            </summary>
            <returns>A formatted string describing this unit.</returns>
        </member>
        <member name="T:GameCore.ActorSystem.ActorBeam">
            <summary>
            Represents a beam effect actor that renders directional visual effects like lasers, lightning, or energy beams.
            </summary>
            <remarks>
            ActorBeam is specialized for creating linear visual effects that typically extend from one point to another.
            Common uses include laser beams, lightning bolts, energy rays, magical beams, and other directional effects.
            It implements IActorPlayable to support playback control and can be configured for automatic playback.
            The beam actor integrates with the game's visual effects system and supports various timing controls,
            though speed adjustment may have limitations depending on the beam type.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorBeam.#ctor(GameData.IGameLink{GameCore.ActorSystem.Data.GameDataActorBeam},System.Boolean,GameCore.ActorSystem.IActorScope,GameCore.SceneSystem.Scene,GameCore.PlayerAndUsers.Player)">
            <summary>
            Represents a beam effect actor that renders directional visual effects like lasers, lightning, or energy beams.
            </summary>
            <remarks>
            ActorBeam is specialized for creating linear visual effects that typically extend from one point to another.
            Common uses include laser beams, lightning bolts, energy rays, magical beams, and other directional effects.
            It implements IActorPlayable to support playback control and can be configured for automatic playback.
            The beam actor integrates with the game's visual effects system and supports various timing controls,
            though speed adjustment may have limitations depending on the beam type.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorBeam.Play">
            <summary>
            Starts playing the beam effect.
            </summary>
            <returns>True if the beam effect was successfully started; otherwise, false.</returns>
            <remarks>
            This method initiates the beam effect playback. Once started, the beam will be rendered
            with its configured visual properties and animations. The method tracks the play state
            to prevent duplicate playback commands and ensure proper effect management.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorBeam.SetPlaySpeed(System.Single)">
            <summary>
            Sets the playback speed multiplier for the beam effect.
            </summary>
            <param name="speed">The speed multiplier (1.0 = normal speed, 0.5 = half speed, 2.0 = double speed).</param>
            <returns>True if the speed was successfully set; otherwise, false.</returns>
            <remarks>
            Setting play speed for beam effects may not be supported or may have limited effect
            depending on the specific beam implementation and visual system. Some beam effects
            are designed with fixed timing that cannot be easily modified. This method provides
            the interface for speed control but actual support varies by beam type.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorBeam.HasDelayedInitialization">
            <summary>
            Gets a value indicating whether this beam actor requires delayed initialization.
            </summary>
            <value>True if auto-play is enabled and delayed initialization is needed; otherwise, false.</value>
            <remarks>
            When auto-play is enabled, the beam effect will be automatically started during
            the delayed initialization phase, which occurs after the actor has been fully set up
            and positioned. This ensures the beam appears at the correct location with proper timing.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorBeam.DelayedInitialization">
            <summary>
            Performs delayed initialization of the beam actor.
            </summary>
            <remarks>
            This method is called during the delayed initialization phase and automatically
            starts the beam effect if auto-play is enabled and the effect hasn't been
            manually started yet. This provides automatic beam playback for fire-and-forget scenarios.
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.ActorGrid">
            <summary>
            Represents a grid actor that can display and manage a 2D grid overlay in the game world.
            On the client side, provides full grid functionality including visual representation and state management.
            On the server side, serves as a lightweight type container for message transport and type matching.
            </summary>
            <remarks>
            <para>The grid can be used for various purposes such as:</para>
            <list type="bullet">
            <item><description>Building placement guides</description></item>
            <item><description>Area highlighting and selection</description></item>
            <item><description>Tile-based game mechanics</description></item>
            <item><description>Visual debugging overlays</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorGrid.Axis">
            <summary>
            Gets or sets the axis vectors that define the orientation and scale of the grid in 3D space.
            </summary>
            <value>
            A <see cref="T:GameCore.ActorSystem.Struct.GridAxis"/> containing X and Y axis vectors that determine the grid's orientation and cell size.
            By default, uses orthogonal X and Y axes with the size defined by <see cref="P:GameCore.ActorSystem.Data.GameDataActorGrid.GridSize"/>.
            </value>
            <remarks>
            <para>Changing this property will update the visual representation of the grid in the game world.</para>
            <para>If the update fails, an exception will be logged but the operation will not throw.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorGrid.OffsetX">
            <summary>
            Gets the X offset of the grid bounds origin in grid cell units.
            </summary>
            <value>The X offset in grid cell coordinates.</value>
            <remarks>
            <para>This is a read-only property. To change the offset, use the <see cref="P:GameCore.ActorSystem.ActorGrid.Bounds"/> property.</para>
            <para>The offset represents the starting position of the grid in the grid coordinate system.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorGrid.OffsetY">
            <summary>
            Gets the Y offset of the grid bounds origin in grid cell units.
            </summary>
            <value>The Y offset in grid cell coordinates.</value>
            <remarks>
            <para>This is a read-only property. To change the offset, use the <see cref="P:GameCore.ActorSystem.ActorGrid.Bounds"/> property.</para>
            <para>The offset represents the starting position of the grid in the grid coordinate system.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorGrid.DimensionX">
            <summary>
            Gets the size of the grid bounds in X direction in grid cells.
            </summary>
            <value>The width of the grid in grid cell units.</value>
            <remarks>
            <para>This is a read-only property. To change the dimension, use the <see cref="P:GameCore.ActorSystem.ActorGrid.Bounds"/> property.</para>
            <para>The dimension represents the number of grid cells along the X axis.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorGrid.DimensionY">
            <summary>
            Gets the size of the grid bounds in Y direction in grid cells.
            </summary>
            <value>The height of the grid in grid cell units.</value>
            <remarks>
            <para>This is a read-only property. To change the dimension, use the <see cref="P:GameCore.ActorSystem.ActorGrid.Bounds"/> property.</para>
            <para>The dimension represents the number of grid cells along the Y axis.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorGrid.Bounds">
            <summary>
            Gets or sets the bounds that define the area covered by the grid in grid cell coordinates.
            </summary>
            <value>
            A <see cref="T:GameCore.ActorSystem.Struct.GridBounds"/> representing the grid's coverage area in grid cell units.
            By default, starts at (0, 0) with zero dimensions, making the grid invisible until valid bounds are set.
            </value>
            <remarks>
            <para>The bounds determine which portion of the grid space will display the grid overlay.</para>
            <para>The <see cref="P:GameCore.ActorSystem.ActorGrid.OffsetX"/> and <see cref="P:GameCore.ActorSystem.ActorGrid.OffsetY"/> represent the grid's starting position in grid cell coordinates.</para>
            <para>The <see cref="P:GameCore.ActorSystem.ActorGrid.DimensionX"/> and <see cref="P:GameCore.ActorSystem.ActorGrid.DimensionY"/> represent the number of grid cells in each dimension.</para>
            <para>Setting invalid bounds will result in a logged exception, but the operation will not throw.</para>
            <para>The grid will only be visible when bounds have positive dimensions.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorGrid.StickToGround">
            <summary>
            Gets or sets a value indicating whether the grid should automatically align itself to the ground surface.
            </summary>
            <value>
            <c>true</c> if the grid should stick to the ground; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value>
            <remarks>
            <para>When enabled, the grid will automatically adjust its vertical position to follow the terrain or ground surface.</para>
            <para>This is useful for building placement grids that need to conform to uneven terrain.</para>
            <para>If the setting fails to apply, an exception will be logged but the operation will not throw.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorGrid.GridStates">
            <summary>
            Gets the state manager for all cells in the grid.
            </summary>
            <value>
            A <see cref="T:GameCore.ActorSystem.Struct.GridState"/> instance that manages the visual state of individual grid cells.
            Use indexers to get or set the state of specific cells using <see cref="T:GameCore.ActorSystem.Struct.GridIndex"/> coordinates.
            </value>
            <remarks>
            <para>Each cell can have different visual states represented by integer values.</para>
            <para>The available visual representations are defined by <see cref="P:GameCore.ActorSystem.Data.GameDataActorGrid.StateModels"/>.</para>
            <para>State changes are immediately reflected in the game's visual representation.</para>
            </remarks>
            <example>
            <code>
            // Set the state of cell at position (5, 3) to state 1
            actorGrid.GridStates[5, 3] = 1;
            
            // Get the current state of a cell
            int currentState = actorGrid.GridStates[5, 3];
            </code>
            </example>
        </member>
        <member name="M:GameCore.ActorSystem.ActorGrid.#ctor(GameData.IGameLink{GameCore.ActorSystem.Data.GameDataActorGrid},System.Boolean,GameCore.ActorSystem.IActorScope,GameCore.SceneSystem.Scene,GameCore.PlayerAndUsers.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.ActorSystem.ActorGrid"/> class.
            </summary>
            <param name="link">The game data link that defines the grid's configuration and appearance.</param>
            <param name="skipBirth">If <c>true</c>, skips the actor's birth process.</param>
            <param name="scope">The scope that manages this actor's lifecycle. Can be <c>null</c>.</param>
            <param name="scene">The scene to which this grid belongs. Can be <c>null</c>.</param>
            <param name="forcePlayer">Forces the grid to be associated with a specific player. Can be <c>null</c>.</param>
            <remarks>
            <para>The grid is initialized with default orthogonal axes and zero bounds.</para>
            <para>Set the <see cref="P:GameCore.ActorSystem.ActorGrid.Bounds"/> property to make the grid visible.</para>
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.ActorHighlight">
            <summary>
            Represents an actor that provides highlighting effects for other actors, typically used for selection, targeting, or status indication.
            </summary>
            <remarks>
            ActorHighlight is a specialized actor that attaches to other actors to provide visual highlighting effects.
            It integrates with the highlight aggregation system to create smooth color transitions and animations.
            The highlight can be configured with different colors, durations, and animation behaviors such as auto-reverse
            and repeat patterns. This is commonly used for UI feedback, target selection, and status visualization.
            </remarks>
            <param name="link">The game data link defining the configuration for this highlight actor.</param>
            <param name="skipBirth">Whether to skip birth animations or effects.</param>
            <param name="scope">The actor scope that will manage this actor's lifecycle.</param>
            <param name="scene">The scene to create the actor in, if different from the scope's scene.</param>
            <param name="forcePlayer">Optional player to override the default player assignment.</param>
        </member>
        <member name="M:GameCore.ActorSystem.ActorHighlight.#ctor(GameData.IGameLink{GameCore.ActorSystem.Data.GameDataActorHighlight},System.Boolean,GameCore.ActorSystem.IActorScope,GameCore.SceneSystem.Scene,GameCore.PlayerAndUsers.Player)">
            <summary>
            Represents an actor that provides highlighting effects for other actors, typically used for selection, targeting, or status indication.
            </summary>
            <remarks>
            ActorHighlight is a specialized actor that attaches to other actors to provide visual highlighting effects.
            It integrates with the highlight aggregation system to create smooth color transitions and animations.
            The highlight can be configured with different colors, durations, and animation behaviors such as auto-reverse
            and repeat patterns. This is commonly used for UI feedback, target selection, and status visualization.
            </remarks>
            <param name="link">The game data link defining the configuration for this highlight actor.</param>
            <param name="skipBirth">Whether to skip birth animations or effects.</param>
            <param name="scope">The actor scope that will manage this actor's lifecycle.</param>
            <param name="scene">The scene to create the actor in, if different from the scope's scene.</param>
            <param name="forcePlayer">Optional player to override the default player assignment.</param>
        </member>
        <member name="M:GameCore.ActorSystem.ActorHighlight.Detach(System.Boolean)">
            <summary>
            Detaches this highlight actor from its parent and removes it from the highlight aggregation system.
            </summary>
            <param name="resetBearings">Whether to reset the actor's position and rotation when detaching.</param>
            <returns>True if the detachment was successful; otherwise, false.</returns>
            <remarks>
            When detaching, this method ensures that the highlight effect is properly removed from the
            parent actor's highlight aggregator to prevent visual artifacts and memory leaks.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorHighlight.DisposeManaged">
            <summary>
            Releases managed resources used by this highlight actor.
            </summary>
            <remarks>
            This method ensures that the highlight effect is properly removed from the parent actor's
            highlight aggregator during disposal to prevent memory leaks and visual artifacts.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorHighlight.AttachTo(GameCore.Interface.IActor,EngineCommon.UTF8String,System.Boolean)">
            <summary>
            Attaches this highlight actor to a parent actor and initializes the highlighting animation.
            </summary>
            <param name="parent">The parent actor to attach to.</param>
            <param name="socket">The socket name for attachment, if any.</param>
            <param name="forwardOnce">Whether to face forward once when attached.</param>
            <returns>True if the attachment and highlight initialization was successful; otherwise, false.</returns>
            <remarks>
            This method sets up the highlight animation with the configured colors, duration, and animation
            properties. It initializes the parent's highlight aggregator if necessary and starts the
            color transition animation. The highlight will animate from the 'From' color to the 'To' color
            based on the configuration settings.
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.ActorModel">
            <summary>
            Represents a 3D model actor that can be displayed in the game world.
            </summary>
            <remarks>
            ActorModel is used to render 3D models, meshes, and other geometric objects in the game.
            It supports highlighting effects and integrates with the actor management system for
            lifecycle control. The model actor can be either transient (temporary) or persistent
            based on its configuration and intended usage.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorModel.#ctor(GameData.IGameLink{GameCore.ActorSystem.Data.GameDataActorModel},System.Boolean,GameCore.ActorSystem.IActorScope,GameCore.SceneSystem.Scene,GameCore.PlayerAndUsers.Player)">
            <summary>
            Initializes a new instance of the ActorModel class with the specified configuration.
            </summary>
            <param name="link">The game data link defining the configuration for this model actor.</param>
            <param name="skipBirth">Whether to skip birth animations or effects.</param>
            <param name="scope">The actor scope that will manage this actor's lifecycle.</param>
            <param name="scene">The scene to create the actor in, if different from the scope's scene.</param>
            <param name="forcePlayer">Optional player to override the default player assignment.</param>
            <remarks>
            On the client side, non-transient model actors are registered in a global lookup
            for efficient retrieval and management. This registration is automatically handled
            during construction and cleaned up during disposal.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorModel.DisposeManaged">
            <summary>
            Releases managed resources used by this model actor.
            </summary>
            <remarks>
            This method cleans up highlight aggregators and removes the actor from global
            lookup tables if it was registered. It ensures proper resource management and
            prevents memory leaks when the model actor is destroyed.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorModel.ShowShadow">
            <summary>
            获取或设置是否显示阴影
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.ActorParticle">
            <summary>
            Represents a particle effect actor that can display particle systems and visual effects in the game world.
            </summary>
            <remarks>
            ActorParticle is designed to render particle effects such as explosions, magic spells, environmental effects,
            and other visual phenomena. It implements IActorPlayable to support playback control and can be configured
            for automatic playback. The particle actor integrates with the game's visual effects system and supports
            various timing and animation controls.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorParticle.Play">
            <summary>
            Starts playing the particle effect.
            </summary>
            <returns>True if the particle effect was successfully started; otherwise, false.</returns>
            <remarks>
            This method initiates the particle effect playback. Once started, the particle system
            will begin emitting and animating particles according to its configuration. The method
            tracks the play state to prevent duplicate playback commands.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorParticle.SetPlaySpeed(System.Single)">
            <summary>
            Sets the playback speed multiplier for the particle effect.
            </summary>
            <param name="speed">The speed multiplier (1.0 = normal speed, 0.5 = half speed, 2.0 = double speed).</param>
            <returns>True if the speed was successfully set; otherwise, false.</returns>
            <remarks>
            This method allows dynamic control of particle effect timing, enabling effects like slow motion
            or fast-forward. A speed of 1.0 represents normal playback, values less than 1.0 slow down
            the effect, and values greater than 1.0 speed up the effect.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorParticle.HasDelayedInitialization">
            <summary>
            Gets a value indicating whether this particle actor requires delayed initialization.
            </summary>
            <value>True if auto-play is enabled and delayed initialization is needed; otherwise, false.</value>
            <remarks>
            When auto-play is enabled, the particle effect will be automatically started during
            the delayed initialization phase, which occurs after the actor has been fully set up.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorParticle.DelayedInitialization">
            <summary>
            Performs delayed initialization of the particle actor.
            </summary>
            <remarks>
            This method is called during the delayed initialization phase and automatically
            starts the particle effect if auto-play is enabled and the effect hasn't been
            manually started yet.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorParticle.DisposeManaged">
            <summary>
            Releases managed resources used by this particle actor.
            </summary>
            <remarks>
            This method cleans up the particle actor and removes it from global lookup tables
            if it was registered as a non-transient actor. It ensures proper resource management
            when the particle effect is destroyed.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorParticle.#ctor(GameData.IGameLink{GameCore.ActorSystem.Data.GameDataActorParticle},System.Boolean,GameCore.ActorSystem.IActorScope,GameCore.SceneSystem.Scene,GameCore.PlayerAndUsers.Player)">
            <summary>
            Initializes a new instance of the ActorParticle class with the specified configuration.
            </summary>
            <param name="link">The game data link defining the configuration for this particle actor.</param>
            <param name="skipBirth">Whether to skip birth animations or effects.</param>
            <param name="scope">The actor scope that will manage this actor's lifecycle.</param>
            <param name="scene">The scene to create the actor in, if different from the scope's scene.</param>
            <param name="forcePlayer">Optional player to override the default player assignment.</param>
            <remarks>
            On the client side, non-transient particle actors are registered in a global lookup
            for efficient retrieval and management. This registration is automatically handled
            during construction and cleaned up during disposal.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorParticle.ShowShadow">
            <summary>
            获取或设置是否显示阴影
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.ActorScope">
            <summary>
            Represents a scope that manages a group of actors sharing the same context and lifecycle.
            </summary>
            <param name="context">The context information that defines the scope's environment and parameters.</param>
            <remarks>
            Actor scopes provide a way to group related actors together and manage their collective lifecycle.
            They maintain context information such as position, targets, visibility, and other shared properties
            that affect all actors within the scope. Scopes can be transient (temporary) or persistent based
            on their intended usage patterns.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorScope.#ctor(GameCore.ActorSystem.IActorScopeContext)">
            <summary>
            Represents a scope that manages a group of actors sharing the same context and lifecycle.
            </summary>
            <param name="context">The context information that defines the scope's environment and parameters.</param>
            <remarks>
            Actor scopes provide a way to group related actors together and manage their collective lifecycle.
            They maintain context information such as position, targets, visibility, and other shared properties
            that affect all actors within the scope. Scopes can be transient (temporary) or persistent based
            on their intended usage patterns.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorScope.Id">
            <summary>
            Gets the unique identifier for this actor scope.
            </summary>
            <remarks>
            By default, this returns the hash code of the scope instance. Derived classes may override
            this to provide more specific identification logic.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorScope.Context">
            <summary>
            Gets the context information that defines this scope's environment and parameters.
            </summary>
            <remarks>
            The context provides information such as position, targets, player ownership, scale,
            and other environmental factors that affect actors within this scope.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorScope.Host">
            <summary>
            Gets the host object that owns this actor scope, if any.
            </summary>
            <remarks>
            The host is typically an entity or other object that serves as the primary owner
            or anchor point for the actors managed by this scope.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorScope.GameCore#ActorSystem#IActorScope#MainActor">
            <summary>
            Gets the main actor for this scope. Base implementation returns null.
            </summary>
            <remarks>
            Some specialized scopes may designate a primary actor that represents the scope's
            main visual element. The base ActorScope does not define a main actor.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorScope.Kill">
            <summary>
            Terminates all actors in this scope and marks the scope for cleanup.
            </summary>
            <remarks>
            This method should be implemented by derived classes to define how actors
            are terminated when the scope is being shut down.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorScope.GameCore#ActorSystem#IActorScope#Destroy">
            <summary>
            Destroys this actor scope and cleans up its resources.
            </summary>
            <remarks>
            This method is called when the scope needs to be completely removed from the game.
            It delegates to the virtual Destroy method to allow customization by derived classes.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorScope.SourceSite">
            <summary>
            Gets the source site actor for this scope, if any.
            </summary>
            <remarks>
            The source site represents the primary visual anchor point for actors in this scope.
            This property must be implemented by derived classes.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorScope.EnsuredSourceSite">
            <summary>
            Gets the ensured source site actor, creating it if necessary.
            </summary>
            <remarks>
            This property guarantees that a source site actor exists, creating one if needed.
            It provides a reliable anchor point for actor attachments and positioning.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorScope.AttachSite">
            <summary>
            Gets the attach site actor for this scope, if any.
            </summary>
            <remarks>
            The attach site represents the preferred attachment point for new actors
            being added to this scope.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorScope.ClientActors">
            <summary>
            Gets the collection of client-side actors managed by this scope.
            </summary>
            <remarks>
            This collection tracks actors that are specifically managed on the client side
            for rendering and visual effects. Base implementation returns null.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorScopeTransient.Kill">
            <summary>
            Only work if there is no host
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.ActorSegmented">
            <summary>
            Represents an abstract base class for segmented actors that can display directional effects such as beams, projectiles, or area indicators.
            </summary>
            <remarks>
            Segmented actors are special visual effects that extend from one point to another, often used for spells, projectiles,
            beams, or area-of-effect indicators. They consist of multiple segments that can be arranged in a line, with optional
            launch and impact effects at the endpoints. The actor automatically calculates its orientation and length based on
            the positions of its start and end points.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorSegmented.#ctor(GameData.IGameLink{GameCore.ActorSystem.Data.GameDataActorSegmented},System.Boolean,GameCore.ActorSystem.IActorScope,GameCore.SceneSystem.Scene,GameCore.PlayerAndUsers.Player)">
            <summary>
            Initializes a new instance of the ActorSegmented class on the client side.
            </summary>
            <param name="link">The game data link defining the configuration for this segmented actor.</param>
            <param name="skipBirth">Whether to skip birth animations or effects.</param>
            <param name="scope">The actor scope that will manage this actor's lifecycle.</param>
            <param name="scene">The scene to create the actor in, if different from the scope's scene.</param>
            <param name="forcePlayer">Optional player to override the default player assignment.</param>
            <remarks>
            On the client side, this constructor also initializes debug drawing capabilities if enabled
            in the segmented actor's configuration flags.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorSegmented.UpdateForward">
            <summary>
            Updates the forward direction and length of the segmented actor based on its end point.
            </summary>
            <returns>True if the forward direction was successfully updated; otherwise, false.</returns>
            <remarks>
            This method calculates the orientation and actual length of the segmented actor by examining
            the positions of its start point (current position) and end point (ForwardEndPoint).
            The actor's rotation is updated to face toward the end point, and the actual length is
            either set to the specified Length property or calculated from the distance between points.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.DebugDraw">
            <summary>
            Gets or sets the debug drawing interface for rendering debugging information.
            </summary>
            <value>The debug draw interface, or null if debug drawing is disabled.</value>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.DebugDrawEnabled">
            <summary>
            Gets or sets a value indicating whether debug drawing is enabled for this segmented actor.
            </summary>
            <value>True if debug drawing is enabled; otherwise, false.</value>
            <remarks>
            When enabled, additional visual debugging information will be rendered to help with
            development and troubleshooting of the segmented actor's positioning and orientation.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.ForwardEndPoint">
            <summary>
            Gets or sets the end point context that defines where the segmented actor should point toward.
            </summary>
            <value>The actor end point context providing the target position and configuration.</value>
            <remarks>
            This property determines the forward direction and target of the segmented actor.
            When set, the actor will orient itself to point from its current position toward this end point.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.ActualLength">
            <summary>
            Gets the actual calculated length of the segmented actor.
            </summary>
            <value>The actual length in world units, calculated from the start and end positions.</value>
            <remarks>
            This property reflects the real length of the segmented actor after UpdateForward() has been called.
            It may differ from the Length property if the Length is null, in which case it's calculated from positions.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.Length">
            <summary>
            Gets or sets the desired length of the segmented actor.
            </summary>
            <value>The desired length in world units, or null to use the calculated distance between points.</value>
            <remarks>
            When set to a specific value, this overrides the calculated distance between start and end points.
            When null, the actor will calculate its length based on the actual distance to the ForwardEndPoint.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.LaunchActor">
            <summary>
            Gets the actor displayed at the launch point (start) of the segmented effect.
            </summary>
            <value>The launch actor, or null if no launch effect is configured.</value>
            <remarks>
            This actor is typically used for effects such as muzzle flashes, spell origins, or other
            visual indicators at the start point of the segmented effect.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.ImpactActor">
            <summary>
            Gets the actor displayed at the impact point (end) of the segmented effect.
            </summary>
            <value>The impact actor, or null if no impact effect is configured.</value>
            <remarks>
            This actor is typically used for effects such as explosions, spell impacts, or other
            visual indicators at the end point of the segmented effect.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.Segments">
            <summary>
            Gets the collection of segment actors that make up the body of the segmented effect.
            </summary>
            <remarks>
            These actors are arranged in sequence to create the visual representation of the segmented effect,
            such as beam segments, projectile trails, or area indicator sections.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.ActorSegmented.CenterActors">
            <summary>
            Gets a read-only view of the center segment actors.
            </summary>
            <value>A read-only list of actors representing the central segments of the effect.</value>
            <remarks>
            This property provides external access to the segment actors without allowing direct modification
            of the internal collection.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.ActorSegmented.DisposeManaged">
            <summary>
            Releases managed resources used by this segmented actor.
            </summary>
            <remarks>
            This method cleans up all segment actors, launch and impact actors, debug drawing resources,
            and cached position data when the segmented actor is being disposed.
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Enum.ActorSegmentedHeight">
            <summary>
            定义 Actor 分段高度的配置选项，控制 Actor 链条中各部分的垂直位置分布
            </summary>
            <remarks>
            此枚举用于配置由多个分段组成的 Actor（如激光束、闪电链等）的高度分布模式。
            不同的高度模式会影响分段 Actor 的视觉表现和空间定位。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.ActorSegmentedHeight.LaunchSite">
            <summary>
            启动点高度 - 所有分段使用启动点的高度
            </summary>
            <remarks>
            所有分段都保持在启动点的原始高度，不进行高度调整。
            适用于需要保持水平线性分布的效果。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.ActorSegmentedHeight.LaunchSiteGround">
            <summary>
            启动点地面高度 - 使用启动点的地面高度
            </summary>
            <remarks>
            所有分段都调整到启动点所在位置的地面高度。
            适用于需要沿地面分布的效果，如地面冲击波等。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.ActorSegmentedHeight.AllGrounded">
            <summary>
            全部贴地 - 每个分段都调整到其所在位置的地面高度
            </summary>
            <remarks>
            每个分段独立调整到其所在位置的地面高度，形成跟随地形的效果。
            适用于需要贴合地形变化的效果，如沿地面传播的魔法等。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Enum.AnimTrailMode">
            <summary>
            定义动画轨迹的渲染模式，控制轨迹效果在不同附着点之间的绘制方式
            </summary>
            <remarks>
            动画轨迹模式用于配置如刀光、剑气粒子等拥有多个端点的粒子效果的渲染方向和起终点。
            不同的模式决定了轨迹从哪个点开始，到哪个点结束，以及是否有中心点参与。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.AnimTrailMode.FromCenterToSocketAB">
            <summary>
            从中心点到附着点 A 和 B - 创建从中心分叉到两个端点的轨迹
            </summary>
            <remarks>
            轨迹从一个中心位置开始，同时延伸到附着点 A 和附着点 B。
            适用于需要从一个源点向多个目标发射的效果，如分裂闪电或多目标法术。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.AnimTrailMode.FromSocketAToSocketB">
            <summary>
            从附着点 A 到附着点 B - 创建直接连接两个附着点的轨迹
            </summary>
            <remarks>
            轨迹从附着点 A 开始，直接延伸到附着点 B。
            适用于点对点的连接效果，如激光束、链条或直线型魔法攻击。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.AnimTrailMode.FromSocketBToSocketA">
            <summary>
            从附着点 B 到附着点 A - 创建从 B 到 A 方向的轨迹
            </summary>
            <remarks>
            轨迹从附着点 B 开始，直接延伸到附着点 A。
            与 FromSocketAToSocketB 相反的方向，用于需要反向连接的效果。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Enum.MaterialPriority">
            <summary>
            定义材质的渲染优先级，控制材质在渲染管线中的处理顺序
            </summary>
            <remarks>
            材质优先级用于解决渲染顺序冲突，确保重要的视觉效果能够正确显示。
            较高优先级的材质会在较低优先级之后渲染，从而覆盖在其上方。
            这对于 UI 元素、特效和透明物体的正确显示非常重要。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.MaterialPriority.Priority1">
            <summary>
            优先级 1 - 最低优先级，最先渲染
            </summary>
            <remarks>
            适用于背景元素、地形和其他应该在底层显示的材质。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.MaterialPriority.Priority2">
            <summary>
            优先级 2 - 较低优先级
            </summary>
            <remarks>
            适用于一般的 3D 模型和环境对象。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.MaterialPriority.Priority3">
            <summary>
            优先级 3 - 中等优先级
            </summary>
            <remarks>
            适用于角色模型、重要的游戏对象和中层视觉效果。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.MaterialPriority.Priority4">
            <summary>
            优先级 4 - 较高优先级
            </summary>
            <remarks>
            适用于粒子效果、光晕和需要显示在大多数对象之上的元素。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.MaterialPriority.Priority5">
            <summary>
            优先级 5 - 最高优先级，最后渲染
            </summary>
            <remarks>
            适用于 UI 元素、HUD、文字和必须显示在最顶层的视觉效果。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Enum.ParentRemovalProcedure">
            <summary>
            定义当父级 Actor 被移除时，子 Actor 的处理程序
            </summary>
            <remarks>
            此枚举控制 Actor 层级关系中，当父级对象被销毁或移除时，
            其子级对象应该如何响应。不同的处理方式适用于不同类型的 Actor 关系和使用场景。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.ParentRemovalProcedure.Default">
            <summary>
            默认处理 - 如果是单位 Actor 则分离，否则移除
            </summary>
            <remarks>
            如果 Actor 是单位类型，当父级被移除时会从父级分离但继续存在；
            如果是其他类型的 Actor，则会被一同移除。
            这提供了基于 Actor 类型的智能默认行为。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.ParentRemovalProcedure.Remove">
            <summary>
            移除处理 - Actor 会在父级移除时自动移除自身
            </summary>
            <remarks>
            当父级被移除时，子 Actor 也会被自动销毁。
            适用于生命周期完全依赖于父级的 Actor，如特效、附属装饰等。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.ParentRemovalProcedure.Detach">
            <summary>
            分离处理 - Actor 会从父级分离但不会被自动移除
            </summary>
            <remarks>
            当父级被移除时，子 Actor 会从层级关系中分离出来，
            但会继续独立存在，不会被自动销毁。
            适用于具有独立生命周期的 Actor。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Enum.SoundPlayMode">
            <summary>
            定义音频播放的模式，控制多个音频文件的播放顺序和选择方式
            </summary>
            <remarks>
            当一个 Actor 包含多个音频文件时，播放模式决定了系统如何选择和播放这些音频。
            不同的播放模式可以创建不同的音频体验，如按顺序播放或随机播放。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.SoundPlayMode.Sequential">
            <summary>
            顺序播放 - 按照预定义的顺序依次播放音频文件
            </summary>
            <remarks>
            音频文件将按照它们在列表中的顺序依次播放。
            适用于需要保持特定播放顺序的场景，如故事叙述、音乐序列等。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.SoundPlayMode.Random">
            <summary>
            随机播放 - 随机选择音频文件进行播放
            </summary>
            <remarks>
            系统将随机选择一个音频文件进行播放，增加音频的多样性。
            适用于环境音效、战斗音效等需要变化的场景。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Enum.TextHorizontalAlignment">
            <summary>
            Defines the horizontal alignment options for text rendering.
            </summary>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.TextHorizontalAlignment.Left">
            <summary>
            Aligns text to the left edge of the container.
            </summary>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.TextHorizontalAlignment.Center">
            <summary>
            Centers text horizontally within the container.
            </summary>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.TextHorizontalAlignment.Right">
            <summary>
            Aligns text to the right edge of the container.
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Enum.TextVerticalAlignment">
            <summary>
            定义文本渲染的垂直对齐选项
            </summary>
            <remarks>
            垂直对齐选项控制文本在容器或边界框内的垂直位置。
            这些选项通常与水平对齐配合使用，以精确控制文本的显示位置。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.TextVerticalAlignment.Top">
            <summary>
            顶部对齐 - 文本与容器的顶部边缘对齐
            </summary>
            <remarks>
            文本的第一行贴近容器的顶部边界显示。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.TextVerticalAlignment.Center">
            <summary>
            居中对齐 - 文本在容器内垂直居中
            </summary>
            <remarks>
            文本块在容器的垂直方向上居中显示，上下留有相等的空间。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Data.Enum.TextVerticalAlignment.Bottom">
            <summary>
            底部对齐 - 文本与容器的底部边缘对齐
            </summary>
            <remarks>
            文本的最后一行贴近容器的底部边界显示。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Data.GameDataActor">
            <summary>
            Represents the base data class for actor configurations, defining common properties and behaviors for all actor types.
            GameData normally generated from the Data Editor, but can also be created programmatically.
            </summary>
            <remarks>
            This abstract class provides the foundation for all actor data types in the game, including visual elements,
            effects, models, and other interactive objects. It defines properties for positioning, scaling, attachment,
            and other common actor characteristics that are used by the actor system to create and manage actors.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.IsTransient">
            <summary>
            Gets a value indicating whether actors created from this data are transient (temporary).
            </summary>
            <remarks>
            Transient actors are typically short-lived effects or animations that don't persist
            and may be cleaned up more aggressively by the system.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.Socket">
            <summary>
            Gets or sets the socket name for attachment points on the parent actor.
            </summary>
            <remarks>
            When specified, the actor will attach to a named socket on its parent actor,
            allowing for precise positioning relative to specific attachment points.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.Rotation">
            <summary>
            Gets or sets the rotation offset applied to the actor.
            </summary>
            <remarks>
            This rotation is applied in addition to any inherited rotation from parent actors,
            unless <see cref="P:GameCore.ActorSystem.Data.GameDataActor.InheritRotation"/> is set to false.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.InheritRotation">
            <summary>
            Gets or sets a value indicating whether the actor should inherit rotation from its parent.
            </summary>
            <remarks>
            When true (default), the actor will apply its parent's rotation in addition to its own.
            When false, only the actor's local rotation is used.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.Offset">
            <summary>
            Gets or sets the position offset applied to the actor relative to its attachment point.
            </summary>
            <remarks>
            This offset is applied after any parent transformations and socket positioning.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.InheritScale">
            <summary>
            Gets or sets a value indicating whether the actor should inherit scale from its parent.
            </summary>
            <remarks>
            When true, the actor will be affected by its parent's scale transformations.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.AutoScale">
            <summary>
            Gets or sets a value indicating whether the actor should automatically scale based on its scope.
            </summary>
            <remarks>
            This is similar to <see cref="P:GameCore.ActorSystem.Data.GameDataActor.InheritScale"/> but specifically inherits scale from the actor scope
            rather than just the immediate parent.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.Scale">
            <summary>
            Gets or sets a uniform scale factor applied to the actor.
            </summary>
            <remarks>
            This scale is applied to all dimensions of the actor. Use <see cref="P:GameCore.ActorSystem.Data.GameDataActor.ScaleVector"/>
            for non-uniform scaling along different axes.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.ScaleVector">
            <summary>
            Gets or sets a non-uniform scale vector applied to the actor.
            </summary>
            <remarks>
            This allows different scaling factors for X, Y, and Z axes. If both <see cref="P:GameCore.ActorSystem.Data.GameDataActor.Scale"/>
            and <see cref="P:GameCore.ActorSystem.Data.GameDataActor.ScaleVector"/> are specified, they are multiplied.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.AttachForwardOnce">
            <summary>
            Gets or sets a value indicating whether the actor should face forward once when attached.
            </summary>
            <remarks>
            When true, the actor will be oriented to face forward relative to its attachment point
            at the time of attachment, but won't continue to update its facing afterward.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.MiniMapIcon">
            <summary>
            Gets or sets the minimap icon configuration for this actor, if any.
            </summary>
            <remarks>
            When specified, the actor will appear on the minimap with the configured icon and properties.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.ParentRemovalProcedure">
            <summary>
            Gets or sets the procedure to follow when the actor's parent is removed.
            </summary>
            <remarks>
            This determines how the actor should behave when its parent actor is destroyed or removed,
            such as whether to also be destroyed, detached, or remain in place.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.ReleaseOnGC">
            <summary>
            Gets or sets a value indicating whether the actor should be released during garbage collection.
            </summary>
            <remarks>
            When true, the actor's resources will be released during garbage collection cycles,
            which can help with memory management for frequently created and destroyed actors.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.AssetVolume">
            <summary>
            Gets the volume dimensions of the actor's asset, if applicable.
            </summary>
            <remarks>
            This represents the 3D bounding box of the actor's visual representation.
            Base implementation returns null; derived classes may override for specific asset types.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.AssetRadius">
            <summary>
            Gets the radius of the actor's asset, if applicable.
            </summary>
            <remarks>
            This represents the spherical bounding radius of the actor's visual representation.
            Base implementation returns null; derived classes may override for specific asset types.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActor.ViewActorAsyncType">
            <summary>
            Gets the type of view actor used for client-side rendering.
            </summary>
            <remarks>
            This determines what kind of rendering actor will be created on the client side
            to display this actor. Default is the standard actor type.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.Data.GameDataActor.CreateActor(GameCore.ActorSystem.IActorScope,System.Boolean,GameCore.SceneSystem.Scene)">
            <summary>
            Creates an actor instance from this data configuration.
            </summary>
            <param name="scope">The actor scope that will manage the created actor.</param>
            <param name="skipBirth">Whether to skip birth animations or effects.</param>
            <param name="scene">The scene to create the actor in, if different from the scope's scene.</param>
            <returns>A new actor instance, or null if creation failed.</returns>
            <remarks>
            This method must be implemented by derived classes to define how specific actor types
            are instantiated from their data configurations.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorAdditionModel.CullHostMesh">
            <summary>
            Determines whether the host mesh should be culled when the actor is attached to a host.
            This helps prevent rendering issues, such as overlapping meshes, when the host mesh is 
            covered by the attached actor (e.g., a unit covered by cloth). 
            Default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.Data.GameDataActorGrid">
            <summary>
            Defines the configuration data for grid actors, including visual appearance and behavioral settings.
            </summary>
            <remarks>
            <para>This class contains all the static configuration that determines how a grid actor behaves and appears in the game.</para>
            <para>Grid actors can be used for various purposes including building placement guides, area visualization, and tile-based game mechanics.</para>
            <para>The visual representation is controlled through state models that define different appearances for grid cells.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorGrid.GridSize">
            <summary>
            Gets or sets the default size of each grid cell in world units.
            </summary>
            <value>
            The size of each grid cell in world space units. The default value is 128.0f.
            </value>
            <remarks>
            <para>This value defines the initial spacing between grid lines when the actor is created.</para>
            <para>The actual grid size can be dynamically adjusted after creation through the <see cref="P:GameCore.ActorSystem.ActorGrid.Axis"/> property.</para>
            <para>Larger values create more spaced-out grids, while smaller values create denser grids.</para>
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorGrid.StateModels">
            <summary>
            Gets or sets the collection of 3D models used to represent different visual states of grid cells.
            </summary>
            <value>
            A list of model links where each index corresponds to a specific cell state.
            Can contain <c>null</c> entries for states that should not display any model.
            The default is an empty collection.
            </value>
            <remarks>
            <para>Each element in the list represents a different visual state that grid cells can display.</para>
            <para>State values are used as indices into this collection:</para>
            <list type="bullet">
            <item><description>State 0: Uses StateModels[0] (or no model if null or empty)</description></item>
            <item><description>State 1: Uses StateModels[1]</description></item>
            <item><description>And so on...</description></item>
            </list>
            <para>If a state value exceeds the collection size, no model will be displayed for that cell.</para>
            <para>Null entries are valid and result in invisible/empty cells for those states.</para>
            </remarks>
            <example>
            <code>
            // Example configuration:
            // StateModels[0] = null           // State 0: Empty cell
            // StateModels[1] = WallModel      // State 1: Wall
            // StateModels[2] = FloorModel     // State 2: Floor
            // StateModels[3] = DecorModel     // State 3: Decoration
            </code>
            </example>
        </member>
        <member name="M:GameCore.ActorSystem.Data.GameDataActorGrid.CreateActor(GameCore.ActorSystem.IActorScope,System.Boolean,GameCore.SceneSystem.Scene)">
            <summary>
            Creates a new <see cref="T:GameCore.ActorSystem.ActorGrid"/> instance based on this configuration data.
            </summary>
            <param name="scope">The scope that will manage the created actor's lifecycle. Can be <c>null</c>.</param>
            <param name="skipBirth">If <c>true</c>, skips the actor's birth process during creation.</param>
            <param name="scene">The scene in which to create the actor. Can be <c>null</c>.</param>
            <returns>
            A new <see cref="T:GameCore.ActorSystem.ActorGrid"/> instance configured with this data, or <c>null</c> if creation fails.
            </returns>
            <remarks>
            This method is only available on the client side where full grid functionality is supported.
            The created actor will use the settings defined in this configuration object.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorMaterial.IntroDuration">
            <summary>
            When the material is applied to a model, it will play the property animations from start to end within this duration.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorMaterial.OutroDuration">
            <summary>
            When the material is removed from a model, it will play the property animations from end to start within this duration.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorSound.LoopCount">
            <summary>
            Null stands for infinite loop.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorSound.Is2D">
            <summary>
            The sound will be played in 2D space, which means it will not be affected by the camera position and rotation.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorSound.RolloffFactor">
            <summary>
            Defines the rolloff factor for audio attenuation. A higher value indicates a steeper decrease in volume with
            distance. Only works when Is2D is false.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorSound.CutoffDistance">
            <summary>
            Represents the distance beyond which the sound will be completely cut off. Only works when Is2D is false.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorSound.MaxInstanceCount">
            <summary>
            Specifies the maximum number of instances allowed. This is a hard limit based on sound link, and if exceeded, new instance will not be played, and if the sound is set to KillOnFinish, it will be killed.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Data.GameDataActorSound.MaxAudibleCount">
            <summary>
            Specifies the maximum number of audible instance allowed. This is a hard limit based on sound link, and if exceeded, the sound will be played, but it will not be audible.
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Struct.AnimTrailSetting">
            <summary>
            定义动画轨迹的配置设置，控制轨迹效果的外观和行为
            </summary>
            <remarks>
            AnimTrailSetting 类用于配置各种轨迹类型的视觉效果，如刀光、剑气粒子等。
            它定义了轨迹的起始和结束附着点、宽度以及渲染模式，为创建丰富的视觉效果提供了灵活的配置选项。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.AnimTrailSetting.SocketA">
            <summary>
            获取或设置轨迹的第一个附着点名称
            </summary>
            <remarks>
            附着点 A 通常作为轨迹的起始点或其中一个端点。
            附着点名称对应于 3D 模型中定义的骨骼或挂载点。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.AnimTrailSetting.SocketB">
            <summary>
            获取或设置轨迹的第二个附着点名称
            </summary>
            <remarks>
            附着点 B 通常作为轨迹的结束点或另一个端点。
            与附着点 A 配合，定义了轨迹的空间范围和方向。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.AnimTrailSetting.Width">
            <summary>
            获取或设置轨迹的宽度
            </summary>
            <remarks>
            定义轨迹效果的视觉宽度，影响轨迹在屏幕上的粗细程度。
            较大的值会创建更粗的轨迹效果，较小的值则创建更细的轨迹。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.AnimTrailSetting.Mode">
            <summary>
            获取或设置轨迹的渲染模式
            </summary>
            <remarks>
            控制轨迹在附着点之间的绘制方式和方向。
            默认模式为从附着点 A 到附着点 B 的直线轨迹。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.DebugDrawSettings.Enabled">
            <summary>
            Determines whether debug drawing is enabled by default. If true, debug shapes will be drawn in the game scene for debugging purposes. Actors and ActorScopes can still draw debug shapes manually even if this is false.
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.Data.Struct.MiniMapIcon">
            <summary>
            定义小地图图标的配置，包含不同状态和朝向下的图标资源
            </summary>
            <remarks>
            MiniMapIcon 类用于配置 Actor 在小地图上的显示方式。它支持多种图标状态，
            包括友方、敌方、旋转等不同情况下的图标显示，以及层级控制。
            这样可以为玩家提供清晰的小地图视觉信息。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.MiniMapIcon.Icon">
            <summary>
            获取或设置默认的小地图图标
            </summary>
            <remarks>
            这是最基本的图标，在没有特殊状态时显示。
            通常用于中性或友方单位的默认表示。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.MiniMapIcon.IconRotated">
            <summary>
            获取或设置带有旋转方向的小地图图标
            </summary>
            <remarks>
            当需要显示单位朝向时使用的图标，通常包含箭头或方向指示器。
            可以根据单位的实际朝向进行旋转显示。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.MiniMapIcon.IconEnemy">
            <summary>
            获取或设置敌方单位的小地图图标
            </summary>
            <remarks>
            专门用于显示敌方单位的图标，通常使用不同的颜色或样式来区分敌友。
            帮助玩家快速识别小地图上的威胁。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.MiniMapIcon.IconEnemyRotated">
            <summary>
            获取或设置敌方单位带有旋转方向的小地图图标
            </summary>
            <remarks>
            敌方单位的朝向图标，结合了敌方标识和方向指示。
            让玩家既能识别敌方单位，又能了解其朝向。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.MiniMapIcon.IconSelfRotated">
            <summary>
            获取或设置玩家自身单位带有旋转方向的小地图图标
            </summary>
            <remarks>
            专门用于显示玩家控制的单位的朝向图标，通常具有特殊的视觉样式。
            帮助玩家快速定位和识别自己的单位。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.Data.Struct.MiniMapIcon.ZIndex">
            <summary>
            获取或设置图标的 Z 轴顺序，决定其相对于其他元素的堆叠顺序
            </summary>
            <remarks>
            数值越高的图标会渲染在上层，覆盖数值较低的图标。
            用于控制不同类型图标在小地图上的显示优先级。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Enum.ScopeAction">
            <summary>
            定义 Actor 作用域可以执行的操作类型
            </summary>
            <remarks>
            这个枚举用于标识不同类型的作用域操作，这些操作影响作用域内 Actor 的行为和表现。
            作用域操作通常在特定游戏事件或触发条件下执行。
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Enum.ScopeAction.Normal">
            <summary>
            这是干啥的？忘记了。
            </summary>
        </member>
        <member name="F:GameCore.ActorSystem.Enum.ScopeAction.Impact">
            <summary>
            撞击操作 - 触发撞击效果和相关 Actor
            </summary>
            <remarks>
            当执行此操作时，作用域会触发撞击相关的视觉效果、声音效果或其他 Actor。
            通常用于碰撞检测、技能命中或其他需要产生撞击反馈的场景。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Enum.TintColorType">
            <summary>
            Defines the blending mode for applying tint colors to actor models.
            </summary>
            <remarks>
            This enumeration determines how tint colors interact with the actor's original texture colors.
            Different blending modes provide various visual effects for team colors, status indicators, 
            material adjustments, and other color-based visual feedback systems.
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Enum.TintColorType.Factor">
            <summary>
            Multiplies the tint color with the actor's base color.
            </summary>
            <remarks>
            In factor mode, each color channel is multiplied: Result = BaseColor * TintColor.
            This creates a darkening or color-shifting effect while preserving the original texture's detail.
            Useful for creating subtle color variations, shadows, or material property changes.
            White (255,255,255) tint has no effect, while black (0,0,0) creates complete darkness.
            </remarks>
        </member>
        <member name="F:GameCore.ActorSystem.Enum.TintColorType.Override">
            <summary>
            Blends the tint color over the actor's base color using alpha compositing.
            </summary>
            <remarks>
            In override mode, the tint color is alpha-blended with the base color: 
            Result = BaseColor * (1 - TintAlpha) + TintColor * TintAlpha.
            The alpha channel of the tint color controls the blend strength:
            - Alpha = 1.0 (255): Complete color replacement
            - Alpha = 0.5 (128): 50% blend between base and tint
            - Alpha = 0.0 (0): No tint effect, original color preserved
            Ideal for team colors, health status indicators, and overlay effects.
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.IActorAnimationPlayable">
            <summary>
            表示可以播放动画的Actor接口
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.IActorAnimationPlayable.PlayAnimationSequence(GameData.IGameLink{GameCore.ModelAnimation.Data.GameDataAnimationSequence},System.Single)">
            <summary>
            播放动画序列，使用游戏数据中的触发事件设置
            </summary>
            <param name="link">动画序列的游戏数据链接</param>
            <returns>创建的动画序列对象，如果失败则返回null</returns>
        </member>
        <member name="M:GameCore.ActorSystem.IActorAnimationPlayable.PlayAnimationSequence(GameData.IGameLink{GameCore.ModelAnimation.Data.GameDataAnimationSequence},System.Boolean,System.Single)">
            <summary>
            播放动画序列，指定是否触发事件
            </summary>
            <param name="link">动画序列的游戏数据链接</param>
            <param name="triggerEvents">是否触发动画序列中的事件</param>
            <returns>创建的动画序列对象，如果失败则返回null</returns>
        </member>
        <member name="M:GameCore.ActorSystem.IActorAnimationPlayable.PlayAnimation(GameCore.ResourceType.Animation,EngineInterface.BaseType.AnimationPlayParam)">
            <summary>
            播放动画文件
            </summary>
            <param name="animationFile">动画文件资源</param>
            <param name="param">可选的动画播放参数</param>
            <returns>创建的动画对象，如果失败则返回null</returns>
        </member>
        <member name="M:GameCore.ActorSystem.IActorAnimationPlayable.PlayAnimation(GameData.IGameLink{GameCore.ModelAnimation.Data.GameDataAnimationSimple})">
            <summary>
            播放动画，使用游戏数据链接
            </summary>
            <param name="link">动画的游戏数据链接</param>
            <returns>创建的动画对象，如果失败则返回null</returns>
        </member>
        <member name="T:GameCore.ActorSystem.IActorAnimationPlayableExtensions">
            <summary>
            IActorAnimationPlayable接口的扩展方法
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.IActorAnimationPlayableExtensions.PlayAnimationSequence(GameCore.ActorSystem.IActorAnimationPlayable,GameData.IGameLink{GameCore.ModelAnimation.Data.GameDataAnimationSequence})">
            <summary>
            播放动画序列，使用游戏数据中的触发事件设置
            </summary>
            <param name="actor">可播放动画的Actor</param>
            <param name="link">动画序列的游戏数据链接</param>
            <returns>创建的动画序列对象，如果失败则返回null</returns>
        </member>
        <member name="M:GameCore.ActorSystem.IActorAnimationPlayableExtensions.PlayAnimationSequence(GameCore.ActorSystem.IActorAnimationPlayable,GameData.IGameLink{GameCore.ModelAnimation.Data.GameDataAnimationSequence},System.Boolean)">
            <summary>
            播放动画序列，指定是否触发事件
            </summary>
            <param name="actor">可播放动画的Actor</param>
            <param name="link">动画序列的游戏数据链接</param>
            <param name="triggerEvents">是否触发动画序列中的事件</param>
            <returns>创建的动画序列对象，如果失败则返回null</returns>
        </member>
        <member name="M:GameCore.ActorSystem.IActorAnimationPlayableExtensions.PlayAnimation(GameCore.ActorSystem.IActorAnimationPlayable,GameCore.ResourceType.Animation,EngineInterface.BaseType.AnimationPlayParam)">
            <summary>
            播放动画文件
            </summary>
            <param name="actor">可播放动画的Actor</param>
            <param name="animationFile">动画文件资源</param>
            <param name="param">可选的动画播放参数</param>
            <returns>创建的动画对象，如果失败则返回null</returns>
        </member>
        <member name="M:GameCore.ActorSystem.IActorAnimationPlayableExtensions.PlayAnimation(GameCore.ActorSystem.IActorAnimationPlayable,GameData.IGameLink{GameCore.ModelAnimation.Data.GameDataAnimationSimple})">
            <summary>
            播放动画，使用游戏数据链接
            </summary>
            <param name="actor">可播放动画的Actor</param>
            <param name="link">动画的游戏数据链接</param>
            <returns>创建的动画对象，如果失败则返回null</returns>
        </member>
        <member name="T:GameCore.ActorSystem.IActorColorizable">
            <summary>
            Defines the interface for actors that support color-based visual effects.
            </summary>
            <remarks>
            IActorColorizable provides a standardized way to apply color effects to game actors,
            including temporary highlights and persistent tint colors. This supports selection indicators, 
            status effects, damage indicators, spell effects, team colors, material adjustments, and other 
            visual feedback mechanisms. The interface supports both static colors and animated color transitions, 
            with the ability to layer multiple effects using weighted aggregation. All color effects use HDR 
            (High Dynamic Range) colors for enhanced visual fidelity.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorColorizable.HighlightAggregator">
            <summary>
            Gets the arithmetic aggregator used to combine multiple highlight effects.
            </summary>
            <value>The aggregator that manages and blends multiple highlight colors, or null if not initialized.</value>
            <remarks>
            The highlight aggregator combines multiple highlight effects using arithmetic blending operations.
            This allows for complex visual effects where multiple systems can contribute to the final
            highlight appearance simultaneously, such as selection + damage + spell effect highlights.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.AnimateHighlight(GameCore.Drawing.HdrColor,GameCore.Drawing.HdrColor,System.TimeSpan,System.Boolean,System.Nullable{GameCore.Animation.Enum.RepeatBehavior},System.Object,System.Double)">
            <summary>
            Creates an animated highlight transition between two specific colors.
            </summary>
            <param name="from">The starting color of the highlight animation.</param>
            <param name="to">The ending color of the highlight animation.</param>
            <param name="blendTime">The duration of the color transition.</param>
            <param name="autoReverse">Whether to automatically reverse the animation back to the starting color.</param>
            <param name="repeatBehavior">The repeat behavior for the animation (e.g., loop count, infinite).</param>
            <param name="key">Optional identifier for this highlight effect, used for later removal or modification.</param>
            <param name="weight">The blending weight of this highlight relative to others (default: 1.0).</param>
            <returns>The created animation object for controlling the highlight transition.</returns>
            <remarks>
            This method creates a smooth color transition animation for visual effects like pulsing damage indicators,
            charging spell effects, or selection feedback. The animation can be configured to loop, reverse, or play once.
            Multiple animations can run simultaneously with different weights affecting the final appearance.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.AnimateHighlight(GameCore.Drawing.HdrColor,System.TimeSpan,System.Boolean,System.Nullable{GameCore.Animation.Enum.RepeatBehavior},System.Object,System.Double)">
            <summary>
            Creates an animated highlight transition from the current color to a target color.
            </summary>
            <param name="color">The target color for the highlight animation.</param>
            <param name="blendTime">The duration of the color transition.</param>
            <param name="autoReverse">Whether to automatically reverse the animation back to the starting color.</param>
            <param name="repeatBehavior">The repeat behavior for the animation (e.g., loop count, infinite).</param>
            <param name="key">Optional identifier for this highlight effect, used for later removal or modification.</param>
            <param name="weight">The blending weight of this highlight relative to others (default: 1.0).</param>
            <returns>The created animation object for controlling the highlight transition.</returns>
            <remarks>
            This is a convenience method that animates from the current highlight state to the specified color.
            It's particularly useful for creating highlight effects that build upon existing highlights
            rather than replacing them entirely.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.ClearAllHighlights">
            <summary>
            Removes all highlight effects from this actor.
            </summary>
            <remarks>
            This method clears all active highlight effects, including both static highlights and
            running animations. It effectively resets the actor to its default appearance.
            Use this when you need to completely clear all visual highlighting effects.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.ClearHighlight(System.Object)">
            <summary>
            Removes a specific highlight effect identified by its key.
            </summary>
            <param name="key">The identifier of the highlight effect to remove.</param>
            <remarks>
            This method removes only the highlight effect associated with the specified key,
            leaving other highlight effects intact. This allows for selective removal of
            specific effects while maintaining others, such as removing a damage indicator
            while keeping a selection highlight active.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.InitializeHighlightAggregator">
            <summary>
            Initializes the highlight aggregator system for this actor.
            </summary>
            <remarks>
            This method must be called before using any highlight functionality. It sets up
            the internal systems needed to manage and blend multiple highlight effects.
            After calling this method, the HighlightAggregator property will be non-null
            and ready for use.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.SetHighlight(GameCore.Drawing.HdrColor,System.Object,System.Double)">
            <summary>
            Sets a static highlight color for this actor.
            </summary>
            <param name="color">The highlight color to apply.</param>
            <param name="key">Optional identifier for this highlight effect.</param>
            <param name="weight">The blending weight of this highlight relative to others (default: 1.0).</param>
            <remarks>
            This method applies a static (non-animated) highlight color to the actor.
            Unlike animated highlights, static highlights remain constant until explicitly
            changed or removed. Multiple static highlights can be applied simultaneously
            and will be blended together based on their weights.
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorColorizable.TintColorAggregators">
            <summary>
            Gets the arithmetic aggregators used to combine multiple tint color effects for different tint types.
            </summary>
            <value>A dictionary mapping tint types to their respective aggregators, or null if not initialized.</value>
            <remarks>
            The tint color system supports multiple tint types, allowing different blending modes for various visual effects. 
            Each tint type has its own arithmetic aggregator that combines multiple tint effects using arithmetic blending operations. 
            Factor type provides multiplicative blending while Override type provides alpha-composited blending.
            This design allows for separate management of different visual effect categories.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.AnimateTintColor(GameCore.Drawing.HdrColor,GameCore.ActorSystem.Enum.TintColorType,System.TimeSpan,System.Boolean,System.Nullable{GameCore.Animation.Enum.RepeatBehavior},System.Object,System.Double)">
            <summary>
            Creates an animated tint color transition from the current color to a target color using the specified tint type.
            </summary>
            <param name="color">The target color for the tint animation.</param>
            <param name="tintColorType">The tint blending mode to use (default: Factor for multiplicative blending).</param>
            <param name="blendTime">The duration of the color transition.</param>
            <param name="autoReverse">Whether to automatically reverse the animation back to the starting color.</param>
            <param name="repeatBehavior">The repeat behavior for the animation (e.g., loop count, infinite).</param>
            <param name="key">Optional identifier for this tint effect, used for later removal or modification.</param>
            <param name="weight">The blending weight of this tint relative to others (default: 1.0).</param>
            <returns>The created animation object for controlling the tint transition.</returns>
            <remarks>
            This convenience method animates from the current tint state to the specified color using the specified blending mode.
            It's useful for creating smooth transitions when changing team colors, status indicators,
            or other persistent color effects. Different tint types provide various visual blending behaviors.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.AnimateTintColor(GameCore.Drawing.HdrColor,GameCore.Drawing.HdrColor,GameCore.ActorSystem.Enum.TintColorType,System.TimeSpan,System.Boolean,System.Nullable{GameCore.Animation.Enum.RepeatBehavior},System.Object,System.Double)">
            <summary>
            Creates an animated tint color transition between two specific colors using the specified tint type.
            </summary>
            <param name="from">The starting color of the tint animation.</param>
            <param name="to">The ending color of the tint animation.</param>
            <param name="tintColorType">The tint blending mode to use (default: Factor for multiplicative blending).</param>
            <param name="blendTime">The duration of the color transition.</param>
            <param name="autoReverse">Whether to automatically reverse the animation back to the starting color.</param>
            <param name="repeatBehavior">The repeat behavior for the animation (e.g., loop count, infinite).</param>
            <param name="key">Optional identifier for this tint effect, used for later removal or modification.</param>
            <param name="weight">The blending weight of this tint relative to others (default: 1.0).</param>
            <returns>The created animation object for controlling the tint transition.</returns>
            <remarks>
            This method creates a smooth color transition animation between two specific colors using the specified blending mode.
            It's useful for creating complex visual effects like pulsing damage indicators, charging spell effects,
            or selection feedback with precise color control.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.ClearTintColor">
            <summary>
            Completely disables all tint color effects for all tint types on this actor.
            </summary>
            <remarks>
            This method clears all active tint color effects across all tint types, including both static tints and
            running animations. It completely resets the actor's tint colors to their default state.
            Use this when you need to completely clear all persistent color modifications across the entire model.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.ResetTintColorByType(GameCore.ActorSystem.Enum.TintColorType)">
            <summary>
            Resets tint color effects for a specific tint type to their default state.
            </summary>
            <param name="tintColorType">The tint type to reset (default: Factor).</param>
            <remarks>
            This method removes all tint color effects for the specified tint type, including both static tints and
            running animations, while leaving other tint types intact. This allows for selective reset of specific
            blending modes while maintaining other color effects on the model.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.ClearTintColorByKey(System.Object,GameCore.ActorSystem.Enum.TintColorType)">
            <summary>
            Removes a specific tint color effect identified by its key from a specific tint type.
            </summary>
            <param name="key">The identifier of the tint color effect to remove.</param>
            <param name="tintColorType">The tint type to modify (default: Factor).</param>
            <remarks>
            This method removes only the tint color effect associated with the specified key from the specified tint type,
            leaving other tint effects intact. This allows for selective removal of specific color modifications
            while maintaining others, such as removing a health status tint while keeping team color active.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.InitializeTintColorAggregators">
            <summary>
            Initializes the tint color aggregator system for this actor.
            </summary>
            <remarks>
            This method must be called before using any tint color functionality. It sets up
            the internal systems needed to manage and blend multiple tint color effects across different tint types.
            After calling this method, the TintColorAggregators property will be non-null and ready for use.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.SetTintColor(GameCore.Drawing.HdrColor,GameCore.ActorSystem.Enum.TintColorType,System.Object,System.Double)">
            <summary>
            Sets a static tint color for this actor using the specified tint type.
            </summary>
            <param name="color">The tint color to apply.</param>
            <param name="tintColorType">The tint blending mode to use (default: Factor for multiplicative blending).</param>
            <param name="key">Optional identifier for this tint effect.</param>
            <param name="weight">The blending weight of this tint relative to others (default: 1.0).</param>
            <remarks>
            This method applies a static (non-animated) tint color using the specified blending mode.
            Tint colors are persistent modifications that remain active until explicitly changed or removed.
            Multiple tint colors can be applied simultaneously and will be blended together based on their weights.
            Different tint types provide various visual blending behaviors. Common uses include team colors,
            health status indicators, and material property adjustments.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.InitializeColorAggregators">
            <summary>
            Initializes both highlight and tint color aggregator systems for this actor.
            </summary>
            <remarks>
            This convenience method initializes both color effect systems in one call.
            It's equivalent to calling both InitializeHighlightAggregator() and 
            InitializeTintColorAggregators(). After calling this method, both aggregator
            properties will be non-null and ready for use.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorColorizable.ClearAllColorEffects">
            <summary>
            Removes all color effects from this actor, including both highlights and tint colors.
            </summary>
            <remarks>
            This method clears all active color effects, resetting the actor to its default
            appearance. It's equivalent to calling both ClearAllHighlights() and ClearTintColor().
            Use this for complete visual reset or when changing contexts that require clean state.
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.IActorPlayable">
            <summary>
            Defines an interface for actors that can be played, controlled, or have their playback speed adjusted.
            </summary>
            <remarks>
            This interface extends basic actor functionality to support playback control, typically used for
            animations, effects, or other time-based actors that can be started, stopped, or have their
            timing modified. It's commonly implemented by actors that contain animations or sequences.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorPlayable.Play">
            <summary>
            Starts playing the actor's animation, effect, or sequence.
            </summary>
            <returns><c>true</c> if playback was successfully started; otherwise, <c>false</c>.</returns>
            <remarks>
            This method initiates the actor's playback functionality, such as starting animations,
            sound effects, or other time-based sequences. The return value indicates whether
            the play operation was successful.
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorPlayable.SetPlaySpeed(System.Single)">
            <summary>
            Sets the playback speed multiplier for the actor's animation or sequence.
            </summary>
            <param name="speed">The speed multiplier (1.0 = normal speed, 0.5 = half speed, 2.0 = double speed).</param>
            <returns><c>true</c> if the speed was successfully set; otherwise, <c>false</c>.</returns>
            <remarks>
            This method allows dynamic control of playback timing, enabling effects like slow motion
            or fast-forward. A speed of 1.0 represents normal playback, values less than 1.0 slow down
            playback, and values greater than 1.0 speed up playback.
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.IActorScope">
            <summary>
            定义 Actor 作用域接口，管理一组相关 Actor 的生命周期和行为
            </summary>
            <remarks>
            Actor 作用域是一个容器，用于管理一组逻辑上相关的 Actor 对象。它提供了统一的
            生命周期管理、可见性控制、动作执行等功能。作用域可以是瞬态的或持久的，并支持
            在客户端和服务端之间的同步。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.Id">
            <summary>
            获取作用域的唯一标识符
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.Context">
            <summary>
            获取作用域的上下文信息
            </summary>
            <remarks>
            上下文包含作用域的配置、父级信息、以及其他运行时状态。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.MainActor">
            <summary>
            获取作用域的主要 Actor（如果存在）
            </summary>
            <remarks>
            主要 Actor 通常是作用域的核心对象，其他 Actor 可能围绕它进行操作。
            对于作用域拥有者，返回其自身作用域的同步 Actor。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.Host">
            <summary>
            获取作用域的宿主 Actor
            </summary>
            <remarks>
            宿主 Actor 是承载此作用域的父级 Actor，通常用于确定作用域的位置和变换。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.IsTransient">
            <summary>
            获取一个值，指示作用域是否为瞬态
            </summary>
            <remarks>
            瞬态作用域通常用于临时效果，生命周期较短，而非瞬态作用域则用于持久对象。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.ImpactActors">
            <summary>
            获取撞击时要创建的 Actor 数据链接列表
            </summary>
            <remarks>
            当执行撞击操作时，这些 Actor 将被创建并添加到作用域中，通常用于视觉效果或音效。
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorScope.Kill">
            <summary>
            终止作用域，播放死亡动画并执行清理
            </summary>
            <remarks>
            与 <see cref="M:GameCore.ActorSystem.IActorScope.Destroy"/> 不同，此方法会播放适当的死亡动画和效果。
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorScope.Destroy">
            <summary>
            销毁作用域和其中的所有 Actor，不播放死亡动画
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.IActorScope.GetById(System.Int32)">
            <summary>
            根据 ID 获取作用域实例
            </summary>
            <param name="id">作用域的唯一标识符</param>
            <returns>对应的作用域实例，如果未找到则返回 <c>null</c></returns>
        </member>
        <member name="M:GameCore.ActorSystem.IActorScope.Add(GameCore.ActorSystem.Actor)">
            <summary>
            向作用域添加 Actor
            </summary>
            <param name="actor">要添加的 Actor</param>
            <returns>如果成功添加则返回 <c>true</c>；否则返回 <c>false</c></returns>
            <remarks>
            添加 Actor 时会处理附加、缩放、作用域分配等操作，并触发相应的事件回调。
            </remarks>
        </member>
        <member name="M:GameCore.ActorSystem.IActorScope.Remove(GameCore.ActorSystem.Actor)">
            <summary>
            从作用域移除 Actor
            </summary>
            <param name="actor">要移除的 Actor</param>
            <returns>如果成功移除则返回 <c>true</c>；否则返回 <c>false</c></returns>
        </member>
        <member name="M:GameCore.ActorSystem.IActorScope.HandleAction(GameCore.ActorSystem.Enum.ScopeAction)">
            <summary>
            处理作用域操作
            </summary>
            <param name="action">要处理的操作类型</param>
            <exception cref="T:System.ArgumentOutOfRangeException">当传入无效的操作类型时抛出</exception>
            <remarks>
            根据不同的操作类型执行相应的逻辑，如创建撞击效果 Actor 等。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.AttachSite">
            <summary>
            获取附加点 Actor
            </summary>
            <remarks>
            通常与主要 Actor 相同，用作其他 Actor 的附加目标。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.SourceSite">
            <summary>
            获取源 Actor 的附加点，延迟创建
            </summary>
            <remarks>
            源 Actor 附加点用于标识作用域的源头位置，只在需要时创建。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.EnsuredSourceSite">
            <summary>
            获取确保有效的源 Actor 附加点
            </summary>  
            <remarks>
            与 <see cref="P:GameCore.ActorSystem.IActorScope.SourceSite"/> 不同，此属性保证返回有效的 Actor 实例，如果不存在则会创建。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScope.ClientActors">
            <summary>
            获取客户端 Actor 集合
            </summary>
            <remarks>
            包含当前作用域中所有客户端 Actor 的集合，用于管理和遍历。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.IActorScopeContext">
            <summary>
            定义 Actor 作用域上下文接口，提供作用域运行所需的环境信息和配置
            </summary>
            <remarks>
            作用域上下文包含了作用域运行所需的所有环境信息，包括目标、来源、配置数据、
            位置信息、缩放参数等。它为作用域的创建和管理提供了统一的数据访问接口。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.IsValid">
            <summary>
            获取一个值，指示此上下文是否有效
            </summary>
            <remarks>
            当目标和来源都不为 <c>null</c> 时，上下文被认为是有效的。
            此属性使用 MemberNotNullWhen 特性来提供编译时的空值检查保证。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.IsTransient">
            <summary>
            获取一个值，指示此上下文是否为瞬态
            </summary>
            <remarks>
            瞬态上下文通常用于临时效果和短期存在的作用域。
            默认返回 <c>false</c>，派生类可以重写此属性以提供不同的行为。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Target">
            <summary>
            获取作用域的目标对象
            </summary>
            <remarks>
            目标对象是作用域操作的主要对象，通常决定了作用域的位置和行为。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Source">
            <summary>
            获取作用域的来源对象
            </summary>
            <remarks>
            默认情况下，来源对象与目标对象相同。派生类可以重写此属性以提供不同的来源。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Link">
            <summary>
            获取作用域拥有者的数据链接
            </summary>
            <remarks>
            此链接指向定义作用域行为和配置的数据对象。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.OverrideLink">
            <summary>
            获取作用域覆盖配置的数据链接
            </summary>
            <remarks>
            覆盖链接可以提供特殊的配置来修改作用域的默认行为。
            默认返回 <c>null</c>，表示没有覆盖配置。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Cache">
            <summary>
            获取缓存的作用域拥有者数据
            </summary>
            <remarks>
            从数据链接中获取的实际配置数据，用于作用域的行为定义。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Player">
            <summary>
            获取拥有此作用域的玩家
            </summary>
            <remarks>
            用于确定作用域的所有权和权限管理。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Scale">
            <summary>
            获取作用域的缩放因子
            </summary>
            <remarks>
            用于调整作用域中 Actor 的整体大小。如果为 <c>null</c>，则使用默认缩放。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Volume">
            <summary>
            获取作用域的体积参数
            </summary>
            <remarks>
            用于 3D 缩放计算，定义作用域在三个维度上的大小。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Radius">
            <summary>
            获取作用域的半径参数
            </summary>
            <remarks>
            用于径向缩放计算。默认返回 <c>null</c>，派生类可以重写以提供半径信息。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Position">
            <summary>
            获取作用域在场景中的位置
            </summary>
            <remarks>
            基于目标对象的位置确定作用域的空间坐标。如果上下文无效，会抛出异常。
            </remarks>
            <exception cref="T:System.IO.InvalidDataException">当上下文无效时抛出</exception>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Host">
            <summary>
            获取作用域的宿主 Actor
            </summary>
            <remarks>
            宿主 Actor 用于作用域的附加和位置同步。通常是目标对象的同步 Actor 接口。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.Facing">
            <summary>
            获取作用域的朝向角度
            </summary>
            <remarks>
            定义作用域在空间中的旋转方向，影响其中 Actor 的排列和朝向。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeContext.ImpactActors">
            <summary>
            获取撞击时要创建的 Actor 列表
            </summary>
            <remarks>
            优先使用覆盖配置中的撞击 Actor，如果没有覆盖则使用缓存配置中的撞击 Actor。
            这些 Actor 会在执行撞击操作时被创建和管理。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.IActorScopeOwner">
            <summary>
            定义 Actor 作用域拥有者接口，管理和创建作用域实例
            </summary>
            <remarks>
            作用域拥有者负责管理其关联的 Actor 作用域的生命周期，包括创建、初始化和维护作用域。
            它决定何时需要创建作用域，以及创建何种类型的作用域（瞬态或持久）。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeOwner.SelfScope">
            <summary>
            获取自身作为作用域的实例
            </summary>
            <remarks>
            当对象本身就是一个作用域时，返回自身的作用域接口；否则返回 <c>null</c>。
            </remarks>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeOwner.StandaloneScopeLink">
            <summary>
            当对象本身不是作用域时，获取其独立的作用域链接
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.IActorScopeOwner.ActorScope">
            <summary>
            获取或设置关联的 Actor 作用域
            </summary>
            <remarks>
            存储由此拥有者创建和管理的作用域实例。内部设置器允许系统管理作用域的分配。
            </remarks>
        </member>
        <member name="T:GameCore.ActorSystem.IActorTimelineAsset">
            <summary>
            Stands for actors that have timeline lifespan, and can trigger timed events, such as sounds.
            </summary>
        </member>
        <member name="E:GameCore.ActorSystem.IActorTimelineAsset.TimelineEventTriggered">
            <summary>
            Occurs when a timed event is triggered, providing the event name and a boolean indicating whether the event was just started or completed. true indicates start, false indicates completion.
            </summary>
            <remarks>This event is raised whenever a specific timed action is completed. Subscribers can use the
            provided parameters to handle the event appropriately.</remarks>
        </member>
        <member name="T:GameCore.ActorSystem.Struct.GridAxis">
            <summary>
            Represents the axis vectors that define the orientation and scale of a grid in 3D space.
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridAxis.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.ActorSystem.Struct.GridAxis"/> struct.
            </summary>
            <param name="x">The X-axis vector defining the direction and scale of the grid's X dimension.</param>
            <param name="y">The Y-axis vector defining the direction and scale of the grid's Y dimension.</param>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridAxis.X">
            <summary>
            Gets the X-axis vector that defines the direction and scale of the grid's X dimension.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridAxis.Y">
            <summary>
            Gets the Y-axis vector that defines the direction and scale of the grid's Y dimension.
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.Struct.GridBounds">
            <summary>
            Represents a grid bounds with X and Y dimensions in grid cell units.
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridBounds.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.ActorSystem.Struct.GridBounds"/> struct.
            </summary>
            <param name="x">The X offset of the grid bounds origin in world coordinates.</param>
            <param name="y">The Y offset of the grid bounds origin in world coordinates.</param>
            <param name="dimensionX">The size of the grid bounds in X direction in grid cells.</param>
            <param name="dimensionY">The size of the grid bounds in Y direction in grid cells.</param>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridBounds.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.ActorSystem.Struct.GridBounds"/> struct from a Rectangle.
            </summary>
            <param name="rect">The rectangle to convert from.</param>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridBounds.OffsetX">
            <summary>
            Gets the X offset of the grid bounds origin in world coordinates.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridBounds.OffsetY">
            <summary>
            Gets the Y offset of the grid bounds origin in world coordinates.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridBounds.DimensionX">
            <summary>
            Gets the size of the grid bounds in X direction in grid cells.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridBounds.DimensionY">
            <summary>
            Gets the size of the grid bounds in Y direction in grid cells.
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridBounds.Contains(GameCore.ActorSystem.Struct.GridIndex)">
            <summary>
            Checks if the specified grid index is within this bounds.
            </summary>
            <param name="index">The grid index to check.</param>
            <returns>True if the index is within the bounds; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridBounds.Contains(System.Int32,System.Int32)">
            <summary>
            Checks if the specified coordinates are within this bounds.
            </summary>
            <param name="x">The X coordinate to check.</param>
            <param name="y">The Y coordinate to check.</param>
            <returns>True if the coordinates are within the bounds; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridBounds.op_Implicit(GameCore.ActorSystem.Struct.GridBounds)~System.Drawing.Rectangle">
            <summary>
            Implicitly converts a <see cref="T:GameCore.ActorSystem.Struct.GridBounds"/> to a <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="bounds">The grid bounds to convert.</param>
            <returns>A rectangle with the same coordinates and dimensions.</returns>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridBounds.op_Implicit(System.Drawing.Rectangle)~GameCore.ActorSystem.Struct.GridBounds">
            <summary>
            Implicitly converts a <see cref="T:System.Drawing.Rectangle"/> to a <see cref="T:GameCore.ActorSystem.Struct.GridBounds"/>.
            </summary>
            <param name="rect">The rectangle to convert.</param>
            <returns>A grid bounds with the same coordinates and dimensions.</returns>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridBounds.ToString">
            <summary>
            Returns a string representation of the grid bounds.
            </summary>
            <returns>A string in the format "GridBounds(OffsetX, OffsetY, DimensionX, DimensionY)".</returns>
        </member>
        <member name="T:GameCore.ActorSystem.Struct.GridIndex">
            <summary>
            Represents a grid index with X and Y coordinates for addressing grid cells.
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.ActorSystem.Struct.GridIndex"/> struct.
            </summary>
            <param name="x">The X coordinate of the grid index.</param>
            <param name="y">The Y coordinate of the grid index.</param>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridIndex.X">
            <summary>
            Gets the X coordinate of the grid index.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridIndex.Y">
            <summary>
            Gets the Y coordinate of the grid index.
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridIndex.op_Implicit(GameCore.ActorSystem.Struct.GridIndex)~System.Drawing.Point">
            <summary>
            Implicitly converts a <see cref="T:GameCore.ActorSystem.Struct.GridIndex"/> to a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="index">The grid index to convert.</param>
            <returns>A point with the same X and Y coordinates.</returns>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridIndex.op_Implicit(System.Drawing.Point)~GameCore.ActorSystem.Struct.GridIndex">
            <summary>
            Implicitly converts a <see cref="T:System.Drawing.Point"/> to a <see cref="T:GameCore.ActorSystem.Struct.GridIndex"/>.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>A grid index with the same X and Y coordinates.</returns>
        </member>
        <member name="T:GameCore.ActorSystem.Struct.IGridStateManager">
            <summary>
            Interface for managing grid cell states.
            </summary>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.IGridStateManager.Item(GameCore.ActorSystem.Struct.GridIndex)">
            <summary>
            Gets or sets the state of a specific grid cell.
            </summary>
            <param name="index">The grid index of the cell.</param>
            <returns>The state value of the cell, or 0 if not set.</returns>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.IGridStateManager.IsValidIndex(GameCore.ActorSystem.Struct.GridIndex)">
            <summary>
            Checks if the specified grid index is valid.
            </summary>
            <param name="index">The grid index to validate.</param>
            <returns>True if the index is valid; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.IGridStateManager.Clear">
            <summary>
            Clears all grid states by resetting them to default value (0) and clearing the internal collection.
            </summary>
        </member>
        <member name="T:GameCore.ActorSystem.Struct.GridState">
            <summary>
            Manages the state of grid cells for an ActorGrid.
            </summary>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridState.#ctor(GameCore.ActorSystem.ActorGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.ActorSystem.Struct.GridState"/> class.
            </summary>
            <param name="actorGrid">The actor grid that owns this state manager.</param>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridState.#ctor(System.Func{GameCore.ActorSystem.Struct.GridIndex,System.Int32,System.Boolean},System.Func{GameCore.ActorSystem.Struct.GridIndex,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.ActorSystem.Struct.GridState"/> class with custom callbacks.
            </summary>
            <param name="updateCallback">Callback function to update the visual representation.</param>
            <param name="validationCallback">Optional callback function to validate grid indices.</param>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridState.Item(GameCore.ActorSystem.Struct.GridIndex)">
            <inheritdoc/>
        </member>
        <member name="P:GameCore.ActorSystem.Struct.GridState.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the state of a specific grid cell.
            </summary>
            <param name="x">The x index of the cell.</param>
            <param name="y">The y index of the cell.</param>
            <returns>The state value of the cell, or 0 if not set.</returns>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridState.IsValidIndex(GameCore.ActorSystem.Struct.GridIndex)">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.ActorSystem.Struct.GridState.Clear">
            <inheritdoc/>
        </member>
        <member name="T:GameCore.AISystem.Data.GameDataAINodeParallel">
            <summary>
            并行节点
            <para>同时执行所有子节点，根据成功/失败策略决定整体结果</para>
            </summary>
            <remarks>
            <para><strong>执行逻辑</strong>：</para>
            <list type="bullet">
            <item><description>同时执行所有子节点（不考虑执行顺序）</description></item>
            <item><description>根据成功策略和失败策略决定整体结果</description></item>
            <item><description>即使某些子节点失败，其他子节点仍会继续执行</description></item>
            </list>
            <para><strong>成功策略</strong>：</para>
            <list type="bullet">
            <item><description><see cref="F:GameCore.AISystem.Data.ParallelPolicy.RequireOne"/>：任意一个子节点成功即返回成功</description></item>
            <item><description><see cref="F:GameCore.AISystem.Data.ParallelPolicy.RequireAll"/>：所有子节点都成功才返回成功</description></item>
            </list>
            <para><strong>失败策略</strong>：</para>
            <list type="bullet">
            <item><description><see cref="F:GameCore.AISystem.Data.ParallelPolicy.RequireOne"/>：任意一个子节点失败即返回失败</description></item>
            <item><description><see cref="F:GameCore.AISystem.Data.ParallelPolicy.RequireAll"/>：所有子节点都失败才返回失败</description></item>
            </list>
            <para><strong>使用场景</strong>：</para>
            <list type="bullet">
            <item><description>同时监听多个条件（如血量低 OR 敌人接近）</description></item>
            <item><description>并行执行多个独立的AI行为</description></item>
            <item><description>同时尝试多种策略</description></item>
            <item><description>复合条件检查（如移动 AND 攻击）</description></item>
            </list>
            <para><strong>与其他节点的区别</strong>：</para>
            <list type="bullet">
            <item><description><see cref="T:GameCore.AISystem.Data.GameDataAINodeSelect"/>：顺序尝试，任一成功就停止</description></item>
            <item><description><see cref="T:GameCore.AISystem.Data.GameDataAINodeSequence"/>：顺序执行，任一失败就停止</description></item>
            <item><description><see cref="T:GameCore.AISystem.Data.GameDataAINodeParallel"/>：并行执行，根据策略决定结果</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataAINodeParallel.Nodes">
            <summary>
            子节点列表
            <para>所有节点将同时执行，不考虑列表顺序</para>
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataAINodeParallel.SuccessPolicy">
            <summary>
            成功策略
            <para>决定什么情况下并行节点返回成功</para>
            </summary>
            <value>
            <see cref="F:GameCore.AISystem.Data.ParallelPolicy.RequireOne"/>：任意一个子节点成功即返回成功（默认）<br/>
            <see cref="F:GameCore.AISystem.Data.ParallelPolicy.RequireAll"/>：所有子节点都成功才返回成功
            </value>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataAINodeParallel.FailurePolicy">
            <summary>
            失败策略
            <para>决定什么情况下并行节点返回失败</para>
            </summary>
            <value>
            <see cref="F:GameCore.AISystem.Data.ParallelPolicy.RequireOne"/>：任意一个子节点失败即返回失败<br/>
            <see cref="F:GameCore.AISystem.Data.ParallelPolicy.RequireAll"/>：所有子节点都失败才返回失败（默认）
            </value>
        </member>
        <member name="T:GameCore.AISystem.Data.ParallelPolicy">
            <summary>
            并行节点策略枚举
            <para>定义并行节点如何处理子节点的成功/失败条件</para>
            </summary>
        </member>
        <member name="F:GameCore.AISystem.Data.ParallelPolicy.RequireOne">
            <summary>
            要求一个：任意一个子节点满足条件即可
            <para>用于成功策略时：任一成功即成功</para>
            <para>用于失败策略时：任一失败即失败</para>
            </summary>
        </member>
        <member name="F:GameCore.AISystem.Data.ParallelPolicy.RequireAll">
            <summary>
            要求全部：所有子节点都必须满足条件
            <para>用于成功策略时：全部成功才成功</para>
            <para>用于失败策略时：全部失败才失败</para>
            </summary>
        </member>
        <member name="T:GameCore.AISystem.Data.GameDataAINodeSelect">
            <summary>
            选择节点
            任意一个子节点返回Ok则返回Ok，否则返回错误
            </summary>
        </member>
        <member name="T:GameCore.AISystem.Data.GameDataAINodeSequence">
            <summary>
            序列节点
            <para>依次执行所有子节点，所有子节点都返回Ok才返回Ok，任何一个失败则立即返回错误</para>
            </summary>
            <remarks>
            <para><strong>执行逻辑</strong>：</para>
            <list type="bullet">
            <item><description>按顺序执行每个子节点</description></item>
            <item><description>如果某个子节点返回失败，立即停止执行并返回该错误</description></item>
            <item><description>只有当所有子节点都成功时，才返回成功</description></item>
            </list>
            <para><strong>使用场景</strong>：</para>
            <list type="bullet">
            <item><description>实现"先A然后B然后C"的顺序逻辑</description></item>
            <item><description>组合多个必须按顺序完成的动作</description></item>
            <item><description>例如：扫描敌人 → 设置焦点 → 施法攻击</description></item>
            </list>
            <para><strong>与Select节点的区别</strong>：</para>
            <list type="bullet">
            <item><description><see cref="T:GameCore.AISystem.Data.GameDataAINodeSelect"/>：任意一个成功就返回成功（OR逻辑）</description></item>
            <item><description><see cref="T:GameCore.AISystem.Data.GameDataAINodeSequence"/>：所有节点都必须成功才返回成功（AND逻辑）</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataAINodeSequence.Nodes">
            <summary>
            子节点列表
            <para>按照列表顺序依次执行，所有节点都必须成功</para>
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataAINodeValidateCast.Ability">
            <summary>
            Specific ability to cast. If null, will automatically find valid abilities.
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataAINodeValidateCast.IsAcquired">
            <summary>
            Whether this is an acquired cast (auto-cast/recast behavior)
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataAINodeValidateCast.DoRecast">
            <summary>
            Whether to enable recasting behavior
            </summary>
        </member>
        <member name="T:GameCore.AISystem.Data.GameDataAINodeValidateFocus">
            <summary>
            AI节点：设置焦点目标
            <para>用于AI系统中设置或清除当前的焦点目标。焦点目标通常用于AI的持续关注和决策。</para>
            </summary>
            <remarks>
            <para><strong>目标处理</strong>：</para>
            <list type="bullet">
            <item><description>如果指定了目标，将该目标设置为AI的焦点目标</description></item>
            <item><description>如果目标为空，将清除当前的焦点目标（设置为null）</description></item>
            <item><description>这种设计允许AI在不同情况下灵活地管理注意力</description></item>
            </list>
            <para><strong>使用场景</strong>：</para>
            <list type="bullet">
            <item><description>设置优先攻击目标</description></item>
            <item><description>标记需要持续关注的敌人</description></item>
            <item><description>清除过期或无效的焦点目标</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataAINodeValidateScan.IgnoreLeash">
            <summary>
            Whether to ignore leash restrictions when scanning for targets
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.AutoDisposeOnEmpty">
            <summary>
            If the wave AI will be disposed when all units are removed
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.InCombatMinimalDuration">
            <summary>
            The minimal duration of the wave AI in combat
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.CombatLeash">
            <summary>
            The AI unit will not move further than this distance from the reset point in combat
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.CombatResetRange">
            <summary>
            The max distance between the AI unit and its reset point
            The AI unit will move back to the reset point if it is further than this distance
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.WaveLeash">
            <summary>
            Used for group AI, the max distance between the group and the leader
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.EnableCombat">
            <summary>
            If the wave AI units will try to enter combat when enemy is scanned in AIThinkTree
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.Type">
            <summary>
            The type of wave behavior (Guard, Move, Patrol)
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.MoveHysteresisFactor">
            <summary>
            Hysteresis factor for Move mode to prevent oscillation at range boundaries.
            When switching from WaveAI to AIThinkTree control, the threshold becomes:
            MinimalApproachRange * MoveHysteresisFactor (default 0.7)
            This creates a buffer zone to ensure smooth control transitions.
            </summary>
        </member>
        <member name="P:GameCore.AISystem.Data.GameDataWaveAI.MinControlDuration">
            <summary>
            Minimum time (in seconds) that each AI system must maintain control
            before allowing a switch to prevent rapid oscillation between AI systems.
            </summary>
        </member>
        <member name="T:GameCore.Animation.AnimatableVector2">
            <summary>
            Represents a 2D vector that supports arithmetic operations and can be used in animation contexts.
            </summary>
            <remarks>This struct provides arithmetic operators for combining and scaling vectors, as well as implicit
            conversions to and from <see cref="T:System.Numerics.Vector2"/>. It is designed to be used in scenarios where animatable 2D vector
            values are required.</remarks>
            <param name="value"></param>
        </member>
        <member name="M:GameCore.Animation.AnimatableVector2.#ctor(System.Numerics.Vector2)">
            <summary>
            Represents a 2D vector that supports arithmetic operations and can be used in animation contexts.
            </summary>
            <remarks>This struct provides arithmetic operators for combining and scaling vectors, as well as implicit
            conversions to and from <see cref="T:System.Numerics.Vector2"/>. It is designed to be used in scenarios where animatable 2D vector
            values are required.</remarks>
            <param name="value"></param>
        </member>
        <member name="T:GameCore.Animation.AnimatableVector3">
            <summary>
            Represents a 3D vector that supports arithmetic operations and can be used in animation contexts.
            </summary>
            <remarks>This struct provides arithmetic operators for combining and scaling vectors, as well as implicit
            conversions to and from <see cref="T:System.Numerics.Vector3"/>. It is designed to be used in scenarios where animatable 3D vector
            values are required.</remarks>
            <param name="value"></param>
        </member>
        <member name="M:GameCore.Animation.AnimatableVector3.#ctor(System.Numerics.Vector3)">
            <summary>
            Represents a 3D vector that supports arithmetic operations and can be used in animation contexts.
            </summary>
            <remarks>This struct provides arithmetic operators for combining and scaling vectors, as well as implicit
            conversions to and from <see cref="T:System.Numerics.Vector3"/>. It is designed to be used in scenarios where animatable 3D vector
            values are required.</remarks>
            <param name="value"></param>
        </member>
        <member name="T:GameCore.Animation.ArithmeticAggregator`1">
            <summary>
            Aggregates multiple <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> instances, each identified by a unique key,
            and computes a final combined <typeparamref name="TArithmetic"/> value. Notifies subscribers via the
            <see cref="E:GameCore.Animation.ArithmeticAggregator`1.OnValueChanged"/> event when the aggregated value changes.
            </summary>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.#ctor(System.Action{System.Nullable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.Animation.ArithmeticAggregator`1"/> class and subscribes to value change notifications.
            </summary>
            <param name="onValueChanged">An action to invoke when the aggregated value changes.</param>
        </member>
        <member name="E:GameCore.Animation.ArithmeticAggregator`1.OnValueChanged">
            <summary>
            Occurs when the aggregated value changes.
            </summary>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.SetMixer(System.Object,GameCore.Animation.ArithmeticMixer{`0})">
            <summary>
            Sets or updates a <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> for the specified key and updates the aggregated value.
            </summary>
            <param name="key">The unique key identifying the mixer.</param>
            <param name="mixer">The <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> to associate with the key.</param>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.AnimateMixer(System.Object,GameCore.Animation.ArithmeticAnimation{GameCore.Animation.ArithmeticMixer{`0}})">
            <summary>
            Starts an animation for the specified key using the provided <see cref="!:ArithmeticAnimation&lt;ArithmeticMixer&lt;TArithmetic&gt;&gt;"/>.
            The animation will update the associated mixer value over time.
            </summary>
            <param name="key">The unique key identifying the mixer to animate.</param>
            <param name="animation">The animation to apply to the mixer.</param>
            <returns>The started animation.</returns>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.AnimateMixer(System.Object,GameCore.Animation.ArithmeticMixer{`0},System.TimeSpan,System.Boolean,System.Nullable{GameCore.Animation.Enum.RepeatBehavior})">
            <summary>
            Starts an animation that blends the mixer associated with the specified key to a target value over a given duration.
            </summary>
            <param name="key">The unique key identifying the mixer to animate.</param>
            <param name="blendTo">The target mixer value to blend to.</param>
            <param name="blendTime">The duration of the blend animation.</param>
            <param name="autoReverse">Whether the animation should automatically reverse when finished.</param>
            <param name="repeatBehavior">Specifies how the animation repeats. If <c>null</c>, a default repeat behavior is used.</param>
            <returns>The started animation.</returns>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.AnimateMixer(System.Object,GameCore.Animation.ArithmeticMixer{`0},GameCore.Animation.ArithmeticMixer{`0},System.TimeSpan,System.Boolean,System.Nullable{GameCore.Animation.Enum.RepeatBehavior})">
            <summary>
            Starts an animation that blends the mixer associated with the specified key from a starting value to a target value over a given duration.
            </summary>
            <param name="key">The unique key identifying the mixer to animate.</param>
            <param name="blendFrom">The starting mixer value for the animation.</param>
            <param name="blendTo">The target mixer value to blend to.</param>
            <param name="blendTime">The duration of the blend animation.</param>
            <param name="autoReverse">Whether the animation should automatically reverse when finished.</param>
            <param name="repeatBehavior">Specifies how the animation repeats. If <c>null</c>, a default repeat behavior is used.</param>
            <returns>The started animation.</returns>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.ClearAnimation(System.Object,GameCore.Animation.Enum.CancelBehavior)">
            <summary>
            Cancels and removes any running animation associated with the specified key.
            </summary>
            <param name="key">The unique key identifying the animation to clear.</param>
            <param name="cancelBehavior">Specifies how the animation should be canceled. Defaults to <see cref="F:GameCore.Animation.Enum.CancelBehavior.Hold"/>.</param>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.GetMixer(System.Object)">
            <summary>
            Retrieves the <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> associated with the specified key.
            </summary>
            <param name="key">The key used to locate the mixer. Must not be <see langword="null"/>.</param>
            <returns>The <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> associated with the specified key, or <see langword="null"/> if no mixer is found.</returns>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.RemoveMixer(System.Object)">
            <summary>
            Removes the <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> associated with the specified key and updates the aggregated value.
            </summary>
            <param name="key">The unique key identifying the mixer to remove.</param>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.ClearAll">
            <summary>
            Clears all active animations and resets the internal state.
            </summary>
            <remarks>This method cancels all currently running animations and removes them from the internal
            collection. After calling this method, the system will have no active animations or mixers.</remarks>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.GetFinalValue">
            <summary>
            Gets the final aggregated <typeparamref name="TArithmetic"/> value by combining all mixers.
            Returns <c>null</c> if there are no mixers.
            </summary>
            <returns>The aggregated <typeparamref name="TArithmetic"/> value, or <c>null</c> if none exist.</returns>
        </member>
        <member name="M:GameCore.Animation.ArithmeticAggregator`1.CalculateFinalValue">
            <summary>
            Gets the final aggregated <typeparamref name="TArithmetic"/> value by combining all mixers.
            Returns <c>null</c> if there are no mixers.
            </summary>
            <returns>The aggregated <typeparamref name="TArithmetic"/> value, or <c>null</c> if none exist.</returns>
        </member>
        <member name="P:GameCore.Animation.ArithmeticAnimation`1.EasingFunction">
            <summary>
            property for easing function, if null use linear interpolation.
            Will automatically be cleared when the animation is stopped.
            </summary>
        </member>
        <member name="P:GameCore.Animation.ArithmeticAnimation`1.OnUpdate">
            <summary>
            Gets or sets the action to be invoked when an update occurs. 
            Will automatically be cleared when the animation is stopped.
            </summary>
        </member>
        <member name="P:GameCore.Animation.ArithmeticAnimation`1.FromValueGetter">
            <summary>
            Only used if From is null. If set, this will be used to get the starting value of the animation.
            Will automatically be cleared when the animation is stopped.
            </summary>
        </member>
        <member name="T:GameCore.Animation.ArithmeticMixer`1">
            <summary>
            Represents a weighted value of a generic type <typeparamref name="TArithmetic"/> for mixing and aggregation.
            Provides methods and operators to combine multiple values with associated weights,
            enabling smooth blending and accumulation of any animatable value.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> struct with the specified value and weight.
            </remarks>
            <param name="value">The animatable value.</param>
            <param name="weight">The weight associated with the value. Defaults to 1.0.</param>
        </member>
        <member name="M:GameCore.Animation.ArithmeticMixer`1.#ctor(`0,System.Double)">
            <summary>
            Represents a weighted value of a generic type <typeparamref name="TArithmetic"/> for mixing and aggregation.
            Provides methods and operators to combine multiple values with associated weights,
            enabling smooth blending and accumulation of any animatable value.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> struct with the specified value and weight.
            </remarks>
            <param name="value">The animatable value.</param>
            <param name="weight">The weight associated with the value. Defaults to 1.0.</param>
        </member>
        <member name="F:GameCore.Animation.ArithmeticMixer`1.Value">
            <summary>
            The value being mixed or aggregated.
            </summary>
        </member>
        <member name="F:GameCore.Animation.ArithmeticMixer`1.Weight">
            <summary>
            Gets or sets the weight of the value. 0 means no contribution.
            </summary>
        </member>
        <member name="M:GameCore.Animation.ArithmeticMixer`1.op_Implicit(`0)~GameCore.Animation.ArithmeticMixer{`0}">
            <summary>
            Implicitly converts a <typeparamref name="TArithmetic"/> to an <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> with default weight.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:GameCore.Animation.ArithmeticMixer`1.Mix(GameCore.Animation.ArithmeticMixer{`0})">
            <summary>
            Mixes this value with another <see cref="T:GameCore.Animation.ArithmeticMixer`1"/>, producing a new weighted average value.
            </summary>
            <param name="other">The other mixer to combine with.</param>
            <returns>A new <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> representing the mixed value and combined weight.</returns>
        </member>
        <member name="M:GameCore.Animation.ArithmeticMixer`1.op_Implicit(GameCore.Animation.ArithmeticMixer{`0})~`0">
            <summary>
            Implicitly converts an <see cref="T:GameCore.Animation.ArithmeticMixer`1"/> to a <typeparamref name="TArithmetic"/> by returning its value.
            </summary>
            <param name="mixer">The mixer to convert.</param>
        </member>
        <member name="T:GameCore.Animation.ArithmeticNumber`1">
            <summary>
            Wraps numeric types with arithmetic operations to make them usable in <see cref="T:GameCore.Animation.ArithmeticMixer`1"/>,
            <see cref="T:GameCore.Animation.ArithmeticAnimation`1"/> and <see cref="T:GameCore.Animation.ArithmeticTuple`2"/>.
            For non-complex animations, consider using <see cref="T:GameCore.Animation.NumberAnimation`1"/> instead.
            </summary>
            <typeparam name="T">The underlying numeric type that implements <see cref="T:System.Numerics.INumber`1"/></typeparam>
        </member>
        <member name="M:GameCore.Animation.ArithmeticNumber`1.#ctor(`0)">
            <summary>
            Wraps numeric types with arithmetic operations to make them usable in <see cref="T:GameCore.Animation.ArithmeticMixer`1"/>,
            <see cref="T:GameCore.Animation.ArithmeticAnimation`1"/> and <see cref="T:GameCore.Animation.ArithmeticTuple`2"/>.
            For non-complex animations, consider using <see cref="T:GameCore.Animation.NumberAnimation`1"/> instead.
            </summary>
            <typeparam name="T">The underlying numeric type that implements <see cref="T:System.Numerics.INumber`1"/></typeparam>
        </member>
        <member name="T:GameCore.Animation.ArithmeticTuple`2">
            <summary>
            Represents a tuple of arithmetic animatable values that can be used in animation contexts.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
        </member>
        <member name="M:GameCore.Animation.ArithmeticTuple`2.#ctor(`0,`1)">
            <summary>
            Represents a tuple of arithmetic animatable values that can be used in animation contexts.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
        </member>
        <member name="T:GameCore.Animation.ArithmeticTuple`3">
            <summary>
            Represents a tuple of three arithmetic animatable values that can be used in animation contexts.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
        </member>
        <member name="M:GameCore.Animation.ArithmeticTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Represents a tuple of three arithmetic animatable values that can be used in animation contexts.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
        </member>
        <member name="T:GameCore.Animation.ArithmeticTuple`4">
            <summary>
            Represents a tuple of four arithmetic animatable values that can be used in animation contexts.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
        </member>
        <member name="M:GameCore.Animation.ArithmeticTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Represents a tuple of four arithmetic animatable values that can be used in animation contexts.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
        </member>
        <member name="T:GameCore.Animation.ArithmeticTuple`5">
            <summary>
            Represents a tuple of five arithmetic animatable values that can be used in animation contexts.
            This is a generic implementation for tuples with more than 4 elements.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
            <typeparam name="T5">The fifth animatable type</typeparam>
        </member>
        <member name="M:GameCore.Animation.ArithmeticTuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Represents a tuple of five arithmetic animatable values that can be used in animation contexts.
            This is a generic implementation for tuples with more than 4 elements.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
            <typeparam name="T5">The fifth animatable type</typeparam>
        </member>
        <member name="T:GameCore.Animation.ArithmeticTuple`6">
            <summary>
            Represents a tuple of six arithmetic animatable values that can be used in animation contexts.
            This is a generic implementation for tuples with more than 4 elements.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
            <typeparam name="T5">The fifth animatable type</typeparam>
            <typeparam name="T6">The sixth animatable type</typeparam>
        </member>
        <member name="M:GameCore.Animation.ArithmeticTuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Represents a tuple of six arithmetic animatable values that can be used in animation contexts.
            This is a generic implementation for tuples with more than 4 elements.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
            <typeparam name="T5">The fifth animatable type</typeparam>
            <typeparam name="T6">The sixth animatable type</typeparam>
        </member>
        <member name="T:GameCore.Animation.ArithmeticTuple`7">
            <summary>
            Represents a tuple of seven arithmetic animatable values that can be used in animation contexts.
            This is a generic implementation for tuples with more than 4 elements.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
            <typeparam name="T5">The fifth animatable type</typeparam>
            <typeparam name="T6">The sixth animatable type</typeparam>
            <typeparam name="T7">The seventh animatable type</typeparam>
        </member>
        <member name="M:GameCore.Animation.ArithmeticTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Represents a tuple of seven arithmetic animatable values that can be used in animation contexts.
            This is a generic implementation for tuples with more than 4 elements.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
            <typeparam name="T5">The fifth animatable type</typeparam>
            <typeparam name="T6">The sixth animatable type</typeparam>
            <typeparam name="T7">The seventh animatable type</typeparam>
        </member>
        <member name="T:GameCore.Animation.ArithmeticTuple`8">
            <summary>
            Represents a tuple of eight arithmetic animatable values that can be used in animation contexts.
            This is a generic implementation for tuples with more than 4 elements.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
            <typeparam name="T5">The fifth animatable type</typeparam>
            <typeparam name="T6">The sixth animatable type</typeparam>
            <typeparam name="T7">The seventh animatable type</typeparam>
            <typeparam name="T8">The eighth animatable type</typeparam>
        </member>
        <member name="M:GameCore.Animation.ArithmeticTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Represents a tuple of eight arithmetic animatable values that can be used in animation contexts.
            This is a generic implementation for tuples with more than 4 elements.
            </summary>
            <typeparam name="T1">The first animatable type</typeparam>
            <typeparam name="T2">The second animatable type</typeparam>
            <typeparam name="T3">The third animatable type</typeparam>
            <typeparam name="T4">The fourth animatable type</typeparam>
            <typeparam name="T5">The fifth animatable type</typeparam>
            <typeparam name="T6">The sixth animatable type</typeparam>
            <typeparam name="T7">The seventh animatable type</typeparam>
            <typeparam name="T8">The eighth animatable type</typeparam>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.BackEase">
            <summary>
                This class implements an easing function that backs up before going to the destination.
            </summary>
        </member>
        <member name="P:GameCore.Animation.EasingFunction.BackEase.Amplitude">
            <summary>
            Specifies how much the function will pull back
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.BounceEase">
            <summary>
                This class implements an easing function that can be used to simulate bouncing
            </summary>
        </member>
        <member name="P:GameCore.Animation.EasingFunction.BounceEase.Bounces">
            <summary>
            Specifies the number of bounces.  This does not include the final half bounce.
            </summary>
        </member>
        <member name="P:GameCore.Animation.EasingFunction.BounceEase.Bounciness">
            <summary>
                Specifies the amount of bounciness.  This corresponds to the scale difference between a bounce and the next bounce.  
                For example, Bounciness = 2.0 corresponds to the next bounce being twice as high and taking twice as long.
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.CircleEase">
            <summary>
                This class implements an easing function that gives a circular curve toward the destination.
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.CubicEase">
            <summary>
                This class implements an easing function that gives a cubic curve toward the destination
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.ElasticEase">
            <summary>
                This class implements an easing function that gives an elastic/springy curve
            </summary>
        </member>
        <member name="P:GameCore.Animation.EasingFunction.ElasticEase.Oscillations">
            <summary>
            Specifies the number of oscillations
            </summary>
        </member>
        <member name="P:GameCore.Animation.EasingFunction.ElasticEase.Springiness">
            <summary>
            Specifies the amount of springiness
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.ExponentialEase">
            <summary>
                This class implements an easing function that gives an exponential curve
            </summary>
        </member>
        <member name="P:GameCore.Animation.EasingFunction.ExponentialEase.Exponent">
            <summary>
            Specifies the factor which controls the shape of easing.
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.IEasingFunction">
            <summary>
                This interface represents a transformation of normalizedTime.  Animations use it to 
                transform their progress before computing an interpolation.  Classes that implement
                this interface can control the pace at which an animation is performed.
            </summary>
        </member>
        <member name="M:GameCore.Animation.EasingFunction.IEasingFunction.Ease(System.Double)">
            <summary>
                Transforms normalized time to control the pace of an animation.
            </summary>
            <param name="normalizedTime">normalized time (progress) of the animation</param>
            <returns>transformed progress</returns>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.PowerEase">
            <summary>
                This class implements an easing function that gives a polynomial curve of arbitrary degree.
                If the curve you desire is cubic, quadratic, quartic, or quintic it is better to use the 
                specialized easing functions.
            </summary>
        </member>
        <member name="P:GameCore.Animation.EasingFunction.PowerEase.Power">
            <summary>
            Specifies the power for the polynomial equation.
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.QuadraticEase">
            <summary>
                This class implements an easing function that gives a quadratic curve toward the destination
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.QuarticEase">
            <summary>
                This class implements an easing function that gives a quartic curve toward the destination
            </summary>
        </member>
        <member name="T:GameCore.Animation.EasingFunction.QuinticEase">
            <summary>
                This class implements an easing function that gives a quintic curve toward the destination
            </summary>
        </member>
        <member name="F:GameCore.Animation.Enum.CancelBehavior.Hold">
            <summary>
            Keep the current value of the animation on cancel.
            </summary>
        </member>
        <member name="F:GameCore.Animation.Enum.CancelBehavior.Start">
            <summary>
            Set the value to the start value of the animation on cancel.
            </summary>
        </member>
        <member name="F:GameCore.Animation.Enum.CancelBehavior.End">
            <summary>
            Set the value to the end value of the animation on cancel.
            </summary>
        </member>
        <member name="T:GameCore.Animation.Enum.EasingMode">
            <summary>
                This enum defines the modes in which classes deriving from EasingFunctioBase
                can will perform their easing.
            </summary>
        </member>
        <member name="T:GameCore.Animation.NumberAnimation`1">
            <summary>
            An animation class that animates a number from one value to another over a specified duration. Requires to be manually started.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:GameCore.Animation.NumberAnimation`1.EasingFunction">
            <summary>
            property for easing function, if null use linear interpolation
            </summary>
        </member>
        <member name="P:GameCore.Animation.NumberAnimation`1.FromValueGetter">
            <summary>
            Only used if From is null. If set, this will be used to get the starting value of the animation.
            </summary>
        </member>
        <member name="T:GameCore.Animation.TimelineAnimation">
            <summary>
            Represents an abstract base class for timeline-based animations that can be played, reversed, and repeated over time.
            </summary>
            <remarks>
            TimelineAnimation provides a framework for creating time-based animations that integrate with the game's tick system
            and async/await patterns. It supports various playback modes including auto-reverse, repeat counts, and duration-based
            repetition. Derived classes implement the specific animation logic by overriding the Update method.
            </remarks>
            <example>
            <code>
            // Create a custom animation
            var animation = new MyAnimation()
            {
                Duration = TimeSpan.FromSeconds(2),
                AutoReverse = true,
                RepeatBehavior = 3 // Repeat 3 times
            };
            
            await animation; // Wait for animation to complete
            </code>
            </example>
            <param name="adjustment">Optional time adjustment in milliseconds to apply to the animation start time.</param>
        </member>
        <member name="M:GameCore.Animation.TimelineAnimation.#ctor(System.Int32)">
            <summary>
            Represents an abstract base class for timeline-based animations that can be played, reversed, and repeated over time.
            </summary>
            <remarks>
            TimelineAnimation provides a framework for creating time-based animations that integrate with the game's tick system
            and async/await patterns. It supports various playback modes including auto-reverse, repeat counts, and duration-based
            repetition. Derived classes implement the specific animation logic by overriding the Update method.
            </remarks>
            <example>
            <code>
            // Create a custom animation
            var animation = new MyAnimation()
            {
                Duration = TimeSpan.FromSeconds(2),
                AutoReverse = true,
                RepeatBehavior = 3 // Repeat 3 times
            };
            
            await animation; // Wait for animation to complete
            </code>
            </example>
            <param name="adjustment">Optional time adjustment in milliseconds to apply to the animation start time.</param>
        </member>
        <member name="P:GameCore.Animation.TimelineAnimation.IsInReverse">
            <summary>
            Gets a value indicating whether the animation is currently playing in reverse.
            </summary>
            <value>True if the animation is playing backwards; otherwise, false.</value>
            <remarks>
            This property is automatically managed when AutoReverse is enabled. When the animation
            reaches the end of its duration, it will reverse direction if AutoReverse is true.
            </remarks>
        </member>
        <member name="P:GameCore.Animation.TimelineAnimation.CurrentCount">
            <summary>
            Gets the current repeat count of the animation.
            </summary>
            <value>The number of times the animation has completed its cycle.</value>
            <remarks>
            This value increments each time the animation completes a full cycle. For auto-reversing
            animations, a complete cycle includes both forward and reverse playback.
            </remarks>
        </member>
        <member name="P:GameCore.Animation.TimelineAnimation.AutoReverse">
            <summary>
            Gets or sets a value indicating whether the animation should automatically reverse direction when it reaches the end.
            </summary>
            <value>True to enable auto-reverse; otherwise, false.</value>
            <remarks>
            When enabled, the animation will play forward to the end, then backward to the beginning,
            creating a ping-pong effect. This counts as one complete cycle for repeat behavior purposes.
            </remarks>
        </member>
        <member name="P:GameCore.Animation.TimelineAnimation.Duration">
            <summary>
            Gets or sets the duration of one animation cycle.
            </summary>
            <value>The time span representing the duration of a single animation cycle.</value>
            <remarks>
            This defines how long it takes for the animation to complete one forward playback.
            For auto-reversing animations, the total cycle time is twice this duration.
            </remarks>
        </member>
        <member name="P:GameCore.Animation.TimelineAnimation.RepeatBehavior">
            <summary>
            Gets or sets the repeat behavior that controls how the animation repeats.
            </summary>
            <value>A RepeatBehavior value specifying the repetition pattern.</value>
            <remarks>
            This can be set to a specific count, a duration, or forever. The default is 1,
            meaning the animation plays once and then stops.
            </remarks>
        </member>
        <member name="P:GameCore.Animation.TimelineAnimation.AdjustByFrameDelta">
            <summary>
            Gets or sets a value indicating whether adjustments should be applied relative to the frame delta time. Basically, if you want to use the game tick or real time.
            Animation that may affect the game state should use <c>false</c>, while animations that are purely visual can use <c>true</c>.
            </summary>
            <value>True to use real frame delta time; false to use fixed game tick time.</value>
            <remarks>
            Animations that may affect the game state should use <c>false</c> for consistent timing,
            while animations that are purely visual can use <c>true</c> for smoother real-time playback.
            </remarks>
        </member>
        <member name="M:GameCore.Animation.TimelineAnimation.Pause(System.Boolean)">
            <summary>
            Pauses or resumes the animation playback.
            </summary>
            <param name="on">True to pause the animation; false to resume it.</param>
            <remarks>
            When paused, the animation will stop advancing and remain at its current position.
            This method has no effect if the animation has already completed.
            </remarks>
        </member>
        <member name="M:GameCore.Animation.TimelineAnimation.GetResult">
            <summary>
            Gets the result value of the animation when it completes.
            </summary>
            <returns>The final time value of the animation, depending on the repeat behavior.</returns>
            <remarks>
            For duration-based repeat behavior, returns the remaining total time.
            For other behaviors, returns the current time position, accounting for reverse playback.
            </remarks>
        </member>
        <member name="M:GameCore.Animation.TimelineAnimation.ThinkAction(System.Int32)">
            <summary>
            Advances the animation by the specified time delta.
            </summary>
            <param name="delta">The time delta since the last update in milliseconds.</param>
            <remarks>
            This method is called automatically by the thinking system. It updates the animation's
            time position, handles direction changes for auto-reverse, and calls the Update method
            for derived classes to implement their specific animation logic.
            </remarks>
        </member>
        <member name="M:GameCore.Animation.TimelineAnimation.Update(System.Int32)">
            <summary>
            Updates the animation state based on the current time position.
            </summary>
            <param name="deltaTime">The current time position in the animation in milliseconds.</param>
            <remarks>
            This abstract method must be implemented by derived classes to define the specific
            animation behavior. It is called every frame while the animation is active.
            </remarks>
        </member>
        <member name="M:GameCore.Animation.TimelineAnimation.Cancel(GameCore.Animation.Enum.CancelBehavior)">
            <summary>
            Cancels the animation with the specified cancellation behavior.
            </summary>
            <param name="cancelBehavior">The behavior to apply when cancelling the animation.</param>
            <remarks>
            This abstract method must be implemented by derived classes to define how the animation
            should handle cancellation, such as jumping to the end state or holding the current state.
            </remarks>
        </member>
        <member name="M:GameCore.Animation.TimelineAnimation.ThinkFinish">
            <summary>
            Determines whether the animation should finish based on its repeat behavior and current state.
            </summary>
            <returns>True if the animation should complete; otherwise, false.</returns>
            <remarks>
            This method handles the complex logic for determining animation completion based on
            repeat behavior, auto-reverse settings, and current cycle counts.
            </remarks>
        </member>
        <member name="M:GameCore.Animation.TimelineAnimation.Start">
            <summary>
            Starts the animation and initializes its state.
            </summary>
            <remarks>
            This method sets up the initial animation state including time position, duration,
            and repeat behavior configuration. It then calls the base Start method to begin execution.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IAttachedObject`1">
            <summary>
            AttachedObject Fact Check
            1.  Apply Modification on activation - ok
            2.  Remove Modification on deactivation and removal - ok
            3.  Apply Modification on stack change - ok
            4.  StackParam enable and removal per instance - ok
            5.  Create actors on link enabled - TODO
            6.  Destroy actors on link disabled - TODO
            7.  Apply unit states and immunity on link attached - ok
            8.  Remove unit states and immunity on link detached - ok
            9.  Apply Category and Link disable on link attached - ok
            10. Remove Category and Link disable on link detached - ok
            </summary>
            <typeparam name="TCategory"></typeparam>
        </member>
        <member name="T:GameCore.BaseInterface.IAttachedObject`2">
            <summary>
            IAttachedObject that has a manager on the host.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <typeparam name="TCategory"></typeparam>
        </member>
        <member name="M:GameCore.BaseInterface.IAttachedObject`2.OnAttached">
            <summary>
            Called when the object is successfully attached to its host.
            </summary>
        </member>
        <member name="T:GameCore.BaseInterface.ICommandTarget">
            <summary>
            Defines an interface for objects that can be targeted by commands in the game.
            </summary>
            <remarks>
            This interface serves as a marker for objects that can receive command-based interactions
            from players, AI, or other game systems. It's used in conjunction with the command and targeting
            systems to identify valid command recipients.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.ICooldownHost">
            <summary>
            Defines the interface for objects that can host cooldowns and manage attached objects with synchronization support.
            </summary>
            <remarks>
            ICooldownHost extends ICooldownOwner and IPropertyHost to provide a comprehensive hosting environment for objects
            that need to manage cooldowns, properties, and attached child objects. This interface is typically implemented
            by entities and units that serve as containers for abilities, items, and other game components. It handles
            synchronization of attached objects between server and client, maintains registration for lookup purposes,
            and provides property-based storage for complex data structures. The interface supports the attachment system
            used throughout the game for abilities, items, effects, and other dynamic components.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.GetById(System.Int32)">
            <summary>
            Retrieves a cooldown host by its unique identifier.
            </summary>
            <param name="viewActorId">The unique identifier of the view actor associated with the host.</param>
            <returns>The cooldown host with the specified ID, or null if not found.</returns>
        </member>
        <member name="P:GameCore.BaseInterface.ICooldownHost.GameCore#BaseInterface#ICooldownOwner#CooldownHost">
            <summary>
            Gets the cooldown host for this cooldown owner (returns itself).
            </summary>
            <value>This instance as the cooldown host.</value>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.GetBySyncId(System.Int32)">
            <summary>
            Retrieves an attached object by its synchronization identifier.
            </summary>
            <param name="syncId">The synchronization ID of the attached object to retrieve.</param>
            <returns>The attached object with the specified sync ID, or null if not found.</returns>
            <remarks>
            This method provides fast lookup of attached objects by their unique synchronization identifiers,
            which are used for network synchronization and cross-reference operations.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.Register">
            <summary>
            Registers this cooldown host in the global lookup table.
            </summary>
            <returns>True if registration was successful; otherwise, throws an exception.</returns>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the registration ID conflicts with an existing host.</exception>
            <remarks>
            Registration enables global lookup of this host by its view actor ID, which is essential
            for network synchronization and cross-object references. Each host must have a unique ID.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.Unregister">
            <summary>
            Unregisters this cooldown host from the global lookup table.
            </summary>
            <returns>True if unregistration was successful; otherwise, false.</returns>
            <remarks>
            Unregistration should be called during host disposal to prevent memory leaks and
            ensure proper cleanup of global references.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.ICooldownHost.ViewActor">
            <summary>
            Gets the core actor that represents this host in the engine.
            </summary>
            <value>The view actor associated with this cooldown host.</value>
        </member>
        <member name="P:GameCore.BaseInterface.ICooldownHost.LazyAttachedChildren">
            <summary>
            Gets the lazy-initialized dictionary of attached child objects.
            </summary>
            <value>A lazy-initialized dictionary for efficient memory usage when no children are attached.</value>
        </member>
        <member name="P:GameCore.BaseInterface.ICooldownHost.AttachedChildren">
            <summary>
            Gets the dictionary of attached child objects, creating it if necessary.
            </summary>
            <value>The dictionary containing all attached objects indexed by their sync IDs.</value>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.DisposeAttachedChildrenPool">
            <summary>
            Disposes all attached child objects and cleans up the attachment pool.
            </summary>
            <remarks>
            This method is called during host disposal to ensure all attached objects are properly
            destroyed and their resources are released. It only disposes children if the lazy
            collection has been initialized.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.AddAttached(GameCore.BaseInterface.IAttachedObject)">
            <summary>
            Adds an attached object to this host's collection of children.
            </summary>
            <param name="attached">The attached object to add.</param>
            <returns>True if the object was successfully added; otherwise, false.</returns>
            <remarks>
            This method handles the registration of attached objects and their synchronization setup.
            Only synchronized objects can be added, and each object must have a unique sync ID within the host.
            On the server, this also triggers network synchronization to inform clients of the new attachment.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.RemoveAttached(GameCore.BaseInterface.IAttachedObject)">
            <summary>
            Removes an attached object from this host's collection of children.
            </summary>
            <param name="attached">The attached object to remove.</param>
            <returns>True if the object was successfully removed; otherwise, false.</returns>
            <remarks>
            This method handles the deregistration of attached objects and cleanup of synchronization data.
            On the server, it also triggers network synchronization to inform clients of the removal.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.ICooldownHost.SyncIds">
            <summary>
            Gets or sets the collection of synchronization ID lists for different properties.
            </summary>
            <value>A dictionary mapping property types to sets of synchronization IDs.</value>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.GetSyncIdList(GameCore.BaseInterface.IExtendedEnum)">
            <summary>
            Retrieves or creates a synchronization ID list for the specified property.
            </summary>
            <param name="property">The property to get the sync ID list for.</param>
            <returns>A set of synchronization IDs associated with the property.</returns>
            <remarks>
            This method manages synchronized lists of object IDs for properties, enabling efficient
            synchronization of collections between server and client. Lists are created on demand
            and populated from network data on the client side.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.SyncIdListAdd(GameCore.BaseInterface.IExtendedEnum,GameCore.BaseInterface.IAttachedObject)">
            <summary>
            Adds an attached object to a synchronized property list.
            </summary>
            <param name="property">The property to add the object to.</param>
            <param name="attached">The attached object to add.</param>
            <remarks>
            This method adds the object's sync ID to the specified property list and triggers
            network synchronization on the server to inform clients of the change.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.SyncIdListRemove(GameCore.BaseInterface.IExtendedEnum,GameCore.BaseInterface.IAttachedObject)">
            <summary>
            Removes an attached object from a synchronized property list.
            </summary>
            <param name="property">The property to remove the object from.</param>
            <param name="attached">The attached object to remove.</param>
            <remarks>
            This method removes the object's sync ID from the specified property list and triggers
            network synchronization on the server to inform clients of the change.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.SyncIdListAdd(GameCore.BaseInterface.IExtendedEnum,System.Int32)">
            <inheritdoc cref="M:GameCore.BaseInterface.ICooldownHost.SyncIdListAdd(GameCore.BaseInterface.IExtendedEnum,GameCore.BaseInterface.IAttachedObject)"/>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.SyncIdListRemove(GameCore.BaseInterface.IExtendedEnum,System.Int32)">
            <inheritdoc cref="M:GameCore.BaseInterface.ICooldownHost.SyncIdListRemove(GameCore.BaseInterface.IExtendedEnum,GameCore.BaseInterface.IAttachedObject)"/>
        </member>
        <member name="M:GameCore.BaseInterface.ICooldownHost.ReplicateComponent(System.Int32,System.Boolean)">
            <summary>
            Creates a client-side replica of a component based on synchronized data.
            </summary>
            <param name="ownerId">The synchronization ID of the component to replicate.</param>
            <param name="logNoGameData">Whether to log warnings when game data is not found.</param>
            <returns>The replicated attached object, or null if replication failed.</returns>
            <remarks>
            This method is used on the client side to create local instances of components
            that exist on the server. It retrieves the game data link and creates an appropriate
            attached object instance for client-side representation.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IExtendedEnum">
            <summary>
            Base interface for extended enums that can be dynamically registered and retrieved.
            </summary>
            <remarks>
            This interface provides the foundation for the GameCore enum extension system,
            allowing enums to be extended at runtime and providing efficient lookup mechanisms
            through hash-based mapping.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.IExtendedEnum.InnerValue">
            <summary>
            Gets the underlying enum value wrapped by this extended enum.
            </summary>
        </member>
        <member name="P:GameCore.BaseInterface.IExtendedEnum.EnumMap">
            <summary>
            Gets the global map of all registered extended enum instances indexed by their hash codes.
            </summary>
            <remarks>
            This static dictionary maintains all extended enum instances for efficient lookup.
            Values are registered during enum initialization.
            TODO: Consider if storing IExtendedEnum is necessary, or if storing only the inner enum would suffice.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.IExtendedEnum.InnerEnumMapFrozen">
            <summary>
            Gets the frozen dictionary used for optimized enum lookups.
            </summary>
            <remarks>
            This is created lazily from <see cref="P:GameCore.BaseInterface.IExtendedEnum.EnumMap"/> to provide fast, read-only access
            to enum instances during runtime operations.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.IExtendedEnum.FromHashCode(System.Int32)">
            <summary>
            Retrieves an extended enum instance by its hash code.
            </summary>
            <param name="hashCode">The hash code of the enum to retrieve.</param>
            <returns>The extended enum instance if found; otherwise, <c>null</c>.</returns>
            <remarks>
            This method provides efficient lookup of extended enum instances using their
            hash codes, which are computed consistently across the extension system.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.IExtendedEnum.InnerEnumFromHashCode(System.Int32)">
            <summary>
            Retrieves the inner enum value by its hash code.
            </summary>
            <param name="hashCode">The hash code of the enum to retrieve.</param>
            <returns>The inner enum value if found; otherwise, <c>null</c>.</returns>
            <remarks>
            This method provides direct access to the underlying enum value without
            the extended enum wrapper, useful for performance-critical scenarios.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IExtendableEnum">
            <summary>
            Marker interface for extendable enums that inherit from <see cref="T:GameCore.BaseInterface.IExtendedEnum"/>.
            </summary>
            <remarks>
            This interface serves as a marker to identify enums that participate in the
            extension system without adding additional functionality.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IExtendableEnum`1">
            <summary>
            Generic interface for strongly-typed extendable enums.
            </summary>
            <typeparam name="TSelf">The concrete type implementing this interface.</typeparam>
            <remarks>
            This interface provides type-safe factory methods for creating instances of
            extendable enums from their underlying enum values, enabling the extension
            system to work with specific enum types while maintaining type safety.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.IExtendableEnum`1.MakeInstance(System.Enum)">
            <summary>
            Creates an instance of the extendable enum from an enum value.
            </summary>
            <param name="enumValue">The enum value to wrap.</param>
            <returns>A new instance of <typeparamref name="TSelf"/> wrapping the enum value.</returns>
            <remarks>
            This method provides a generic way to create extendable enum instances
            and delegates to the type-specific <see cref="M:GameCore.BaseInterface.IExtendableEnum`1.Make(System.Enum)"/> method.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.IExtendableEnum`1.Make(System.Enum)">
            <summary>
            Creates an instance of the extendable enum from an enum value.
            </summary>
            <param name="enumValue">The enum value to wrap.</param>
            <returns>A new instance of <typeparamref name="TSelf"/> wrapping the enum value.</returns>
            <remarks>
            This abstract method must be implemented by concrete extendable enum types
            to provide type-specific instance creation logic.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IGameClass">
            <summary>
            Register game classes that are used in the game setups.
            </summary>
        </member>
        <member name="T:GameCore.BaseInterface.IHostedObject">
            <summary>
            Defines an interface for objects that are hosted by other entities and can manage cooldowns.
            </summary>
            <remarks>
            This interface represents objects that exist as components or attachments to host entities,
            inheriting cooldown management capabilities from <see cref="T:GameCore.BaseInterface.ICooldownHost"/>. Hosted objects
            typically depend on their host for lifecycle management, positioning, and other contextual
            information while providing their own cooldown-based functionality.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IKillable">
            <summary>
            Defines an interface for entities that can be killed and potentially revived.
            </summary>
            <remarks>
            This interface provides death state management and control for game entities.
            It supports different death types and contexts, allowing for varied death behaviors
            and revival mechanics. On the server side, it provides methods to kill and revive entities,
            while both server and client can check the death state.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.IKillable.IsDead">
            <summary>
            Gets a value indicating whether this entity is currently dead.
            </summary>
        </member>
        <member name="T:GameCore.BaseInterface.IObjectManager`1">
            <summary>
            Defines a generic interface for managing collections or groups of objects of a specific type.
            </summary>
            <typeparam name="TObject">The type of objects to be managed by this manager.</typeparam>
            <remarks>
            This interface serves as a marker and base contract for object management systems within the game.
            Implementations are expected to provide specific management functionality for their object types,
            such as creation, destruction, tracking, and lifecycle management. The interface itself is empty
            to allow maximum flexibility for implementing classes to define their own management contracts.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IStateOwner`1">
            <summary>
            Defines an interface for objects that can manage states and immunities of a specific type.
            </summary>
            <typeparam name="T">The type of state that this owner can manage. Must be a non-null type.</typeparam>
            <remarks>
            This interface provides a system for managing both active states and immunities to states.
            States represent conditions or effects that are active on the object, while immunities prevent
            certain states from being applied.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.IStateOwner`1.HasState(`0)">
            <summary>
            Determines whether this object currently has the specified state.
            </summary>
            <param name="state">The state to check for.</param>
            <returns><c>true</c> if the object has the state; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GameCore.BaseInterface.ITarget">
            <summary>
            Defines the interface for objects that can be targeted by abilities, movement, or other game systems.
            </summary>
            <remarks>
            ITarget provides a unified interface for all objects that can serve as targets in the game world,
            including entities, units, scene points, and other interactive objects. It standardizes position access,
            validity checking, range calculations, visibility determination, and other targeting-related operations.
            The interface supports both server-side and client-side targeting logic with appropriate abstractions
            for multiplayer scenarios. All targeting systems in the game rely on this interface for consistent
            behavior across different object types.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.Position">
            <summary>
            Gets the position of this target in the game world.
            </summary>
            <value>The scene point representing the target's current position.</value>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.Unit">
            <summary>
            Gets the unit associated with this target, if applicable.
            </summary>
            <value>The unit representation of this target, or null if this target is not a unit.</value>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.Entity">
            <summary>
            Gets the entity associated with this target, if applicable.
            </summary>
            <value>The entity representation of this target, or null if this target is not an entity.</value>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.Facing">
            <summary>
            Gets the facing direction of this target, if applicable.
            </summary>
            <value>The direction this target is facing, or null if the target has no facing direction.</value>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.Scene">
            <summary>
            Gets the scene that contains this target.
            </summary>
            <value>The scene where this target is located.</value>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.IsValid">
            <summary>
            Gets a value indicating whether this target is valid and can be used for targeting operations.
            </summary>
            <value>True if the target is valid; otherwise, false.</value>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.CanChangePosition">
            <summary>
            Gets a value indicating whether this target's position can be changed.
            </summary>
            <value>True if the target can move or be moved; otherwise, false.</value>
            <remarks>
            Static targets like waypoints or fixed positions return false, while dynamic targets
            like units return true. This affects how movement and positioning systems interact with the target.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.ApproachableTarget">
            <summary>
            Gets the approachable target interface for pathfinding and movement systems.
            </summary>
            <value>An interface that provides pathfinding information for reaching this target.</value>
        </member>
        <member name="M:GameCore.BaseInterface.ITarget.IsValidTargetTo(GameCore.EntitySystem.Entity,System.Boolean)">
            <summary>
            Determines whether this target is valid for targeting by the specified caster.
            </summary>
            <param name="caster">The entity attempting to target this object.</param>
            <param name="isRequest">Whether this is a targeting request that requires visibility.</param>
            <returns>True if this target can be targeted by the caster; otherwise, false.</returns>
            <remarks>
            This method checks basic targeting validity such as being in the same scene.
            Derived implementations may add additional checks for visibility, relationships, or other factors.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ITarget.IsInRange(GameCore.EntitySystem.Entity,System.Double,System.Boolean)">
            <summary>
            Determines whether this target is within the specified range of the caster.
            </summary>
            <param name="caster">The entity checking range to this target.</param>
            <param name="range">The maximum range to check.</param>
            <param name="isRequest">Whether this is a targeting request that requires validity.</param>
            <returns>True if the target is within range; otherwise, false.</returns>
            <remarks>
            Range calculation includes the interaction radii of both the caster and target to account
            for object sizes. The method also verifies targeting validity before checking distance.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ITarget.SameScene(GameCore.BaseInterface.ITarget)">
            <summary>
            Determines whether this target is in the same scene as another target.
            </summary>
            <param name="target">The target to compare scenes with.</param>
            <returns>True if both targets are in the same scene; otherwise, false.</returns>
            <remarks>
            Scene comparison is fundamental for many targeting operations, as cross-scene targeting
            is typically not supported. This method provides a standard way to check scene compatibility.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ITarget.CanBeSeen(GameCore.EntitySystem.Entity)">
            <summary>
            Determines whether this target can be seen by the specified caster.
            </summary>
            <param name="caster">The entity attempting to see this target.</param>
            <returns>True if this target is visible to the caster; otherwise, false.</returns>
            <remarks>
            Visibility rules vary by implementation and may consider factors such as line of sight,
            fog of war, stealth effects, and player relationships. This method must be implemented
            by concrete target types to provide appropriate visibility logic.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.ITarget.InteractRadius">
            <summary>
            Gets the interaction radius of this target for range and collision calculations.
            </summary>
            <value>The radius around this target used for interaction range calculations.</value>
            <remarks>
            The interaction radius affects how close other objects need to be to interact with this target.
            Larger objects typically have larger interaction radii to account for their size.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ITarget.AngleTo(GameCore.BaseInterface.ITarget)">
            <summary>
            Calculates the angle from this target to another target.
            </summary>
            <param name="target">The target to calculate the angle to.</param>
            <returns>The angle to the target, or null if they are at the same position or in different scenes.</returns>
            <remarks>
            If the targets are at the same position, this method returns the current facing direction.
            Otherwise, it calculates the angle based on the relative positions of the two targets.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ITarget.VectorTargetPosition(GameCore.BaseInterface.ITarget,System.Double)">
            <summary>
            Calculates a position at a specified distance in the direction of another target.
            </summary>
            <param name="target">The target to calculate the vector towards.</param>
            <param name="vectorLength">The distance from this target's position.</param>
            <returns>The calculated scene point, or null if the targets are in different scenes.</returns>
            <remarks>
            This method is useful for positioning effects, projectiles, or other objects at a specific
            distance in the direction of a target. The vector length is adjusted by this target's
            interaction radius to account for object size.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IThinker">
            <summary>
            Defines an interface for objects that require regular update processing each game tick.
            </summary>
            <remarks>
            The thinking system allows objects to perform per-frame logic such as AI processing,
            animation updates, timers, or other time-based behaviors. Objects can enable or disable
            their thinking state dynamically to optimize performance by only processing active objects.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.IThinker.Think(System.Int32)">
            <summary>
            Performs the object's per-tick thinking logic.
            </summary>
            <param name="delta">The time elapsed since the last tick, in milliseconds.</param>
            <remarks>
            This method is called every game tick when <see cref="P:GameCore.BaseInterface.IThinker.DoesThink"/> is true.
            Implementations should perform their frame-based logic here, such as AI decisions,
            state updates, or timer processing.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.IThinker.DoesThink">
            <summary>
            Gets or sets a value indicating whether this object should be included in the thinking system.
            </summary>
            <remarks>
            When set to true, the object is registered with the game's thinking system and <see cref="M:GameCore.BaseInterface.IThinker.Think(System.Int32)"/>
            will be called each tick. When set to false, the object is unregistered and stops receiving
            think calls, improving performance for inactive objects.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.IThinkerStaggered.Think">
            <summary>
            Only think when DoesThink = true;
            </summary>
        </member>
        <member name="T:GameCore.BaseInterface.ITickFinalizer">
            <summary>
            Defines an interface for objects that need to perform cleanup or finalization operations at the end of each game tick.
            </summary>
            <remarks>
            This interface is used for objects that need to execute logic after all other tick processing has completed.
            Implementations should register themselves using <see cref="M:GameCore.BaseInterface.ITickFinalizer.PendingFinalizer"/> to be included in the finalization process.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ITickFinalizer.TickFinalizer">
            <summary>
            Performs finalization operations at the end of a game tick.
            </summary>
            <remarks>
            This method is called after all other tick processing has completed for the current frame.
            It should be used for cleanup operations, state finalization, or any logic that needs to run
            after all other systems have updated.
            </remarks>
        </member>
        <member name="M:GameCore.BaseInterface.ITickFinalizer.PendingFinalizer">
            <summary>
            Registers this object to be processed during the tick finalization phase.
            </summary>
            <remarks>
            Call this method to ensure that <see cref="M:GameCore.BaseInterface.ITickFinalizer.TickFinalizer"/> will be called at the end of the current or next tick.
            The object will be automatically managed by the game's tick finalization system.
            </remarks>
        </member>
        <member name="T:GameCore.BaseInterface.IUnitModificationData">
            <summary>
            Defines data for modifying unit properties, states, and immunities.
            </summary>
            <remarks>
            This interface represents a collection of modifications that can be applied to units,
            including property changes, state additions/removals, and immunity grants.
            It's commonly used by abilities, items, and other game systems that need to modify
            unit characteristics temporarily or permanently.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.IUnitModificationData.Modifications">
            <summary>
            Gets a list of property modifications to apply to the unit.
            </summary>
            <remarks>
            These modifications can change unit attributes like damage, armor, speed, etc.
            Each modification specifies the property to change and how to change it.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.IUnitModificationData.AddStates">
            <summary>
            Gets a list of states to add to the unit.
            </summary>
            <remarks>
            States represent temporary or permanent conditions that affect unit behavior,
            such as buffs, debuffs, or special status effects.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.IUnitModificationData.RemoveStates">
            <summary>
            Gets a list of states to remove from the unit.
            </summary>
            <remarks>
            This can be used to clear specific states or conditions from the unit,
            such as removing debuffs or clearing temporary effects.
            </remarks>
        </member>
        <member name="P:GameCore.BaseInterface.IUnitModificationData.ImmuneStates">
            <summary>
            Gets a list of states that the unit should become immune to.
            </summary>
            <remarks>
            Immune states prevent the unit from being affected by specific conditions,
            providing protection against certain types of effects or abilities.
            </remarks>
        </member>
        <member name="T:GameCore.BaseType.AbilityStage">
            <summary>
            Defines the execution stages of an ability lifecycle.
            </summary>
            <remarks>
            This enum represents the different phases an ability goes through during its execution,
            from initial approach to final completion. Each stage may have different behaviors,
            animations, and effects associated with it.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.AbilityStage.Approach">
            <summary>
            The approach stage where the caster moves into position or range to use the ability.
            </summary>
            <remarks>
            During this stage, the entity may move closer to the target or adjust positioning
            as required by the ability's range and targeting requirements.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.AbilityStage.Start">
            <summary>
            The initial stage when the ability execution begins.
            </summary>
            <remarks>
            This stage marks the beginning of the ability's execution sequence,
            typically involving initial setup and preparation.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.AbilityStage.Cast">
            <summary>
            The casting stage where the ability is being prepared or charged.
            </summary>
            <remarks>
            During this stage, the ability is actively being cast, which may involve
            cast time, mana consumption, and casting animations or effects.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.AbilityStage.Channel">
            <summary>
            The channeling stage for abilities that require sustained casting.
            </summary>
            <remarks>
            Some abilities require continuous channeling to maintain their effect.
            During this stage, the caster must maintain focus and cannot perform other actions.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.AbilityStage.Finish">
            <summary>
            The final stage when the ability execution is completed.
            </summary>
            <remarks>
            This stage represents the conclusion of the ability's execution,
            including any cleanup, final effects, or post-execution behaviors.
            </remarks>
        </member>
        <member name="T:GameCore.BaseType.Angle">
            <summary>
            Angle based on degree
            </summary>
            <param name="degree"></param>
        </member>
        <member name="M:GameCore.BaseType.Angle.#ctor(System.Single)">
            <summary>
            Angle based on degree
            </summary>
            <param name="degree"></param>
        </member>
        <member name="T:GameCore.BaseType.AttachedObject">
            <summary>
            Directly attached to the unit, such as abilities, buffs. Can be added and removed.
            Can be in multiple states at the same time.
            Can modify the unit's properties.
            Usually has Link and Cache.
            </summary>
        </member>
        <member name="P:GameCore.BaseType.BearingSnapshot.Facing">
            <summary>
            Will be normalized to 0-360
            </summary>
        </member>
        <member name="F:GameCore.BaseType.ECmdError.FailedToAddBuff">
            <summary>
            Happened when the buff is not able to be added.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.ECmdError.UnableToAddBuff">
            <summary>
            Happened when the target is not able to add any buff, for example, the target cannot have BuffManager.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.CmdError.FailedToAddBuff">
            <summary>
            Happened when the buff is not able to be added.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.CmdError.UnableToAddBuff">
            <summary>
            Happened when the target is not able to add any buff, for example, the target cannot have BuffManager.
            </summary>
        </member>
        <member name="T:GameCore.BaseType.ECmdResult">
            <summary>
            Internal enum defining the base command result values.
            </summary>
            <remarks>
            This enum serves as the foundation for the command result system,
            with <see cref="F:GameCore.BaseType.ECmdResult.Ok"/> representing successful command execution.
            Additional error values are defined through the extendable enum system.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.ECmdResult.Ok">
            <summary>
            Indicates that the command executed successfully without errors.
            </summary>
        </member>
        <member name="T:GameCore.BaseType.CmdResult">
            <summary>
            Represents the result of a command execution, indicating success or failure.
            </summary>
            <remarks>
            This struct provides a type-safe way to handle command results throughout the game systems.
            It uses the extendable enum system to support both success and various error conditions.
            The struct supports boolean operations and comparison operators for convenient result checking.
            </remarks>
        </member>
        <member name="P:GameCore.BaseType.CmdResult.Error">
            <summary>
            Gets the error information if the command failed, or <c>null</c> if successful.
            </summary>
            <remarks>
            This property provides access to detailed error information when the command result
            indicates failure. When the result is <see cref="F:GameCore.BaseType.ECmdResult.Ok"/>, this returns <c>null</c>.
            </remarks>
        </member>
        <member name="P:GameCore.BaseType.CmdResult.IsSuccess">
            <summary>
            Gets a value indicating whether the command executed successfully.
            </summary>
            <remarks>
            This property provides a convenient way to check if the command completed without errors.
            It returns <c>true</c> only when the inner value is <see cref="F:GameCore.BaseType.ECmdResult.Ok"/>.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult.op_True(GameCore.BaseType.CmdResult)">
            <summary>
            Enables the use of <see cref="T:GameCore.BaseType.CmdResult"/> in boolean contexts, returning <c>true</c> for success.
            </summary>
            <param name="x">The command result to evaluate.</param>
            <returns><c>true</c> if the command was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator allows <see cref="T:GameCore.BaseType.CmdResult"/> to be used directly in if statements and other boolean contexts.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult.op_False(GameCore.BaseType.CmdResult)">
            <summary>
            Enables the use of <see cref="T:GameCore.BaseType.CmdResult"/> in boolean contexts, returning <c>false</c> for success.
            </summary>
            <param name="x">The command result to evaluate.</param>
            <returns><c>false</c> if the command was successful; otherwise, <c>true</c>.</returns>
            <remarks>
            This operator is the complement of the <c>true</c> operator and is required for boolean logic operations.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult.op_LogicalNot(GameCore.BaseType.CmdResult)">
            <summary>
            Negates the success state of the command result.
            </summary>
            <param name="x">The command result to negate.</param>
            <returns><c>true</c> if the command failed; <c>false</c> if it succeeded.</returns>
            <remarks>
            This operator allows for negation of the success state, useful for checking failure conditions.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult.op_BitwiseAnd(GameCore.BaseType.CmdResult,GameCore.BaseType.CmdResult)">
            <summary>
            Performs a logical AND operation on two command results, returning the more severe error.
            </summary>
            <param name="x">The first command result.</param>
            <param name="y">The second command result.</param>
            <returns>The command result with the higher error severity.</returns>
            <remarks>
            This operator is used to combine multiple command results, with higher integer values
            representing more severe errors. If both results are successful, returns success.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult.op_BitwiseOr(GameCore.BaseType.CmdResult,GameCore.BaseType.CmdResult)">
            <summary>
            Performs a logical OR operation on two command results, preferring success over failure.
            </summary>
            <param name="x">The first command result.</param>
            <param name="y">The second command result.</param>
            <returns>A successful result if either input is successful; otherwise, the less severe error.</returns>
            <remarks>
            This operator returns success if either operand is successful. If both are errors,
            it returns the error with lower severity (smaller integer value).
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.CmdResult.Ok">
            <summary>
            Indicates that the command executed successfully without errors.
            </summary>
        </member>
        <member name="T:GameCore.BaseType.CmdResult`1">
            <summary>
            Represents the result of a command execution that returns a value, combining success/failure with the result data.
            </summary>
            <typeparam name="T">The type of value returned by the successful command execution.</typeparam>
            <remarks>
            This generic struct extends the command result system to include return values for successful operations.
            It provides type-safe access to both the result value and error information, with compile-time guarantees
            about when each property is available.
            </remarks>
        </member>
        <member name="P:GameCore.BaseType.CmdResult`1.Value">
            <summary>
            Gets the value returned by the successful command execution, or <c>null</c> if the command failed.
            </summary>
            <remarks>
            This property is only non-null when <see cref="P:GameCore.BaseType.CmdResult`1.IsSuccess"/> is <c>true</c>.
            The compiler enforces this relationship through nullable reference type annotations.
            </remarks>
        </member>
        <member name="P:GameCore.BaseType.CmdResult`1.Result">
            <summary>
            Gets the underlying command result indicating success or failure.
            </summary>
            <remarks>
            This property provides access to the base command result information,
            including error details when the command fails.
            </remarks>
        </member>
        <member name="P:GameCore.BaseType.CmdResult`1.Error">
            <summary>
            Gets the error information if the command failed, or <c>null</c> if successful.
            </summary>
            <remarks>
            This property delegates to the underlying <see cref="P:GameCore.BaseType.CmdResult`1.Result"/> to provide
            consistent error access across both generic and non-generic result types.
            </remarks>
        </member>
        <member name="P:GameCore.BaseType.CmdResult`1.IsSuccess">
            <summary>
            Gets a value indicating whether the command executed successfully and returned a value.
            </summary>
            <remarks>
            When this property is <c>true</c>, the <see cref="P:GameCore.BaseType.CmdResult`1.Value"/> property is guaranteed to be non-null.
            When <c>false</c>, the <see cref="P:GameCore.BaseType.CmdResult`1.Error"/> property will contain error information.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:GameCore.BaseType.CmdResult`1"/> with a successful result and value.
            </summary>
            <param name="value">The value returned by the successful command execution.</param>
            <remarks>
            This constructor creates a successful command result containing the specified value.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.op_Implicit(`0)~GameCore.BaseType.CmdResult{`0}">
            <summary>
            Implicitly converts a value to a successful <see cref="T:GameCore.BaseType.CmdResult`1"/>.
            </summary>
            <param name="value">The value to wrap in a successful result.</param>
            <returns>A successful command result containing the specified value.</returns>
            <remarks>
            This operator provides convenient creation of successful results from values.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.#ctor(GameCore.BaseType.CmdError)">
            <summary>
            Initializes a new instance of <see cref="T:GameCore.BaseType.CmdResult`1"/> with a failed result and error information.
            </summary>
            <param name="error">The error information for the failed command execution.</param>
            <remarks>
            This constructor creates a failed command result with no value and the specified error.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.op_Implicit(GameCore.BaseType.CmdResult{`0})~GameCore.BaseType.CmdResult">
            <summary>
            Implicitly converts a <see cref="T:GameCore.BaseType.CmdResult`1"/> to a non-generic <see cref="T:GameCore.BaseType.CmdResult"/>.
            </summary>
            <param name="cmdResult">The generic command result to convert.</param>
            <returns>The underlying command result without the value information.</returns>
            <remarks>
            This operator allows generic command results to be used where non-generic results are expected.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.op_Implicit(GameCore.BaseType.CmdError)~GameCore.BaseType.CmdResult{`0}">
            <summary>
            Implicitly converts a <see cref="T:GameCore.BaseType.CmdError"/> to a failed <see cref="T:GameCore.BaseType.CmdResult`1"/>.
            </summary>
            <param name="error">The error to wrap in a failed result.</param>
            <returns>A failed command result containing the specified error.</returns>
            <remarks>
            This operator provides convenient creation of failed results from error values.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.op_True(GameCore.BaseType.CmdResult{`0})">
            <summary>
            Enables the use of <see cref="T:GameCore.BaseType.CmdResult`1"/> in boolean contexts, returning <c>true</c> for success.
            </summary>
            <param name="x">The command result to evaluate.</param>
            <returns><c>true</c> if the command was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator allows <see cref="T:GameCore.BaseType.CmdResult`1"/> to be used directly in if statements and other boolean contexts.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.op_False(GameCore.BaseType.CmdResult{`0})">
            <summary>
            Enables the use of <see cref="T:GameCore.BaseType.CmdResult`1"/> in boolean contexts, returning <c>false</c> for success.
            </summary>
            <param name="x">The command result to evaluate.</param>
            <returns><c>false</c> if the command was successful; otherwise, <c>true</c>.</returns>
            <remarks>
            This operator is the complement of the <c>true</c> operator and is required for boolean logic operations.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.op_LogicalNot(GameCore.BaseType.CmdResult{`0})">
            <summary>
            Negates the success state of the command result.
            </summary>
            <param name="x">The command result to negate.</param>
            <returns><c>true</c> if the command failed; <c>false</c> if it succeeded.</returns>
            <remarks>
            This operator allows for negation of the success state, useful for checking failure conditions.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.op_BitwiseAnd(GameCore.BaseType.CmdResult{`0},GameCore.BaseType.CmdResult{`0})">
            <summary>
            Performs a logical AND operation on two command results, returning the more severe error.
            </summary>
            <param name="x">The first command result.</param>
            <param name="y">The second command result.</param>
            <returns>The command result with the higher error severity, or the first successful result if both succeed.</returns>
            <remarks>
            This operator combines two generic command results, preserving values when possible
            and selecting the more severe error when both fail.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.CmdResult`1.ToString">
            <summary>
            Returns a string representation of the command result.
            </summary>
            <returns>A string containing either the value (for success) or the error information (for failure).</returns>
            <remarks>
            This method provides a human-readable representation of the command result,
            showing either the contained value or the error details.
            </remarks>
        </member>
        <member name="T:GameCore.BaseType.DeathType">
            <summary>
            Defines the different types of death or destruction that can occur to game entities.
            </summary>
            <remarks>
            This enum categorizes how entities die or are removed from the game, which can affect
            visual effects, sound effects, revival possibilities, and other game mechanics.
            Different death types may trigger different behaviors or restrictions.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.DeathType.Normal">
            <summary>
            Standard death through normal game mechanics such as health reaching zero.
            </summary>
            <remarks>
            This represents typical death scenarios where an entity dies through conventional
            means like damage, poison, or other health-depleting effects. Normal deaths may
            allow for revival or resurrection depending on game rules.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.DeathType.Destroy">
            <summary>
            Complete destruction that removes the entity entirely from the game.
            </summary>
            <remarks>
            This represents total annihilation where the entity is completely removed
            and typically cannot be revived. Used for permanent removal scenarios.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.DeathType.Impact">
            <summary>
            Death caused by high-impact forces or collision-based damage.
            </summary>
            <remarks>
            This represents death from physical impacts, explosions, or collision damage.
            May trigger specific visual or audio effects related to impact scenarios.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.DeathType.Nullified">
            <summary>
            Death caused by nullification, dispelling, or reality-warping effects.
            </summary>
            <remarks>
            This represents death from magical nullification, reality manipulation, or
            other supernatural causes that erase or negate the entity's existence.
            May bypass normal death protections or immunities.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.DisposableObject.DisposeUnmanaged(System.Boolean)">
            <summary>
            Override this method to dispose unmanaged resources.
            </summary>
            <param name="finalizing">
            If true, the method is called from the finalizer.
            </param>
        </member>
        <member name="T:GameCore.BaseType.Fraction">
            <summary>
            Represents a fractional value in the range [0.0, 1.0].
            </summary>
            <remarks>The <see cref="T:GameCore.BaseType.Fraction"/> struct is designed to encapsulate a fractional value that is always 
            constrained to the range [0.0, 1.0]. Any attempt to create a <see cref="T:GameCore.BaseType.Fraction"/> with a value  outside this range
            will result in a debug assertion failure in debug builds.</remarks>
        </member>
        <member name="T:GameCore.BaseType.Probability">
            <summary>
            Represents a probability value in the range [0.0, 1.0].
            </summary>
            <remarks>The <see cref="T:GameCore.BaseType.Probability"/> struct is designed to encapsulate a probability value, ensuring it
            remains within the valid range of 0.0 to 1.0. It provides methods and operators for arithmetic operations, random
            generation, and conversions to and from other numeric types.  This type is immutable. It is suitable
            for use in scenarios requiring high-precision probability calculations, such as simulations or statistical
            modeling. 精确到小数点后28位。</remarks>
        </member>
        <member name="M:GameCore.BaseType.Probability.GenerateHighPrecisionRandom">
            <summary>
            生成高精度的随机 decimal 值，范围 [0.0, 1.0]
            使用96位精度，远超 double 的53位精度
            </summary>
        </member>
        <member name="M:GameCore.BaseType.Probability.NextRandom">
            <summary>
            Generates a new random probability value.
            </summary>
            <remarks>The generated probability is created using a high-precision random number generator. This
            method is suitable for scenarios requiring precise random values within the range of probabilities.</remarks>
            <returns>A <see cref="T:GameCore.BaseType.Probability"/> instance representing a random value between 0 and 1, inclusive.</returns>
        </member>
        <member name="T:GameCore.BaseType.TargetType">
            <summary>
            定义效果节点的目标类型，决定效果创建后的位置类型和表现行为。
            </summary>
            <remarks>
            <para>
            TargetType 属性是效果系统的核心配置之一，它不仅决定了效果节点如何解析目标，
            更重要的是影响了效果节点的视觉表现（Actor）的播放位置和跟随行为。
            </para>
            <para>
            <strong>🎯 目标解析规则：</strong>
            </para>
            <list type="bullet">
            <item><see cref="F:GameCore.BaseType.TargetType.Any"/>：接受目标的天然类型，不进行类型转换</item>
            <item><see cref="F:GameCore.BaseType.TargetType.Unit"/>：强制转换为单位目标，如果目标是点则会令整个效果执行失败</item>
            <item><see cref="F:GameCore.BaseType.TargetType.Point"/>：强制转换为点目标，提取目标的坐标位置作为效果的执行目标</item>
            </list>
            <para>
            <strong>🎭 表现播放影响：</strong>
            </para>
            <list type="bullet">
            <item><strong>持续性效果</strong>：如果 TargetType 为 Unit，表现会在生存周期内跟随目标单位移动</item>
            <item><strong>瞬间效果</strong>：虽然效果本身瞬间生效，但附带的表现仍受 TargetType 影响</item>
            <item><strong>AOE 搜索效果</strong>：即使搜索结果相同，表现的播放位置也会根据 TargetType 而不同</item>
            </list>
            <para>
            💡 示例：以单位为中心的 AOE 伤害效果，如果 TargetType 设为 Unit，爆炸特效会跟随单位移动直到播放结束；
            如果设为 Point，特效会停留在单位施法瞬间的地点播放。
            </para>
            <para>
            <strong>⚠️ 语义限制：</strong>
            </para>
            <para>
            某些效果类型由于业务语义限制，天然只能对单位实体生效，不应将 TargetType 设置为 Point：
            </para>
            <list type="bullet">
            <item><strong>伤害效果</strong>（GameDataEffectDamage）：只能对单位造成伤害</item>
            <item><strong>Buff效果</strong>（GameDataEffectBuffAdd/Remove）：只能为单位添加/移除状态</item>
            <item><strong>移动器效果</strong>（GameDataEffectUnitMoverApply/Remove）：只能修改单位的移动行为</item>
            <item><strong>单位属性修改</strong>（GameDataEffectUnitModifyVital/Facing/Owner）：只能修改单位属性</item>
            <item><strong>技能修改效果</strong>（GameDataEffectAbilityModify系列）：只能修改单位的技能</item>
            </list>
            <para>
            这些效果通常继承自 GameDataEffectUnit 基类，其默认 TargetType 为 Unit。
            手动设置为 Point 会导致整个效果执行失败，因为点目标无法满足效果的业务语义要求。
            </para>
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.TargetType.Any">
            <summary>
            接受任何有效的目标类型，保持目标的天然类型不变。
            </summary>
            <remarks>
            <para>
            这是最宽松的目标类型，允许效果节点接受任何可目标化的对象或位置。
            效果会基于传入目标的实际类型进行相应处理。
            </para>
            <para>
            <strong>适用场景：</strong>通用型效果、需要灵活处理不同目标类型的效果。
            </para>
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.TargetType.Unit">
            <summary>
            目标必须是单位实体（玩家、NPC、生物或其他可交互对象）。
            </summary>
            <remarks>
            <para>
            此设置会将目标强制转换为单位类型。如果传入的目标解析结果不是实体，
            效果节点将直接执行失败。
            </para>
            <para>
            <strong>表现行为：</strong>对于持续性效果，附带的视觉表现（Actor）会在整个生存周期内
            跟随目标单位移动。对于瞬间效果，表现也会以目标单位为中心播放并跟随其移动直到播放结束。
            </para>
            <para>
            <strong>适用场景：</strong>单体伤害、Buff效果、治疗技能、需要跟随单位的持续表现等。
            </para>
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.TargetType.Point">
            <summary>
            目标必须是场景中的特定点或位置坐标。
            </summary>
            <remarks>
            <para>
            此设置会将目标强制转换为点类型。如果传入的目标是单位，
            会提取该单位在效果节点执行瞬间的坐标位置。
            </para>
            <para>
            <strong>表现行为：</strong>无论效果是否持续，附带的视觉表现（Actor）都会固定在
            指定的坐标点播放，不会跟随任何单位移动。
            </para>
            <para>
            <strong>适用场景：</strong>AOE范围技能、地面陷阱、环境效果、固定位置的特效播放等。
            </para>
            <para>
            <strong>💡 重要提示：</strong>即使是以单位为中心的AOE搜索，如果TargetType设为Point，
            搜索会正常进行，但爆炸特效会停留在单位当时的位置而不是跟随单位移动。
            </para>
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.Invulnerable">
            <summary>
            无敌
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.SpellImmunity">
            <summary>
            魔免
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.Ethereal">
            <summary>
            物免
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.Unkillable">
            <summary>
            免死
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.Summoned">
            <summary>
            召唤
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.UnCommandable">
            <summary>
            无法被玩家或AI命令
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.Dead">
            <summary>
            死亡
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.Illusion">
            <summary>
            幻象
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.Hidden">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.InvisibleToEnemy">
            <summary>
            Indicates whether the entity is invisible to enemies. This affects how enemies perceive and interact with the
            entity.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.Detected">
            <summary>
            Revealed to enemy, suppress InvisibleToEnemy
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.UnobstructedSight">
            <summary>
            可理解为空中视野，视野范围为圆形，不会被障碍物阻挡
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.VectorMove3D">
            <summary>
            单位可以进行3D摇杆移动，如飞行等等。仅适用于3D模式游戏。
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.VectorMoveBypassOrderQueue">
            <summary>
            单位可以进行摇杆移动，即使单位正在施法。
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.IgnoreSelector">
            <summary>
            无法被搜索
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.IgnoreTerrainHeight">
            <summary>
            Indicates whether terrain height should be ignored in calculations. Useful for scenarios where elevation is not
            a factor.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.SuppressActor">
            <summary>
            隐藏表现
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.SuppressAutoTurningWhenMoving">
            <summary>
            摇杆移动与寻路时，禁止自动转向。否则会自动面向移动方向。
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.SuppressDynamicCollision">
            <summary>
            忽略动态碰撞
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.SuppressStaticCollision">
            <summary>
            忽略静态碰撞
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.SuppressMovement">
            <summary>
            Temporarily prevents the unit from walking or pathfinding, such as when stunned or frozen by a buff. 
            Unlike <see cref="F:GameCore.BaseType.UnitState.DisableMovement"/> this state suggests that the unit's movement is temporarily suppressed; it 
            still allows the unit to handle approach orders and resume movement. The unit will proceed to moving 
            once the suppression is lifted.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.DisableMovement">
            <summary>
            Permanently disables the unit's ability to move, preventing walking, pathfinding, or handling approach orders. 
            Unlike <see cref="F:GameCore.BaseType.UnitState.SuppressMovement"/> this state indicates indefinite movement restriction; instead of temporarily
            suppressed, the unit will not be able to handle any approaching orders.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.SuppressTurning">
            <summary>
            Temporarily prevents the unit from turning or facing to an object, such as when stunned or frozen by a buff. 
            </summary>
            <remarks>Unlike <see cref="F:GameCore.BaseType.UnitState.DisableTurning"/> this state suggests that the unit's turning is temporarily suppressed; it still allows the unit to handle approach orders and resume turning. The unit will proceed to turning once the suppression is lifted.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.EUnitState.DisableTurning">
            <summary>
            Disables the ability to turn or face to a direction.
            </summary>
            <remarks>This method prevents any further turning or facing actions on the object.  It is typically
            used to lock the object's orientation in scenarios where facing is not allowed.</remarks>
        </member>
        <member name="M:GameCore.BaseType.ValidatorExtension.PreValidate(GameCore.BaseType.ValidatorEffect,GameCore.Execution.Effect,GameCore.EntitySystem.Entity)">
            <summary>
            Invokes the specified validator effect on the given effect, temporarily setting its target to the provided
            entity for validation purposes.
            </summary>
            <remarks>If the effect is marked as pre-validator only, the target is set and the validator is invoked
            directly. Otherwise, the original target is preserved and restored after validation. This method is typically
            used to validate effects against different potential targets without permanently modifying the effect's
            state.</remarks>
            <param name="validatorEffect">A delegate that performs validation on the effect and returns a command result.</param>
            <param name="effect">The effect to be validated. Its target will be temporarily set to the specified entity during validation.</param>
            <param name="target">The entity to assign as the target of the effect during validation.</param>
            <returns>A CmdResult indicating the outcome of the validation operation.</returns>
        </member>
        <member name="T:GameCore.BaseType.ValueRange`1">
            <summary>
            Represents a range of values with minimum and maximum bounds for any comparable type.
            </summary>
            <typeparam name="T">The type of values in the range, which must implement <see cref="T:System.IComparable`1"/>.</typeparam>
            <remarks>
            This struct automatically handles invalid ranges where min > max by swapping the values and logging a warning.
            It provides methods to check if a value falls within the defined range.
            </remarks>
        </member>
        <member name="P:GameCore.BaseType.ValueRange`1.Min">
            <summary>
            Gets or sets the minimum value of the range.
            </summary>
        </member>
        <member name="P:GameCore.BaseType.ValueRange`1.Max">
            <summary>  
            Gets or sets the maximum value of the range.
            </summary>
        </member>
        <member name="M:GameCore.BaseType.ValueRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.BaseType.ValueRange`1"/> struct with the specified minimum and maximum values.
            </summary>
            <param name="min">The minimum value of the range.</param>
            <param name="max">The maximum value of the range.</param>
            <remarks>
            If <paramref name="min"/> is greater than <paramref name="max"/>, the values will be swapped and a warning will be logged.
            </remarks>
        </member>
        <member name="M:GameCore.BaseType.ValueRange`1.IsInRange(`0)">
            <summary>
            Determines whether the specified value falls within this range (inclusive of boundaries).
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if the value is within the range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:GameCore.BaseType.UnitState.Invulnerable">
            <summary>
            无敌
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.SpellImmunity">
            <summary>
            魔免
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.Ethereal">
            <summary>
            物免
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.Unkillable">
            <summary>
            免死
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.Summoned">
            <summary>
            召唤
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.UnCommandable">
            <summary>
            无法被玩家或AI命令
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.Dead">
            <summary>
            死亡
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.Illusion">
            <summary>
            幻象
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.Hidden">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.InvisibleToEnemy">
            <summary>
            Indicates whether the entity is invisible to enemies. This affects how enemies perceive and interact with the
            entity.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.Detected">
            <summary>
            Revealed to enemy, suppress InvisibleToEnemy
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.UnobstructedSight">
            <summary>
            可理解为空中视野，视野范围为圆形，不会被障碍物阻挡
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.VectorMove3D">
            <summary>
            单位可以进行3D摇杆移动，如飞行等等。仅适用于3D模式游戏。
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.VectorMoveBypassOrderQueue">
            <summary>
            单位可以进行摇杆移动，即使单位正在施法。
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.IgnoreSelector">
            <summary>
            无法被搜索
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.IgnoreTerrainHeight">
            <summary>
            Indicates whether terrain height should be ignored in calculations. Useful for scenarios where elevation is not
            a factor.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.SuppressActor">
            <summary>
            隐藏表现
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.SuppressAutoTurningWhenMoving">
            <summary>
            摇杆移动与寻路时，禁止自动转向。否则会自动面向移动方向。
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.SuppressDynamicCollision">
            <summary>
            忽略动态碰撞
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.SuppressStaticCollision">
            <summary>
            忽略静态碰撞
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.SuppressMovement">
            <summary>
            Temporarily prevents the unit from walking or pathfinding, such as when stunned or frozen by a buff.
            Unlike  this state suggests that the unit's movement is temporarily suppressed; it
            still allows the unit to handle approach orders and resume movement. The unit will proceed to moving
            once the suppression is lifted.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.DisableMovement">
            <summary>
            Permanently disables the unit's ability to move, preventing walking, pathfinding, or handling approach orders.
            Unlike  this state indicates indefinite movement restriction; instead of temporarily
            suppressed, the unit will not be able to handle any approaching orders.
            </summary>
        </member>
        <member name="F:GameCore.BaseType.UnitState.SuppressTurning">
            <summary>
            Temporarily prevents the unit from turning or facing to an object, such as when stunned or frozen by a buff.
            </summary>
            <remarks>
            Unlike  this state suggests that the unit's turning is temporarily suppressed; it still allows the unit to handle approach orders and resume turning. The unit will proceed to turning once the suppression is lifted.
            </remarks>
        </member>
        <member name="F:GameCore.BaseType.UnitState.DisableTurning">
            <summary>
            Disables the ability to turn or face to a direction.
            </summary>
            <remarks>
            This method prevents any further turning or facing actions on the object.  It is typically
            used to lock the object's orientation in scenarios where facing is not allowed.
            </remarks>
        </member>
        <member name="T:GameCore.Behavior.GameDataModifier">
            <summary>
            Represents the base class for behavior modifier configurations that alter or enhance entity behaviors and properties.
            </summary>
            <remarks>
            This class serves as the foundation for all behavior modification systems, including buffs, debuffs, passive abilities,
            auras, and other effects that dynamically alter how entities behave or perform. Modifiers can affect properties like
            damage, speed, health, abilities, and other gameplay characteristics, providing a flexible system for temporary or
            permanent changes to entity behavior.
            </remarks>
        </member>
        <member name="P:GameCore.Behavior.Response.IsPersistDuringMorph">
            <summary>
            If the response is persisting during morph.
            Currently responses directly attached to the unit are not persisted during morph.
            </summary>
        </member>
        <member name="M:GameCore.BuffSystem.Buff.#ctor(GameCore.EntitySystem.Unit,GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff},System.Nullable{System.UInt32},System.Nullable{System.TimeSpan})">
            <summary>
            Client-side constructor for replicating Buff objects from server.
            </summary>
            <param name="owner">The unit that owns this buff</param>
            <param name="link">The GameDataBuff link</param>
            <param name="stack">The stack count</param>
            <param name="durationOverride">Override duration if any</param>
        </member>
        <member name="P:GameCore.BuffSystem.Data.GameDataBuff.BuffsEnable">
            <summary>
            Is dropdown only if the list does not allow null values
            </summary>
        </member>
        <member name="T:GameCore.BuffSystem.Data.Struct.BuffFlags">
            <summary>
            定义 Buff 效果的行为标志，控制 Buff 的各种特性和生命周期管理
            </summary>
            <remarks>
            BuffFlags 类用于配置 Buff 效果的特殊行为，包括叠加规则、持续性设置、
            死亡时的处理和引导效果等。这些标志影响 Buff 在游戏中的应用和管理方式。
            </remarks>
        </member>
        <member name="P:GameCore.BuffSystem.Data.Struct.BuffFlags.SingleInstancePerCaster">
            <summary>
            获取或设置是否每个施法者只能对同一目标施加一个相同类型的 Buff 实例
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，如果同一个施法者尝试对已有相同 Buff 的目标再次施加该 Buff，
            新的 Buff 会替换旧的实例，并重置 Buff 的持续时间。如果 Buff 未达到最大叠加次数，则会将新旧实例的叠加次数相加。
            </remarks>
        </member>
        <member name="P:GameCore.BuffSystem.Data.Struct.BuffFlags.Permanent">
            <summary>
            获取或设置 Buff 是否为永久效果
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，Buff 不会因为变身、死亡等条件而消失。
            </remarks>
        </member>
        <member name="P:GameCore.BuffSystem.Data.Struct.BuffFlags.DisableWhenDead">
            <summary>
            获取或设置当单位死亡时是否禁用此 Buff
            </summary>
            <remarks>
            默认值为 <c>true</c>，意味着大多数 Buff 在单位死亡时会被禁用或移除。
            设置为 <c>false</c> 可以让某些特殊效果在死亡后继续存在，例如灵魂形态或复活效果。
            </remarks>
        </member>
        <member name="P:GameCore.BuffSystem.Data.Struct.BuffFlags.Channeling">
            <summary>
            获取或设置 Buff 是否为引导效果
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，表示此 Buff 需要施法者持续引导，如果施法者的引导被打断，
            该 Buff 也会被移除。这通常用于需要集中精神维持的法术效果。
            </remarks>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.HasBuff(GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff})">
            <summary>
            检查是否有指定的Buff
            </summary>
            <param name="buffLink">Buff数编Link</param>
            <returns>如果存在指定Buff则返回true</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.HasAnyBuff(GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff}[])">
            <summary>
            检查是否有任意一个指定的Buff
            </summary>
            <param name="buffLinks">Buff数编Link数组</param>
            <returns>如果存在任意一个指定Buff则返回true</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.HasAllBuffs(GameData.IGameLink{GameCore.BuffSystem.Data.GameDataBuff}[])">
            <summary>
            检查是否有所有指定的Buff
            </summary>
            <param name="buffLinks">Buff数编Link数组</param>
            <returns>如果存在所有指定Buff则返回true</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.RemoveByPredicate(System.Func{GameCore.BuffSystem.Buff,System.Boolean})">
            <summary>
            按条件移除Buff
            </summary>
            <param name="predicate">移除条件</param>
            <returns>移除的Buff数量</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.DispelBuffs(GameCore.BuffSystem.Data.Enum.BuffPolarity,System.Boolean)">
            <summary>
            驱散指定极性的Buff
            </summary>
            <param name="polarity">要驱散的Buff极性</param>
            <param name="onlyDispellable">是否只驱散可驱散的Buff</param>
            <returns>驱散的Buff数量</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.DispelPositiveBuffs(System.Boolean)">
            <summary>
            驱散有益Buff
            </summary>
            <param name="onlyDispellable">是否只驱散可驱散的Buff</param>
            <returns>驱散的Buff数量</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.DispelNegativeBuffs(System.Boolean)">
            <summary>
            驱散有害Buff
            </summary>
            <param name="onlyDispellable">是否只驱散可驱散的Buff</param>
            <returns>驱散的Buff数量</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.ClearAllDispellableBuffs">
            <summary>
            清除所有可驱散的Buff
            </summary>
            <returns>清除的Buff数量</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.HasState(GameCore.BaseType.UnitState)">
            <summary>
            检查单位是否有指定状态（通过Buff添加的）
            </summary>
            <param name="state">要检查的状态</param>
            <returns>如果单位具有该状态则返回true</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.GetCurrentStates">
            <summary>
            获取单位当前所有状态（通过Buff添加的）
            </summary>
            <returns>当前所有状态的集合</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.GetBuffsByPolarity(GameCore.BuffSystem.Data.Enum.BuffPolarity)">
            <summary>
            获取指定极性的所有Buff
            </summary>
            <param name="polarity">Buff极性</param>
            <returns>指定极性的Buff集合</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.GetPositiveBuffs">
            <summary>
            获取所有有益Buff
            </summary>
            <returns>有益Buff集合</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.GetNegativeBuffs">
            <summary>
            获取所有有害Buff
            </summary>
            <returns>有害Buff集合</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.GetDispellableBuffs">
            <summary>
            获取所有可驱散的Buff
            </summary>
            <returns>可驱散的Buff集合</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.CountBuffs(System.Func{GameCore.BuffSystem.Buff,System.Boolean})">
            <summary>
            统计指定类型的Buff数量
            </summary>
            <param name="predicate">统计条件</param>
            <returns>满足条件的Buff数量</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.CountBuffsByPolarity(GameCore.BuffSystem.Data.Enum.BuffPolarity)">
            <summary>
            统计指定极性的Buff数量
            </summary>
            <param name="polarity">Buff极性</param>
            <returns>指定极性的Buff数量</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.CountPositiveBuffs">
            <summary>
            统计有益Buff数量
            </summary>
            <returns>有益Buff数量</returns>
        </member>
        <member name="M:GameCore.BuffSystem.Manager.BuffManager.CountNegativeBuffs">
            <summary>
            统计有害Buff数量
            </summary>
            <returns>有害Buff数量</returns>
        </member>
        <member name="T:GameCore.CameraSystem.Enum.CameraPositionMode">
            <summary>
            Specifies the mode used to position the camera in a 3D scene.
            </summary>
            <remarks>
            This enumeration defines the two primary modes for camera positioning:
            <list type="bullet">
            <item>
            <term>FocalPoint</term>
            <description>
            Positions the camera based on a focal point in the scene, typically used for targeting a specific object or area.
            </description>
            </item>
            <item>
            <term>CameraLocation</term>
            <description>
            Positions the camera based on the camera's location, often used for first-person or free-camera perspectives.
            </description>
            </item>
            </list>
            Use this enumeration to configure how the camera interacts with the scene, depending on the desired perspective or interaction model.
            </remarks>
        </member>
        <member name="F:GameCore.CameraSystem.Enum.CameraPositionMode.FocalPoint">
            <summary>
            Positions the camera based on a focal point in the scene, typically used for targeting a specific object or area.
            </summary>
        </member>
        <member name="F:GameCore.CameraSystem.Enum.CameraPositionMode.CameraLocation">
            <summary>
            Positions the camera based on the camera's location, often used for first-person or free-camera perspectives.
            </summary>
        </member>
        <member name="T:GameCore.CameraSystem.Enum.CameraTargetingMode">
            <summary>
            Specifies the mode used to determine how the camera targets or interacts with entities or the scene.
            </summary>
            <remarks>
            This enumeration defines the primary modes for camera targeting:
            <list type="bullet">
            <item>
            <term>FollowTarget</term>
            <description>
            The camera follows a target entity, maintaining a specified distance and angle. 
            This is commonly used for third-person or chase camera perspectives.
            </description>
            </item>
            <item>
            <term>StaticPosition</term>
            <description>
            The camera remains in a fixed position and does not follow any target entity. 
            This is useful for cutscenes or overview perspectives.
            </description>
            </item>
            <item>
            <term>GestureDriven</term>
            <description>
            The camera is controlled by user gestures, allowing for free interaction. 
            This is often used in touch-based or VR environments.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:GameCore.CameraSystem.Enum.CameraTargetingMode.Follow">
            <summary>
            The camera follows a target entity, maintaining a specified distance and angle from it.
            </summary>
        </member>
        <member name="F:GameCore.CameraSystem.Enum.CameraTargetingMode.Static">
            <summary>
            The camera is in a fixed position and does not follow any target entity.
            </summary>
        </member>
        <member name="F:GameCore.CameraSystem.Enum.CameraTargetingMode.Gesture">
            <summary>
            Represents a gesture-driven mode for the camera, allowing for user interaction through gestures.
            </summary>
        </member>
        <member name="T:GameCore.Collection.IterationSafeHashSet`1">
            <summary>
            A custom hash set that allows safe removal of elements during iteration.
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:GameCore.Collection.IterationSafeHashSet`1.Add(`0)">
            <summary>
            Adds an element to the set.
            </summary>
            <param name="item">The element to add.</param>
            <returns>True if the element was added; false if it already exists.</returns>
        </member>
        <member name="M:GameCore.Collection.IterationSafeHashSet`1.Remove(`0)">
            <summary>
            Removes an element from the set.
            If called during iteration, the removal is deferred until the iteration completes.
            </summary>
            <param name="item">The element to remove.</param>
            <returns>True if the element was removed; false if it was not found.</returns>
        </member>
        <member name="M:GameCore.Collection.IterationSafeHashSet`1.Clear">
            <summary>
            Clears all elements from the set.
            </summary>
        </member>
        <member name="M:GameCore.Collection.IterationSafeHashSet`1.Contains(`0)">
            <summary>
            Checks if the set contains a specific element.
            </summary>
            <param name="item">The element to check.</param>
            <returns>True if the element exists; otherwise, false.</returns>
        </member>
        <member name="P:GameCore.Collection.IterationSafeHashSet`1.Count">
            <summary>
            Gets the number of elements in the set.
            </summary>
        </member>
        <member name="M:GameCore.Collection.IterationSafeHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the set.
            </summary>
            <returns>An enumerator for the set.</returns>
        </member>
        <member name="M:GameCore.Collection.IterationSafeHashSet`1.ApplyPendingRemovals">
            <summary>
            Applies any pending removals after iteration completes.
            </summary>
        </member>
        <member name="T:GameCore.Components.Component">
            <summary>
            Base class for all components that can be attached to entities, providing common lifecycle management and disposal functionality.
            </summary>
            <remarks>
            Components are modular pieces of functionality that can be attached to entities to provide specific behaviors or capabilities.
            This class handles the basic component lifecycle including creation, validation, and proper disposal.
            All components are automatically managed by their host entity.
            </remarks>
        </member>
        <member name="M:GameCore.Components.Component.#ctor(GameCore.EntitySystem.Entity)">
            <summary>
            Initializes a new component and associates it with the specified host entity.
            </summary>
            <param name="host">The entity that will own this component.</param>
        </member>
        <member name="P:GameCore.Components.Component.IsValid">
            <summary>
            Gets a value indicating whether this component is still valid and has not been disposed.
            </summary>
        </member>
        <member name="P:GameCore.Components.Component.Host">
            <summary>
            Gets the entity that owns this component.
            </summary>
        </member>
        <member name="P:GameCore.Components.Component.SyncId">
            <summary>
            Gets the synchronization identifier for this component, used for networking and replication.
            </summary>
        </member>
        <member name="M:GameCore.Components.Component.Destroy(System.Boolean)">
            <summary>
            Destroys this component and removes it from its host entity.
            </summary>
            <param name="isHostDispose">Indicates whether this destruction is part of the host entity being disposed.</param>
        </member>
        <member name="M:GameCore.Components.Component.Dispose(System.Boolean)">
            <summary>
            Performs the disposal of this component.
            </summary>
            <param name="disposing">True if called from Dispose method; false if called from finalizer.</param>
        </member>
        <member name="M:GameCore.Components.Component.DisposeManaged">
            <summary>
            Disposes managed resources. Override this method to clean up managed resources specific to derived components.
            </summary>
        </member>
        <member name="M:GameCore.Components.Component.DisposeUnmanaged">
            <summary>
            Disposes unmanaged resources. Override this method to clean up unmanaged resources specific to derived components.
            </summary>
        </member>
        <member name="M:GameCore.Components.Component.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:GameCore.Components.Component`1">
            <summary>
            Generic base class for typed components that automatically manage their registration in component sets.
            </summary>
            <typeparam name="TComponent">The specific component type, used for type-safe component set management.</typeparam>
            <remarks>
            This class extends the base Component to provide type-safe component set management.
            Components of the same type are automatically grouped together in sets on their host entity,
            enabling efficient querying and management of similar components.
            </remarks>
        </member>
        <member name="M:GameCore.Components.Component`1.#ctor(GameCore.EntitySystem.Entity)">
            <summary>
            Initializes a new typed component and registers it in the appropriate component set on the host entity.
            </summary>
            <param name="host">The entity that will own this component.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the component type hierarchy is invalid.</exception>
        </member>
        <member name="M:GameCore.Components.Component`1.DisposeManaged">
            <summary>
            Disposes managed resources and removes this component from its type set on the host entity.
            </summary>
        </member>
        <member name="T:GameCore.Components.Data.IGameDataMoverOrbit">
            <summary>
            Defines the configuration interface for orbital movement data, extending basic mover functionality with orbit-specific properties.
            </summary>
            <remarks>
            This interface provides configuration for movers that orbit around specific target entities in circular patterns.
            It supports complex orbital behaviors including self-rotation during orbit, offset calculations relative to target facing,
            height control, and visibility management between orbiting entity and orbit target.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.OrbitAngularVelocity">
            <summary>
            The orbital angular velocity that controls how fast the entity orbits around the target.
            </summary>
            <remarks>
            This defines the angular velocity for orbital movement around the target, measured in degrees per second.
            Positive values create counterclockwise orbit, negative values create clockwise orbit.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.OrbitRadius">
            <summary>
            The orbit radius that defines the distance from the target center to the orbiting entity.
            </summary>
            <remarks>
            This determines how far from the target the entity will orbit. The radius can be dynamic,
            allowing for spiral movements or changing orbital distances over time.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.OrbitRelativeToTargetFacing">
            <summary>
            Whether the orbital angle should be offset by the orbit target's facing direction.
            </summary>
            <remarks>
            When true, the orbital position will be calculated relative to the target's current facing direction,
            causing the orbit to rotate with the target. When false, the orbit maintains fixed world coordinates.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.SelfRotationRate">
            <summary>
            The self-rotation rate that controls how fast the orbiting entity rotates around its own axis.
            </summary>
            <remarks>
            This defines the angular velocity for the entity's self-rotation while orbiting, measured in degrees per second.
            Self-rotation is independent of orbital movement and can create spinning effects during orbit.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.SelfRotationRelativeToTarget">
            <summary>
            Whether the entity's self-rotation should be offset by the orbit target's facing direction.
            </summary>
            <remarks>
            When true, the entity's self-rotation will be relative to the orbit target's current facing direction,
            creating synchronized rotational behavior. When false, self-rotation uses absolute world coordinates.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.InitialFacing">
            <summary>
            The initial facing direction for the orbiting entity when it begins orbital movement.
            </summary>
            <remarks>
            When specified, determines the starting orientation of the orbiting entity. If null, the entity
            retains its current facing direction when orbit begins. This can be used to ensure consistent
            starting positions for orbital effects or formations.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.OrbitHeight">
            <summary>
            The orbital height that defines the vertical offset of the orbiting entity relative to the target.
            </summary>
            <remarks>
            This controls the height at which the entity orbits around the target. Combined with <see cref="P:GameCore.Components.Data.IGameDataMoverOrbit.HeightRelativeToTarget"/>,
            it allows for both absolute and relative height positioning in orbital movement patterns.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.HeightRelativeToTarget">
            <summary>
            Whether the orbit height is calculated relative to the target's height.
            </summary>
            <remarks>
            When true, <see cref="P:GameCore.Components.Data.IGameDataMoverOrbit.OrbitHeight"/> represents an offset relative to the target's current height position.
            When false, it represents an absolute world height coordinate for the orbital plane.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverOrbit.AlwaysVisibleToOrbitTarget">
            <summary>
            Whether the orbiting entity should always remain visible to the orbit target.
            </summary>
            <remarks>
            When true, even if the orbiting entity is of another team or faction, it will remain visible to the target.
            </remarks>
        </member>
        <member name="T:GameCore.Components.Data.IGameDataMoverTarget">
            <summary>
            Defines the configuration interface for movement target data, extending basic mover functionality with target-specific properties.
            </summary>
            <remarks>
            This interface provides configuration for movers that move toward specific targets, including speed control,
            trajectory settings for parabolic movement, directional behavior, and ground alignment. It supports complex
            movement patterns like projectile arcs, homing behaviors, and physics-based motion with acceleration limits.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.Speed">
            <summary>
            Gets the base movement speed function for the mover.
            </summary>
            <remarks>
            This defines the primary speed at which the mover approaches its target.
            The function allows for dynamic speed calculation based on execution context.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.Acceleration">
            <summary>
            Gets the acceleration function that determines how quickly the mover reaches its target speed.
            </summary>
            <remarks>
            When specified, the mover will gradually accelerate to its target speed rather than instantly
            achieving it. This provides more realistic and smooth movement behavior.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.MinSpeed">
            <summary>
            Gets the minimum speed function that constrains the lower bound of movement speed.
            </summary>
            <remarks>
            This ensures the mover maintains a minimum velocity even when slowing down or when
            other factors would reduce its speed below this threshold.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.MaxSpeed">
            <summary>
            Gets the maximum speed function that constrains the upper bound of movement speed.
            </summary>
            <remarks>
            This caps the mover's velocity to prevent excessive speed, even when acceleration
            or other factors would increase speed beyond this limit.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.LaunchHeight">
            <summary>
            Gets the launch height function for parabolic movement trajectories.
            </summary>
            <remarks>
            When specified, the mover will begin its trajectory at this height above its starting position,
            creating an arc-like movement pattern suitable for projectiles or jumping behaviors.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.TargetHeight">
            <summary>
            Gets the target height function that defines the vertical position of the destination.
            </summary>
            <remarks>
            This determines the final height where the mover should arrive. Combined with launch height,
            it helps define the overall trajectory shape for parabolic movement.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.TargetHeightIsAbsolute">
            <summary>
            Gets a value indicating whether the target height is an absolute world position or relative offset.
            </summary>
            <remarks>
            When true, <see cref="P:GameCore.Components.Data.IGameDataMoverTarget.TargetHeight"/> represents an absolute world coordinate.
            When false, it represents an offset relative to the target's position.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.ParabolaApex">
            <summary>
            Gets the parabola apex function that defines the highest point of the movement arc.
            </summary>
            <remarks>
            This controls the peak height of parabolic trajectories, allowing fine-tuning of arc shape
            for different visual and gameplay effects.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.ParabolaLandingHeight">
            <summary>
            Gets the parabola landing height function that defines where the arc intersects the ground.
            </summary>
            <remarks>
            This determines the final ground level for parabolic movement, useful for projectiles
            that need to account for terrain height differences.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.TurnToDirection">
            <summary>
            Gets a value indicating whether the mover should rotate to face its movement direction.
            </summary>
            <remarks>
            When true, the mover will automatically orient itself to face the direction it's moving,
            providing natural-looking movement behavior for units and projectiles.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.TurnToVelocity">
            <summary>
            Gets a value indicating whether the mover should rotate to face its velocity vector.
            </summary>
            <remarks>
            Similar to <see cref="P:GameCore.Components.Data.IGameDataMoverTarget.TurnToDirection"/> but uses the actual velocity vector, which may
            differ from movement direction when acceleration or external forces are applied.
            </remarks>
        </member>
        <member name="P:GameCore.Components.Data.IGameDataMoverTarget.StickToGround">
            <summary>
            Gets a value indicating whether the mover should maintain contact with the ground during movement.
            </summary>
            <remarks>
            When true, the mover will follow terrain contours and stay grounded rather than
            moving in straight lines through the air. This is useful for ground-based units.
            </remarks>
        </member>
        <member name="T:GameCore.Components.Mover">
            <summary>
            TODO: Make Mover unique per entity
            </summary>
            <param name="host"></param>
            <param name="context"></param>
        </member>
        <member name="M:GameCore.Components.Mover.#ctor(GameCore.EntitySystem.Entity,GameCore.Interface.IExecutionContext)">
            <summary>
            TODO: Make Mover unique per entity
            </summary>
            <param name="host"></param>
            <param name="context"></param>
        </member>
        <member name="M:GameCore.Components.ObjectManager`2.LinkManager.GetAll">
            <summary>
            This will duplicate the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameCore.Components.ObjectManager`2.GetAll">
            <summary>
            This will duplicate the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameCore.Components.ObjectManager`2.GetAll(GameData.IGameLink{`1})">
            <summary>
            This will duplicate the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameCore.Components.ObjectManager`2.ToString">
            <summary>
            Returns a string representation of this ObjectManager including its type, object count, and host information.
            </summary>
            <returns>A formatted string describing this ObjectManager.</returns>
        </member>
        <member name="T:GameCore.Components.TagComponent">
            <summary>
            Unique tag component, which is used to identify the component by a tag.
            At most one component of each tag can be attached to an entity.
            Component type can be descendent of each class.
            </summary>
        </member>
        <member name="T:GameCore.Components.UnitPropertyComplex">
            <summary>
            Manages complex unit properties, including initialization, calculation, and dependency tracking.
            Provides methods for setting, adding, and retrieving property values, as well as registering property formulas and dependencies.
            </summary>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.OnRegisterGameClass">
            <summary>
            Registers the game class and hooks up property setup to the gameplay settings initialization event.
            </summary>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.SetupAllProperties(GameCore.GameSystem.Data.GameDataGameMode)">
            <summary>
            Sets up all unit properties by registering each property data from the catalog.
            </summary>
            <param name="_">The game mode (unused).</param>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.GetFormula(GameData.IGameLink{GameCore.Data.GameDataUnitProperty})">
            <summary>
            Gets the formula associated with the specified property, if any.
            </summary>
            <param name="property">The property to get the formula for.</param>
            <returns>The <see cref="T:GameCore.Struct.UnitPropertyFormula"/> if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.GetFinal(GameData.IGameLink{GameCore.Data.GameDataUnitProperty})">
            <summary>
            Gets the final value of the specified property, calculating it if necessary.
            </summary>
            <param name="property">The property to retrieve.</param>
            <returns>The final value of the property, or 0 if not set.</returns>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.GetFinalOrNull(GameData.IGameLink{GameCore.Data.GameDataUnitProperty})">
            <summary>
            Gets the final value of the property if it is set or initialized; otherwise, returns <c>null</c>.
            </summary>
            <param name="property">The property to retrieve.</param>
            <returns>The final value if set or initialized; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.RegisterPropertyData(GameCore.Data.GameDataUnitProperty)">
            <summary>
            Registers property data and its formula for the specified property.
            </summary>
            <param name="cache">The property data to register.</param>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.RegisterPropertyData(GameData.IGameLink{GameCore.Data.GameDataUnitProperty})">
            <summary>
            Registers property data and its formula for the specified property link.
            </summary>
            <param name="link">The property link to register.</param>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.RegisterFormula(GameData.IGameLink{GameCore.Data.GameDataUnitProperty},GameCore.Struct.UnitPropertyFormula)">
            <summary>
            Registers a formula for the specified property and tracks its dependencies.
            </summary>
            <param name="property">The property to register the formula for.</param>
            <param name="formula">The formula to register.</param>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.RegisterDependency(GameData.IGameLink{GameCore.Data.GameDataUnitProperty},GameData.IGameLink{GameCore.Data.GameDataUnitProperty})">
            <summary>
            Registers a dependency between two properties.
            </summary>
            <param name="property">The dependent property.</param>
            <param name="dependency">The property it depends on.</param>
            <returns><c>true</c> if the dependency was added; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.#ctor(GameCore.EntitySystem.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.Components.UnitPropertyComplex"/> class for the specified host entity.
            </summary>
            <param name="host">The host entity.</param>
            <exception cref="T:System.Exception">Thrown if the host does not implement <see cref="T:GameCore.BaseInterface.IPropertyHost"/>.</exception>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.Dispose(System.Boolean)">
            <summary>
            Disposes the resources used by the component.
            </summary>
            <param name="disposing">Indicates whether the method is called from Dispose.</param>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplex.CreateInstance(GameCore.EntitySystem.Entity)">
            <summary>
            Creates a new instance of <see cref="T:GameCore.Components.UnitPropertyComplex"/> for the specified entity.
            </summary>
            <param name="content">The entity to attach the component to.</param>
            <returns>A new <see cref="T:GameCore.Components.UnitPropertyComplex"/> instance.</returns>
        </member>
        <member name="T:GameCore.Components.UnitPropertyComplexExtension">
            <summary>
            Extension methods for working with <see cref="T:GameCore.Components.UnitPropertyComplex"/> components on entities.
            </summary>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplexExtension.GetComponent``1(GameCore.EntitySystem.Entity)">
            <summary>
            Gets the <see cref="T:GameCore.Components.UnitPropertyComplex"/> component from the entity, if present.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="entity">The entity to query.</param>
            <returns>The component if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplexExtension.GetOrCreateComponent``1(GameCore.EntitySystem.Entity)">
            <summary>
            Gets or creates the <see cref="T:GameCore.Components.UnitPropertyComplex"/> component on the entity.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="entity">The entity to query or attach to.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:GameCore.Components.UnitPropertyComplexExtension.GetUnitPropertyFinal(GameCore.EntitySystem.Entity,GameData.IGameLink{GameCore.Data.GameDataUnitProperty})">
            <summary>
            Gets the final value of a unit property for the entity, if available.
            </summary>
            <param name="entity">The entity to query.</param>
            <param name="property">The property to retrieve.</param>
            <returns>The final value if available; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:GameCore.Container.Inventory">
            <summary>
            Represents an inventory container that manages a collection of item slots for storing and organizing items.
            </summary>
            <remarks>
            The Inventory class provides a structured way to store, organize, and manipulate items within a game system.
            It consists of a collection of slots, each capable of holding specific types of items based on configuration.
            The inventory supports item absorption (stacking), assignment, and various operations for item management.
            Each inventory is associated with a carrier unit and managed by an InventoryManager for lifecycle control.
            The system handles item state management, ownership changes, and synchronization for multiplayer scenarios.
            </remarks>
        </member>
        <member name="P:GameCore.Container.Inventory.Slots">
            <summary>
            Gets the collection of inventory slots that make up this inventory.
            </summary>
            <value>A list of inventory slots configured for this inventory.</value>
            <remarks>
            Each slot can hold one or more items (if stacking is supported) and has its own
            configuration for item type restrictions and requirements.
            </remarks>
        </member>
        <member name="P:GameCore.Container.Inventory.Manager">
            <summary>
            Gets the inventory manager that owns this inventory.
            </summary>
            <value>The manager responsible for this inventory's lifecycle and operations.</value>
        </member>
        <member name="P:GameCore.Container.Inventory.Carrier">
            <summary>
            Gets the unit that carries this inventory.
            </summary>
            <value>The unit that owns and carries this inventory.</value>
            <remarks>
            The carrier unit determines the context for item requirements, ownership changes,
            and spatial operations like dropping items to the ground.
            </remarks>
        </member>
        <member name="M:GameCore.Container.Inventory.Absorb(GameCore.ItemSystem.ItemPickable)">
            <summary>
            Attempts to absorb (stack) the specified item into existing items in this inventory.
            </summary>
            <param name="inItem">The item to absorb into existing stacks.</param>
            <returns>The total amount of the item that was absorbed.</returns>
            <remarks>
            This method tries to merge the incoming item with existing items of the same type
            in the inventory. It's particularly useful for stackable items like resources or consumables.
            The method will distribute the item across multiple stacks if necessary and possible.
            </remarks>
        </member>
        <member name="P:GameCore.Container.Inventory.Items">
            <summary>
            Gets all items currently stored in this inventory.
            </summary>
            <value>An enumerable collection of all non-null items in the inventory slots.</value>
            <remarks>
            This property provides a convenient way to iterate through all items without
            having to check individual slots. Empty slots are automatically excluded.
            </remarks>
        </member>
        <member name="M:GameCore.Container.Inventory.CanAssign(GameCore.ItemSystem.ItemPickable,GameCore.Container.ReasonItemAssign,GameCore.Container.InventorySlot)">
            <summary>
            Checks if the specified item can be assigned to any slot in this inventory.
            </summary>
            <param name="inItem">The item to test for assignment compatibility.</param>
            <param name="reason">The reason for the assignment attempt.</param>
            <param name="swapSource">The source slot for swap operations, if applicable.</param>
            <returns>The first slot that can accept this item, or null if no suitable slot is found.</returns>
            <remarks>
            This method checks all slots in order to find the first one that can accept the item
            based on the slot's restrictions, item requirements, and the assignment reason.
            It's useful for previewing assignment operations before actually performing them.
            </remarks>
        </member>
        <member name="M:GameCore.Container.Inventory.Assign(GameCore.ItemSystem.ItemPickable,GameCore.Container.ReasonItemAssign,GameCore.Container.InventorySlot)">
            <summary>
            Attempts to assign the specified item to the first available suitable slot in this inventory.
            </summary>
            <param name="inItem">The item to assign to this inventory.</param>
            <param name="reason">The reason for the assignment.</param>
            <param name="swapSource">The source slot for swap operations, if applicable.</param>
            <returns>The slot where the item was assigned, or null if the assignment failed.</returns>
            <remarks>
            This method first checks if the item can be assigned using CanAssign, then performs
            the actual assignment if a suitable slot is found. It provides a convenient way
            to add items to the inventory without manually managing slot selection.
            </remarks>
        </member>
        <member name="M:GameCore.Container.Inventory.Take(GameCore.ItemSystem.ItemPickable)">
            <summary>
            Attempts to take the specified item into this inventory, using absorption and assignment as needed.
            </summary>
            <param name="inItem">The item to take into this inventory.</param>
            <returns>True if the item was successfully taken; otherwise, false.</returns>
            <remarks>
            This method first tries to absorb the item into existing stacks, then attempts to assign
            it to an empty slot if absorption doesn't fully consume the item. It provides the most
            convenient way to add items to an inventory with automatic handling of stacking behavior.
            </remarks>
        </member>
        <member name="M:GameCore.Container.Inventory.ToString">
            <summary>
            Returns a string representation of this inventory including its type, name, ID, and slot/item counts.
            </summary>
            <returns>A formatted string describing this inventory.</returns>
        </member>
        <member name="P:GameCore.Container.Inventory.DebuggerDisplay">
            <summary>
            Gets the display string used by the debugger.
            </summary>
            <value>A string representation of this inventory for debugging purposes.</value>
        </member>
        <member name="P:GameCore.Container.Inventory.HandlePickUpRequest">
            <summary>
            If true, the inventory will handle the pick up request.
            Otherwise, only none-request pick up orders will be handled.
            </summary>
        </member>
        <member name="E:GameCore.Container.InventoryManager.InventoryAttached">
            <summary>
            当Inventory被添加到InventoryManager时触发
            </summary>
        </member>
        <member name="E:GameCore.Container.InventoryManager.InventoryDetached">
            <summary>
            当单个Inventory从InventoryManager中移除时触发，但整个InventoryManager被销毁时不会触发
            </summary>
        </member>
        <member name="M:GameCore.Container.InventoryManager.RemoveInventory(GameCore.Container.Inventory)">
            <summary>
            Cannot be called publicly, only used for internal destruction
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="T:GameCore.Container.InventorySlot">
            <summary>
            Represents a single slot within an inventory that can hold an item with specific restrictions and requirements.
            </summary>
            <remarks>
            InventorySlot is the fundamental unit of item storage within an inventory system. Each slot can hold one item
            (or a stack of identical items) and enforces specific rules about what types of items can be assigned to it.
            Slots support item category filtering, requirement validation, and various assignment/drop operations.
            The slot handles item state management, ownership changes, and synchronization when items are assigned or removed.
            It integrates with the broader inventory system to provide flexible and controlled item management capabilities.
            </remarks>
        </member>
        <member name="M:GameCore.Container.InventorySlot.#ctor(GameCore.Container.Inventory,GameCore.Container.Data.Struct.IInventorySlotData)">
            <summary>
            Represents a single slot within an inventory that can hold an item with specific restrictions and requirements.
            </summary>
            <remarks>
            InventorySlot is the fundamental unit of item storage within an inventory system. Each slot can hold one item
            (or a stack of identical items) and enforces specific rules about what types of items can be assigned to it.
            Slots support item category filtering, requirement validation, and various assignment/drop operations.
            The slot handles item state management, ownership changes, and synchronization when items are assigned or removed.
            It integrates with the broader inventory system to provide flexible and controlled item management capabilities.
            </remarks>
        </member>
        <member name="M:GameCore.Container.InventorySlot.ApplyInventoryItemStates(GameCore.ItemSystem.ItemPickable)">
            <summary>
            Applies inventory-specific states to an item when it's placed in this slot.
            </summary>
            <param name="item">The item to apply inventory states to.</param>
            <remarks>
            This method adds states that prevent the item from being selected, rendered, or colliding
            while it's stored in inventory. It also handles ownership changes to match the inventory carrier.
            </remarks>
        </member>
        <member name="M:GameCore.Container.InventorySlot.RemoveInventoryItemStates(GameCore.ItemSystem.ItemPickable)">
            <summary>
            Removes inventory-specific states from an item when it's removed from this slot.
            </summary>
            <param name="item">The item to remove inventory states from.</param>
            <remarks>
            This method restores the item to its normal state by removing inventory restrictions
            and restoring its original synchronization and ownership settings.
            </remarks>
        </member>
        <member name="P:GameCore.Container.InventorySlot.Inventory">
            <summary>
            Gets the inventory that contains this slot.
            </summary>
            <value>The parent inventory of this slot.</value>
        </member>
        <member name="P:GameCore.Container.InventorySlot.Item">
            <summary>
            Gets or sets the item currently stored in this slot.
            </summary>
            <value>The item in this slot, or null if the slot is empty.</value>
            <remarks>
            This property is managed internally by the slot assignment system and should not be
            modified directly. Use the Assign and Drop methods to properly manage slot contents.
            </remarks>
        </member>
        <member name="P:GameCore.Container.InventorySlot.Cache">
            <summary>
            Gets the configuration data that defines the restrictions and behavior of this slot.
            </summary>
            <value>The slot configuration data containing rules and requirements.</value>
        </member>
        <member name="M:GameCore.Container.InventorySlot.CanDrop(GameCore.Container.ReasonItemDrop,GameCore.Container.InventorySlot)">
            <summary>
            Determines whether an item can be dropped from this slot for the specified reason.
            </summary>
            <param name="reason">The reason for dropping the item.</param>
            <param name="swapSource">The source slot for swap operations, if applicable.</param>
            <returns>True if the item can be dropped; otherwise, false.</returns>
            <remarks>
            This method checks inventory drop permissions and swap compatibility to determine
            if the drop operation is allowed. Different drop reasons have different requirements.
            </remarks>
        </member>
        <member name="M:GameCore.Container.InventorySlot.Drop(GameCore.Container.ReasonItemDrop,GameCore.Container.InventorySlot)">
            <summary>
            Drops the item from this slot according to the specified reason and parameters.
            </summary>
            <param name="reason">The reason for dropping the item.</param>
            <param name="swapSource">The source slot for swap operations, if applicable.</param>
            <returns>True if the drop was successful; otherwise, false.</returns>
            <remarks>
            This method removes the item from the slot and handles the appropriate consequences
            based on the drop reason, such as placing the item on the ground or preparing it for swapping.
            </remarks>
        </member>
        <member name="P:GameCore.Container.InventorySlot.Carrier">
            <summary>
            Gets the unit that carries the inventory containing this slot.
            </summary>
            <value>The carrier unit of the parent inventory.</value>
        </member>
        <member name="M:GameCore.Container.InventorySlot.CanAssign(GameCore.ItemSystem.ItemPickable,GameCore.Container.ReasonItemAssign,GameCore.Container.InventorySlot)">
            <summary>
            Determines whether the specified item can be assigned to this slot.
            </summary>
            <param name="inItem">The item to test for assignment compatibility.</param>
            <param name="reason">The reason for the assignment attempt.</param>
            <param name="swapSource">The source slot for swap operations, if applicable.</param>
            <returns>True if the item can be assigned to this slot; otherwise, false.</returns>
            <remarks>
            This method performs comprehensive validation including item validity, slot availability,
            category restrictions, requirements checking, and swap compatibility. It's used to preview
            assignment operations before actually performing them.
            </remarks>
        </member>
        <member name="M:GameCore.Container.InventorySlot.Assign(GameCore.ItemSystem.ItemPickable,GameCore.Container.ReasonItemAssign,GameCore.Container.InventorySlot)">
            <summary>
            Assigns the specified item to this slot, handling swapping and state management as needed.
            </summary>
            <param name="inItem">The item to assign to this slot.</param>
            <param name="reason">The reason for the assignment.</param>
            <param name="swapSource">The source slot for swap operations, if applicable.</param>
            <returns>True if the assignment was successful; otherwise, false.</returns>
            <remarks>
            This method performs the actual assignment operation after validation, handling item swapping,
            inventory state application, and proper cleanup of source slots. It coordinates with the
            broader inventory system to ensure consistent item management.
            </remarks>
        </member>
        <member name="M:GameCore.Container.InventorySlot.Put(GameCore.ItemSystem.ItemPickable)">
            <summary>
            Attempts to put an item in this slot, using absorption or assignment as appropriate.
            </summary>
            <param name="inItem">The item to put in this slot.</param>
            <returns>True if the item was successfully placed; otherwise, false.</returns>
            <remarks>
            This method first attempts to absorb the item into an existing stack if possible,
            then falls back to assignment with swapping if absorption fails or is not applicable.
            It provides a convenient high-level interface for item placement.
            </remarks>
        </member>
        <member name="M:GameCore.Container.InventorySlot.Destroy">
            <summary>
            Destroys this inventory slot and releases its resources.
            </summary>
            <remarks>
            This method is used internally for slot lifecycle management and should not be called directly.
            </remarks>
        </member>
        <member name="P:GameCore.Container.InventorySlot.MeetRequirement">
            <summary>
            Gets a value indicating whether the item in this slot meets its requirements.
            </summary>
            <value>True if the slot contains an item that meets all requirements; otherwise, false.</value>
            <remarks>
            This property reflects whether the currently stored item satisfies all requirements
            for proper functionality. Items that don't meet requirements may be disabled or restricted.
            </remarks>
        </member>
        <member name="M:GameCore.Container.InventorySlot.ToString">
            <summary>
            Returns a string representation of this inventory slot including its configuration, index, and contained item.
            </summary>
            <returns>A formatted string describing this inventory slot.</returns>
        </member>
        <member name="P:GameCore.Container.InventorySlot.DebuggerDisplay">
            <summary>
            Gets the display string used by the debugger.
            </summary>
            <value>A string representation of this inventory slot for debugging purposes.</value>
        </member>
        <member name="P:GameCore.Container.InventorySlot.SlotIndex">
            <summary>
            Gets the index of this slot within its parent inventory.
            </summary>
            <value>The zero-based index of this slot in the inventory's slot collection.</value>
            <remarks>
            This property is calculated on first access and cached for efficiency. It's used for
            slot identification and ordering within the inventory system.
            </remarks>
        </member>
        <member name="T:GameCore.CooldownSystem.Enum.EPropertyCooldownHost">
            <summary>
            定义冷却时间宿主的属性类型，用于标识和管理不同类型的冷却时间容器
            </summary>
            <remarks>
            此枚举提供了扩展能力，允许在运行时动态添加新的冷却时间宿主属性类型。
            冷却时间宿主属性用于识别和访问可以承载冷却时间的不同容器和组件，
            为冷却时间系统提供了灵活的存储和管理机制。
            </remarks>
        </member>
        <member name="F:GameCore.CooldownSystem.Enum.EPropertyCooldownHost.AttachedObjects">
            <summary>
            附加对象列表 - 用于管理附加到实体上的对象的冷却时间
            </summary>
            <remarks>
            表示一个附加对象的列表，这些对象可以承载冷却时间。
            通常在数据链接设置完成后插入到列表中进行管理。
            这种类型的宿主适用于动态附加的组件、技能、物品等对象的冷却时间管理。
            </remarks>
        </member>
        <member name="F:GameCore.CooldownSystem.Enum.PropertyCooldownHost.AttachedObjects">
            <summary>
            附加对象列表 - 用于管理附加到实体上的对象的冷却时间
            </summary>
            <remarks>
            表示一个附加对象的列表，这些对象可以承载冷却时间。
            通常在数据链接设置完成后插入到列表中进行管理。
            这种类型的宿主适用于动态附加的组件、技能、物品等对象的冷却时间管理。
            </remarks>
        </member>
        <member name="T:GameCore.CostSystem.ICostSpender">
            <summary>
            Everything that implements this interface should call InitializeCooldown in its constructor, and ClearUpCooldowns in its dispose method.
            </summary>
        </member>
        <member name="P:GameCore.DamageSystem.Data.GameDataDamageType.FloatingTextDealt">
            <summary>
            The floating text to display when this damage is notified to the player when the player deals this damage type.
            If not set, the user can still capture the damage notification event and display the floating text manually.
            </summary>
        </member>
        <member name="P:GameCore.DamageSystem.Data.GameDataDamageType.FloatingTextDealtCritical">
            <summary>
            The floating text to display when this damage is notified to the player when the player deals critical damage of this type.
            If not set, the game system will use the default critical damage floating text style.
            </summary>
        </member>
        <member name="P:GameCore.DamageSystem.Data.GameDataDamageType.FloatingTextReceived">
            <summary>
            The floating text to display when this damage is notified to the player when the player receives this damage type.
            If not set, the user can still capture the damage notification event and display the floating text manually.
            </summary>
        </member>
        <member name="P:GameCore.DamageSystem.Data.GameDataDamageType.FloatingTextReceivedCritical">
            <summary>
            The floating text to display when this damage is notified to the player when the player receives critical damage of this type.
            If not set, the game system will use the default critical damage floating text style.
            </summary>
        </member>
        <member name="T:GameCore.Data.IGameDataMorph">
            <summary>
            Defines the interface for morph transformation data, allowing entities to change into different unit types.
            </summary>
            <remarks>
            This interface provides configuration for morphing abilities that can transform one unit type into another.
            Morphing is commonly used for shape-shifting abilities, unit upgrades, or transformation effects.
            The transformation maintains certain properties while changing the unit's fundamental type and capabilities.
            </remarks>
        </member>
        <member name="P:GameCore.Data.IGameDataMorph.MorphUnit">
            <summary>
            Gets the game data link for the unit type that this morph will transform the entity into.
            </summary>
            <remarks>
            This defines the target unit type for the morphing transformation. The entity will change
            from its current unit type to the type specified by this link, gaining new abilities,
            models, and properties defined by the target unit data.
            </remarks>
        </member>
        <member name="P:GameCore.Data.IGameDataMorph.MorphFlags">
            <summary>
            Gets the flags that control how the morphing transformation behaves.
            </summary>
            <remarks>
            These flags determine various aspects of the morphing process, such as whether certain
            properties are preserved, how the transformation is visually presented, and what
            restrictions or conditions apply during the morph operation.
            </remarks>
        </member>
        <member name="P:GameCore.DisplayInfo.Data.IDisplayInfoData.DisplayName">
            <summary>
            Gets the display name of the object.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.Data.IDisplayInfoData.Description">
            <summary>
            Gets the description of the object.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.Data.IDisplayInfoData.Icon">
            <summary>
            Gets the icon associated with the object.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.DisplayName">
            <summary>
            Gets the display name of the object.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.Description">
            <summary>
            Gets the description of the object.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.Icon">
            <summary>
            Gets the icon associated with the object.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.Stack">
            <summary>
            Gets the current stack value for display purposes, or <see langword="null"/> if no stack is defined.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.Level">
            <summary>
            Gets the current level value for display purposes, or <see langword="null"/> if the level is not set.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.Cooldown">
            <summary>
            Gets the cooldown duration, in seconds, for display purposes, or <see langword="null"/> if no cooldown is defined.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.CoolDownMax">
            <summary>
            Gets the maximum cooldown duration, in seconds, for display purposes, or <see langword="null"/> if no maximum cooldown is defined.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.ChargeCooldown">
            <summary>
            Gets the charge cooldown duration, in seconds, for display purposes, or <see langword="null"/> if no IDisplayInfo cooldown is defined.
            </summary>
        </member>
        <member name="P:GameCore.DisplayInfo.IDisplayInfo.ChargeCooldownMax">
            <summary>
            Gets the maximum charge cooldown duration, in seconds, for display purposes, or <see langword="null"/> if no maximum cooldown is defined.
            </summary>
        </member>
        <member name="T:GameCore.Drawing.HdrColor">
            <summary>
            Represents a high-dynamic-range (HDR) color with 16-bit (short) channels for red, green, and blue,
            and an alpha channel. Supports construction from standard <see cref="T:System.Drawing.Color"/> and scaling for HDR scenarios.
            </summary>
        </member>
        <member name="F:GameCore.Drawing.HdrColor.R">
            <summary>
            The red channel value. Can exceed the standard 0-255 range for HDR purposes.
            </summary>
        </member>
        <member name="F:GameCore.Drawing.HdrColor.G">
            <summary>
            The green channel value. Can exceed the standard 0-255 range for HDR purposes.
            </summary>
        </member>
        <member name="F:GameCore.Drawing.HdrColor.B">
            <summary>
            The blue channel value. Can exceed the standard 0-255 range for HDR purposes.
            </summary>
        </member>
        <member name="F:GameCore.Drawing.HdrColor.A">
            <summary>
            The alpha (opacity) channel value. Typically in the range 0-255.
            </summary>
        </member>
        <member name="M:GameCore.Drawing.HdrColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new <see cref="T:GameCore.Drawing.HdrColor"/> from a standard <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">The source color.</param>
        </member>
        <member name="M:GameCore.Drawing.HdrColor.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new <see cref="T:GameCore.Drawing.HdrColor"/> from a standard <see cref="T:System.Drawing.Color"/> and applies an HDR scale to the RGB channels.
            </summary>
            <param name="color">The source color.</param>
            <param name="hdrScale">The scale factor to apply to the RGB channels.</param>
        </member>
        <member name="M:GameCore.Drawing.HdrColor.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new <see cref="T:GameCore.Drawing.HdrColor"/> from explicit channel values.
            </summary>
            <param name="r">The red channel value.</param>
            <param name="g">The green channel value.</param>
            <param name="b">The blue channel value.</param>
            <param name="a">The alpha channel value. Defaults to 255 (fully opaque).</param>
        </member>
        <member name="M:GameCore.Drawing.HdrColor.op_Implicit(System.Drawing.Color)~GameCore.Drawing.HdrColor">
            <summary>
            Implicitly converts a <see cref="T:System.Drawing.Color"/> to an <see cref="T:GameCore.Drawing.HdrColor"/>.
            </summary>
            <param name="color">The color to convert.</param>
        </member>
        <member name="F:GameCore.EntitySystem.Data.Enum.ViewActorType.Unit">
            <summary>
            Normal creature, has most of the features.
            </summary>
        </member>
        <member name="F:GameCore.EntitySystem.Data.Enum.ViewActorType.Projectile">
            <summary>
            Cannot walk, can have mover, destroyed after killed.
            </summary>
        </member>
        <member name="F:GameCore.EntitySystem.Data.Enum.ViewActorType.Block">
            <summary>
            Cannot walk, cannot have mover, but have customized static collision footprint.
            </summary>
        </member>
        <member name="F:GameCore.EntitySystem.Data.Enum.ViewActorType.Building">
            <summary>
            Creature but cannot walk, can have customized dynamic collision footprint.
            </summary>
        </member>
        <member name="F:GameCore.EntitySystem.Data.Enum.ViewActorType.Destructible">
            <summary>
            Cannot walk, cannot have mover, cannot have footprint.
            </summary>
        </member>
        <member name="P:GameCore.EntitySystem.Data.GameDataUnit.PrimitiveShape">
            <summary>
            单位的基本几何形状配置（单个形状）
            </summary>
            <remarks>
            当单位没有复杂模型时，可以使用基本几何形状作为临时表现。
            这些形状会在客户端自动创建并附着到单位上。
            如果同时设置了PrimitiveShape和CompositeShapes，将优先使用CompositeShapes。
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Data.GameDataUnit.CompositeShapes">
            <summary>
            单位的复合几何形状配置（多个形状组合）
            </summary>
            <remarks>
            用于创建由多个基本形状组成的复杂表现，如机器人、建筑等。
            数组中的形状会按照Priority排序后依次创建。
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Data.GameDataUnit.DeathRemovalDelay">
            <summary>
            The unit will be removed after this time when it is dead, it can still be revived during this time, the delay will be reset after revived. Does not work if the unit have a static footprint. Set to null means no delay.
            </summary>
        </member>
        <member name="P:GameCore.EntitySystem.Data.Struct.StatusBarSetting.DefaultOn">
            <summary>
            Indicates whether the status bar is on by default.
            </summary>
        </member>
        <member name="P:GameCore.EntitySystem.Data.Struct.StatusBarSetting.DefaultStatusBar">
            <summary>
            If the unit does not meet any relationship specified in the OverrideByRelationShip dictionary, the default status bar will be used.
            </summary>
        </member>
        <member name="P:GameCore.EntitySystem.Data.Struct.StatusBarSetting.OverrideByRelationShip">
            <summary>
            If the player meets any relationship specified in the OverrideByRelationShip dictionary, the corresponding status bar will be used, <see cref="F:GameCore.PlayerAndUsers.Enum.PlayerUnitRelationShip.MainUnit"/> has higher priority than <see cref="F:GameCore.PlayerAndUsers.Enum.PlayerUnitRelationShip.Player"/>.
            </summary>
        </member>
        <member name="T:GameCore.EntitySystem.Data.Struct.UpdateFlags">
            <summary>
            Defines configuration flags that control how an entity is updated and behaves in the game world.
            </summary>
            <remarks>
            These flags determine which systems and capabilities are enabled for an entity, affecting performance
            and functionality. They are typically set based on the entity's data configuration and determine
            which components and behaviors are active.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Data.Struct.UpdateFlags.Walkable">
            <summary>
            Gets or sets a value indicating whether the entity can walk or move through the world.
            </summary>
            <remarks>
            When true, the entity will have walking/movement capabilities enabled and can respond to movement commands.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Data.Struct.UpdateFlags.Turnable">
            <summary>
            Gets or sets a value indicating whether the entity can turn or rotate.
            </summary>
            <remarks>
            When true, the entity can change its facing direction in response to commands or game logic.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Data.Struct.UpdateFlags.AllowMover">
            <summary>
            Gets or sets a value indicating whether the entity can have mover components attached.
            </summary>
            <remarks>
            When true, the entity supports advanced movement systems like projectiles, guided movement, or special mover behaviors.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Data.Struct.UpdateFlags.DisableClientUpdate">
            <summary>
            Gets or sets a value indicating whether client-side updates should be disabled for this entity.
            </summary>
            <remarks>
            When true, the entity will not perform certain update operations on the client side,
            typically used for performance optimization.
            </remarks>
        </member>
        <member name="T:GameCore.EntitySystem.Entity">
            <summary>
            Base class for all scene object that can can be interact dynamically. 
            </summary>
            <remarks>
            Entity represents any interactive object in the game world such as units, buildings, items, or effects.
            It provides fundamental functionality for positioning, ownership, visibility, and lifecycle management.
            All entities exist within a scene and are associated with a player. They support hierarchical relationships
            through parent-child attachments and can be targeted by other game systems.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.GetById(System.Int32)">
            <summary>
            Retrieves an entity by its unique identifier.
            </summary>
            <param name="entityId">The unique identifier of the entity to retrieve.</param>
            <returns>The entity with the specified ID, or null if not found.</returns>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.BearingSnapshot">
            <summary>
            We set/get bearings via _viewActor, but we also have a snapshot of the bearings.
            So that after the unit is destroyed, we can still get the last known position and facing.
            </summary>
            <remarks>
            This snapshot preserves the last known state of the entity's position and facing direction
            even after the entity has been destroyed or is no longer valid. This is useful for
            effects, death animations, or other systems that need to reference the entity's final state.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.ShouldIgnoreDamage">
            <summary>
            Gets a value indicating whether this entity should ignore incoming damage.
            </summary>
            <remarks>
            By default, entities do not ignore damage. Derived classes can override this property
            to implement damage immunity based on states, effects, or other conditions.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.Scene">
            <summary>
            Gets the scene that contains this entity.
            </summary>
            <value>The scene object where this entity is located.</value>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.CanReceiveCommandRequest">
            <summary>
            Gets a value indicating whether this entity can receive command requests from players or AI systems.
            </summary>
            <remarks>
            This property determines if the entity can be given orders such as move, attack, or use abilities.
            Derived classes may override this to implement specific logic for command reception.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.Facing">
            <summary>
            Gets the facing direction of this entity.
            </summary>
            <value>The angle representing the direction this entity is facing.</value>
            <remarks>
            On the client side, facing can only be read, not modified. If the entity is not valid,
            returns the cached facing from the bearing snapshot.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.IsValid">
            <summary>
            Gets a value indicating whether this entity is valid and can be used.
            </summary>
            <value>True if the entity is valid; otherwise, false.</value>
            <remarks>
            On the client side, an entity is valid if its view actor exists. The client
            relies on the server to manage the detailed validity of entities.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.IsAlive">
            <summary>
            Gets a value indicating whether this entity is alive and functional.
            </summary>
            <value>True if the entity is alive; otherwise, false.</value>
            <remarks>
            By default, an entity is considered alive if it is valid. Derived classes
            such as Unit may override this to provide more specific life state logic.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.MoveTo(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Sync Blink
            </summary>
            <returns></returns>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.Position">
            <summary>
            Gets the current position of this entity in the scene.
            </summary>
            <value>The scene point representing this entity's position.</value>
            <remarks>
            If the entity has a parent, returns the parent's position. Otherwise, returns
            the entity's own position from its view actor, or the cached position if invalid.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.SetPosition(GameCore.SceneSystem.ScenePoint,System.Boolean,System.Boolean)">
            <summary>
            Sets the position of this entity to the specified scene point.
            </summary>
            <param name="scenePoint">The target position to move this entity to.</param>
            <param name="sync">Whether to synchronize the position immediately (blink/teleport).</param>
            <param name="syncDistance">Whether to synchronize over distance for smooth movement.</param>
            <returns>True if the position was set successfully; otherwise, false.</returns>
            <remarks>
            Entities with parents cannot have their position set directly. If the target scene
            is different from the current scene, this method will attempt to switch scenes first.
            On the server, the target scene must be loaded for the operation to succeed.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.IsAncestorOf(GameCore.EntitySystem.Entity)">
            <summary>
            Checks if this entity is an ancestor of another entity in the parent-child hierarchy.
            </summary>
            <param name="other">The entity to check for descendant relationship.</param>
            <returns>True if this entity is an ancestor of the other entity; otherwise, false.</returns>
            <remarks>
            This method traverses up the parent chain of the other entity to determine if
            this entity appears anywhere in that chain. Returns true if the entities are the same.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.Parent">
            <summary>
            Gets or sets the parent entity in the attachment hierarchy.
            </summary>
            <value>The parent entity, or null if this entity has no parent.</value>
            <remarks>
            Setting the parent creates an attachment relationship where this entity will follow
            the parent's transformations. Setting to null detaches the entity. Circular
            parent-child relationships are prevented by throwing an exception.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to set a parent that would create a circular reference.
            </exception>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.TagComponents">
            <summary>
            Gets the collection of tag components attached to this entity.
            </summary>
            <remarks>
            Tag components are singleton components identified by a unique tag. Each entity
            can have at most one component of each tag type.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.GetTagComponent(GameCore.BaseType.ComponentTag)">
            <summary>
            Retrieves a tag component of any type by its tag identifier.
            </summary>
            <param name="tag">The tag identifier of the component to retrieve.</param>
            <returns>The tag component if found; otherwise, null.</returns>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.GetTagComponent``1(GameCore.BaseType.ComponentTag)">
            <summary>
            Retrieves a tag component of a specific type by its tag identifier.
            </summary>
            <typeparam name="TComponent">The specific type of tag component to retrieve.</typeparam>
            <param name="tag">The tag identifier of the component to retrieve.</param>
            <returns>The tag component of the specified type if found; otherwise, null.</returns>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.HasTagComponent(GameCore.BaseType.ComponentTag)">
            <summary>
            Checks if this entity has a tag component with the specified tag.
            </summary>
            <param name="tag">The tag identifier to check for.</param>
            <returns>True if the entity has a component with the specified tag; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.GetComponentSet``1">
            <summary>
            Get component set of the entity.
            This create a read-only set of the component set.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <returns></returns>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.EntityId">
            <summary>
            Gets the unique identifier for this entity.
            </summary>
            <value>The entity's unique identifier used for synchronization and referencing.</value>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.Player">
            <summary>
            Gets the player that owns this entity.
            </summary>
            <value>The player object representing the owner of this entity.</value>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.Filters">
            <summary>
            Gets the set of unit filters that apply to this entity for targeting and selection purposes.
            </summary>
            <value>A set of unit filters, or null if no specific filters apply.</value>
            <remarks>
            This property is typically overridden by derived classes to provide entity-specific
            filtering capabilities for targeting systems, AI, and other game mechanics.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.SyncId">
            <summary>
            Gets the synchronization identifier for this entity.
            </summary>
            <value>The entity's synchronization ID, which is the same as its EntityId.</value>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.SyncIdType">
            <summary>
            Gets the type of synchronization ID used by this entity.
            </summary>
            <value>The synchronization ID type for entities.</value>
        </member>
        <member name="P:GameCore.EntitySystem.Entity.ApproachableTarget">
            <summary>
            Gets an interface for approaching this entity as a target.
            </summary>
            <value>The approachable target interface for this entity.</value>
            <remarks>
            This interface is used by movement and pathfinding systems to determine
            how other entities can approach and interact with this entity.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by this entity.
            </summary>
            <remarks>
            This method implements the IDisposable pattern for proper resource cleanup.
            It should not be called directly; use Destroy() instead.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.IsValidTargetTo(GameCore.EntitySystem.Entity,System.Boolean)">
            <summary>
            Determines if this entity is a valid target for the specified caster.
            </summary>
            <param name="caster">The entity attempting to target this entity.</param>
            <param name="isRequest">Whether this is a targeting request that requires visibility.</param>
            <returns>True if this entity can be targeted by the caster; otherwise, false.</returns>
            <remarks>
            For an entity to be a valid target, it must be in the same scene as the caster.
            If this is a targeting request, the entity must also be visible to the caster.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.SameScene(GameCore.BaseInterface.ITarget)">
            <summary>
            Checks if this entity is in the same scene as the specified target.
            </summary>
            <param name="target">The target to compare scenes with.</param>
            <returns>True if both entities are in the same scene; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.CanBeSeen(GameCore.EntitySystem.Entity)">
            <summary>
            Determines if this entity can be seen by the specified caster entity.
            </summary>
            <param name="caster">The entity attempting to see this entity.</param>
            <returns>True if this entity is visible to the caster; otherwise, false.</returns>
            <remarks>
            Visibility rules differ between server and client. On the server, it uses the
            view actor's visibility system. On the client, it considers player relationships
            and local player privileges.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.AngleTo(GameCore.BaseInterface.ITarget)">
            <summary>
            Calculates the angle from this entity to the specified target.
            </summary>
            <param name="target">The target to calculate the angle to.</param>
            <returns>The angle to the target, or null if they are in different scenes.</returns>
            <remarks>
            If the entities are at the same position or are the same entity, returns the
            current facing direction. Otherwise, calculates the angle based on their positions.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.VectorTargetPosition(GameCore.BaseInterface.ITarget,System.Double)">
            <summary>
            Calculates a position at a specified vector length in the direction of the target.
            </summary>
            <param name="target">The target to calculate the vector towards.</param>
            <param name="vectorLength">The length of the vector from this entity's position.</param>
            <returns>The calculated scene point, or null if the target is in a different scene.</returns>
            <remarks>
            This method is useful for positioning effects, projectiles, or other objects
            at a specific distance in the direction of a target. The vector length is
            adjusted by this entity's interaction radius.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Entity.GetFilterTags(GameCore.EntitySystem.Entity,System.Collections.Generic.HashSet{GameCore.BaseType.UnitFilterTag}@)">
            <summary>
            Populates the provided tag set with filter tags that describe this entity's relationship to the caster.
            </summary>
            <param name="caster">The entity requesting the filter information.</param>
            <param name="tags">The set to populate with applicable filter tags.</param>
            <remarks>
            This method determines relationship tags (Self, Player, Alliance, Enemy, Neutral) and
            visibility tags based on the relationship between this entity and the caster.
            The tags are used by targeting systems, AI, and other game mechanics for filtering.
            </remarks>
        </member>
        <member name="T:GameCore.EntitySystem.Enum.EEntityState">
            <summary>
            Defines states that can be applied to entities to track their current conditions and behaviors.
            </summary>
            <remarks>
            Entity states are used to track temporary conditions that affect entity behavior, such as movement states,
            combat states, or special conditions. This enum is extendable, allowing additional states to be defined
            in other parts of the codebase.
            </remarks>
        </member>
        <member name="F:GameCore.EntitySystem.Enum.EEntityState.IsChangingPosition">
            <summary>
            Indicates that the entity is currently in the process of changing its position.
            </summary>
            <remarks>
            This state is typically set when an entity begins moving and cleared when movement completes.
            It can be used to trigger position change events and manage movement-related behaviors.
            </remarks>
        </member>
        <member name="T:GameCore.EntitySystem.Enum.EPropertyEntity">
            <summary>
            Defines property types that can be associated with entities for networking and state management.
            </summary>
            <remarks>
            These properties represent data that can be synchronized between server and client or tracked
            for entities. This enum is extendable, allowing additional property types to be defined elsewhere.
            </remarks>
        </member>
        <member name="F:GameCore.EntitySystem.Enum.EPropertyEntity.Components">
            <summary>
            Represents component-related properties for the entity.
            </summary>
            <remarks>
            This property type is used to track and synchronize information about the entity's components,
            such as component state changes or component-specific data.
            </remarks>
        </member>
        <member name="F:GameCore.EntitySystem.Enum.EntityState.IsChangingPosition">
            <summary>
            Indicates that the entity is currently in the process of changing its position.
            </summary>
            <remarks>
            This state is typically set when an entity begins moving and cleared when movement completes.
            It can be used to trigger position change events and manage movement-related behaviors.
            </remarks>
        </member>
        <member name="F:GameCore.EntitySystem.Enum.PropertyEntity.Components">
            <summary>
            Represents component-related properties for the entity.
            </summary>
            <remarks>
            This property type is used to track and synchronize information about the entity's components,
            such as component state changes or component-specific data.
            </remarks>
        </member>
        <member name="F:GameCore.EntitySystem.EPropertyUnit.Level">
            <summary>
            The current level of the unit.
            </summary>
        </member>
        <member name="F:GameCore.EntitySystem.EPropertyUnit.Experience">
            <summary>
            The experience points gained since the last level up.
            </summary>
        </member>
        <member name="F:GameCore.EntitySystem.EPropertyUnit.ExperienceToNextLevel">
            <summary>
            The total experience points required to advance from the current level to the next level.
            </summary>
        </member>
        <member name="T:GameCore.EntitySystem.Team">
            <summary>
            Represents a team that groups players together for shared objectives, visibility, and game mechanics.
            </summary>
            <remarks>
            Teams provide a way to organize players into groups that share common goals, resources, and visibility.
            Players on the same team typically have allied relationships and can cooperate in various game systems.
            Each team has a unique identifier and manages its member players automatically.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Team.ToString">
            <summary>
            Returns a string representation of this team.
            </summary>
            <returns>A formatted string containing the team identifier.</returns>
        </member>
        <member name="P:GameCore.EntitySystem.Team.Id">
            <summary>
            Gets the unique identifier for this team.
            </summary>
            <value>The team's unique integer identifier.</value>
        </member>
        <member name="M:GameCore.EntitySystem.Team.GetAllPlayers">
            <summary>
            Gets an array containing all players currently on this team.
            </summary>
            <returns>An array of all players belonging to this team.</returns>
            <remarks>
            This method creates a new array each time it's called to prevent external modification
            of the internal player collection. The returned array represents a snapshot of the
            team membership at the time of the call.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Team.AddPlayer(GameCore.PlayerAndUsers.Player)">
            <summary>
            Adds a player to this team.
            </summary>
            <param name="player">The player to add to this team.</param>
            <remarks>
            If the player is already on this team, no action is taken. If the player belongs
            to another team, they will be automatically removed from their current team before
            being added to this one. On the server side, the player's Team property will be
            updated to reference this team.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Team.RemovePlayer(GameCore.PlayerAndUsers.Player)">
            <summary>
            Removes a player from this team.
            </summary>
            <param name="player">The player to remove from this team.</param>
            <remarks>
            This method is called internally when a player switches teams or leaves the game.
            It should not be called directly; use AddPlayer on another team instead to transfer players.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Team.#ctor(System.Int32)">
            <summary>
            Initializes a new team with the specified identifier.
            </summary>
            <param name="id">The unique identifier for this team.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the team ID is not registered with the host system.
            </exception>
            <remarks>
            This constructor is private and should only be called through GetOrCreateById.
            The team must be pre-registered with the view system before it can be created.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Team.GetById(System.Int32)">
            <summary>
            Retrieves an existing team by its identifier.
            </summary>
            <param name="id">The unique identifier of the team to retrieve.</param>
            <returns>The team with the specified ID, or <c>null</c> if no team exists with that ID.</returns>
            <remarks>
            This method only returns existing teams that have already been created.
            Use GetOrCreateById if you need to ensure a team exists.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Team.GetOrCreateById(System.Int32)">
            <summary>
            Retrieves an existing team by its identifier, or creates a new one if it doesn't exist.
            </summary>
            <param name="id">The unique identifier of the team to retrieve or create.</param>
            <returns>The existing team with the specified ID, or a newly created team if none existed.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when attempting to create a team with an ID that is not registered with the host system.
            </exception>
            <remarks>
            This method ensures that a team with the specified ID exists, creating it if necessary.
            The team ID must be pre-registered with the view system for creation to succeed.
            </remarks>
        </member>
        <member name="T:GameCore.EntitySystem.Unit">
            <summary>
            Represents a game unit entity with advanced capabilities including abilities, inventories, vitals, and level progression.
            </summary>
            <remarks>
            Unit extends the base Entity class to provide game-specific functionality such as:
            - Ability system integration for spells and skills
            - Inventory management for items and equipment  
            - Vital properties like health and mana
            - Leveling and experience systems
            - State management for unit conditions
            - Combat and interaction capabilities
            This class serves as the foundation for characters, NPCs, creatures, and other interactive game objects.
            </remarks>
        </member>
        <member name="F:GameCore.EntitySystem.Unit._primitiveShapeActors">
            <summary>
            单位附着的基本形状Actor列表
            </summary>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.CreatePrimitiveShapes">
            <summary>
            在客户端Unit构造时创建基本几何形状
            </summary>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.CreateSinglePrimitiveShape(GameCore.Shape.Data.PrimitiveShapeConfig)">
            <summary>
            创建单个基本形状
            </summary>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.CreateCompositeShapes(System.Collections.Generic.List{GameCore.Shape.Data.PrimitiveShapeConfig})">
            <summary>
            创建复合形状
            </summary>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.CleanupPrimitiveShapes">
            <summary>
            清理基本形状资源
            </summary>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.ProcessPropertyBytes(System.Int32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Host Self Property
            </summary>
            <param name="keyInt"></param>
            <param name="bytes"></param>
        </member>
        <member name="P:GameCore.EntitySystem.Unit.ModSeed">
            <summary>
            Gets or sets the modification seed used for random generation and procedural content.
            </summary>
            <remarks>
            This value is used to ensure consistent random generation for unit properties and behaviors.
            On the server, it's automatically generated; on the client, it's synchronized from the server.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Unit.GameCore#BaseInterface#ITarget#Unit">
            <summary>
            Gets this unit as a target interface implementation.
            </summary>
        </member>
        <member name="P:GameCore.EntitySystem.Unit.ShouldIgnoreDamage">
            <summary>
            Gets a value indicating whether this unit should ignore incoming damage.
            </summary>
            <remarks>
            Units ignore damage when they are dead or when the base entity has damage immunity.
            </remarks>
        </member>
        <member name="P:GameCore.EntitySystem.Unit.InteractRadius">
            <summary>
            Gets the radius within which other entities can interact with this unit.
            </summary>
        </member>
        <member name="P:GameCore.EntitySystem.Unit.CanReceiveCommandRequest">
            <summary>
            Gets a value indicating whether this unit can receive command requests from players or AI.
            </summary>
            <remarks>
            Units cannot receive commands when they have the UnCommandable state or when the base entity
            cannot receive commands.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.GetFilterTags(GameCore.EntitySystem.Entity,System.Collections.Generic.HashSet{GameCore.BaseType.UnitFilterTag}@)">
            <summary>
            Populates the provided tag set with filter tags that apply to this unit from the perspective of the given caster.
            </summary>
            <param name="caster">The entity requesting the filter information.</param>
            <param name="tags">The set to populate with applicable filter tags.</param>
            <remarks>
            This method combines static filters from the unit's configuration with dynamic filters based on current states.
            The tags are used for targeting, abilities, and other game systems that need to filter or categorize units.
            </remarks>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.ToString">
            <summary>
            Returns a string representation of this unit including its type and friendly name.
            </summary>
            <returns>A formatted string describing this unit.</returns>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.Dispose(System.Boolean)">
            <summary>
            Performs cleanup of unit-specific resources during disposal.
            </summary>
            <param name="disposing">True if called from Dispose method; false if called from finalizer.</param>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.GetNode">
            <summary>
            获取根Node
            </summary>
            <returns>Node对象</returns>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.GetModelMaterials">
            <summary>
            获取模型组件的材质
            </summary>
            <returns>材质列表</returns>
        </member>
        <member name="M:GameCore.EntitySystem.Unit.GetOwnerPhysicsWorld">
            <summary>
            获取所属的物理世界
            </summary>
            <returns>物理世界对象</returns>
        </member>
        <member name="F:GameCore.EntitySystem.PropertyUnit.Level">
            <summary>
            The current level of the unit.
            </summary>
        </member>
        <member name="F:GameCore.EntitySystem.PropertyUnit.Experience">
            <summary>
            The experience points gained since the last level up.
            </summary>
        </member>
        <member name="F:GameCore.EntitySystem.PropertyUnit.ExperienceToNextLevel">
            <summary>
            The total experience points required to advance from the current level to the next level.
            </summary>
        </member>
        <member name="T:GameCore.Event.EventDamageNotification">
            <summary>
            客户端版本的伤害通知事件，用于在客户端处理伤害相关的逻辑。如自定义的UI更新、飘字，UI特效等。
            </summary>
            <remarks>
            在<see cref="T:GameCore.DamageSystem.Data.GameDataDamageType"/>中设置伤害的同步方式。
            该事件刻意与服务端的 EventEntityDamageTaken 事件区分开来，就算客户端看不到目标单位也有可能收到伤害事件。
            </remarks>
            <param name="damage"></param>
        </member>
        <member name="M:GameCore.Event.EventDamageNotification.#ctor(GameCore.DamageSystem.Damage)">
            <summary>
            客户端版本的伤害通知事件，用于在客户端处理伤害相关的逻辑。如自定义的UI更新、飘字，UI特效等。
            </summary>
            <remarks>
            在<see cref="T:GameCore.DamageSystem.Data.GameDataDamageType"/>中设置伤害的同步方式。
            该事件刻意与服务端的 EventEntityDamageTaken 事件区分开来，就算客户端看不到目标单位也有可能收到伤害事件。
            </remarks>
            <param name="damage"></param>
        </member>
        <member name="T:GameCore.Event.EventEntityRemove">
            <summary>
            Represents an event that occurs when an entity is removed from the system.
            For client-side, this event is triggered when the entity is no longer visible to the player.
            So the timing of this event may differ between server and client.
            </summary>
            <param name="entity">The entity that has been removed.</param>
        </member>
        <member name="M:GameCore.Event.EventEntityRemove.#ctor(GameCore.EntitySystem.Entity)">
            <summary>
            Represents an event that occurs when an entity is removed from the system.
            For client-side, this event is triggered when the entity is no longer visible to the player.
            So the timing of this event may differ between server and client.
            </summary>
            <param name="entity">The entity that has been removed.</param>
        </member>
        <member name="T:GameCore.Event.EventGameStart">
            <summary>
            Represents an event that is triggered when the game starts.
            </summary>
            <remarks>
            This event is fired once during game initialization after all systems have been set up
            and the game is ready to begin. It can be used to perform startup actions or initialize
            game-specific logic.
            </remarks>
        </member>
        <member name="T:GameCore.Event.EventGameTick">
            <summary>
            Represents an event that occurs on each game tick, providing the elapsed time since the last tick.
            </summary>
            <remarks>This event is typically used to track or respond to time-based updates in a game loop.  The <see
            cref="P:GameCore.Event.EventGameTick.RealTimeDeltaInMilliseconds"/> property indicates the duration of the tick in milliseconds.</remarks>
            <param name="realTimeDeltaInMs"></param>
        </member>
        <member name="M:GameCore.Event.EventGameTick.#ctor(System.Int32)">
            <summary>
            Represents an event that occurs on each game tick, providing the elapsed time since the last tick.
            </summary>
            <remarks>This event is typically used to track or respond to time-based updates in a game loop.  The <see
            cref="P:GameCore.Event.EventGameTick.RealTimeDeltaInMilliseconds"/> property indicates the duration of the tick in milliseconds.</remarks>
            <param name="realTimeDeltaInMs"></param>
        </member>
        <member name="T:GameCore.Event.EventGameCmdResultNotify">
            <summary>
            Represents an event that notifies about the result of a game command execution.
            </summary>
            <param name="cmdResult">The result of the command execution.</param>
            <remarks>
            This event is triggered whenever a command is executed in the game, providing information
            about whether the command succeeded or failed. It can be used for logging, debugging,
            or responding to command outcomes.
            </remarks>
        </member>
        <member name="M:GameCore.Event.EventGameCmdResultNotify.#ctor(GameCore.BaseType.CmdResult)">
            <summary>
            Represents an event that notifies about the result of a game command execution.
            </summary>
            <param name="cmdResult">The result of the command execution.</param>
            <remarks>
            This event is triggered whenever a command is executed in the game, providing information
            about whether the command succeeded or failed. It can be used for logging, debugging,
            or responding to command outcomes.
            </remarks>
        </member>
        <member name="P:GameCore.Event.EventGameCmdResultNotify.CmdResult">
            <summary>
            Gets the result of the command execution.
            </summary>
        </member>
        <member name="T:GameCore.Event.EventGamePropertyChange">
            <summary>
            Represents an event that is triggered when a game property changes.
            </summary>
            <param name="property">The game property that changed.</param>
            <remarks>
            This event allows systems to react to changes in global game properties,
            enabling dynamic behavior based on game state modifications.
            </remarks>
        </member>
        <member name="M:GameCore.Event.EventGamePropertyChange.#ctor(GameCore.GameSystem.Enum.PropertyGame)">
            <summary>
            Represents an event that is triggered when a game property changes.
            </summary>
            <param name="property">The game property that changed.</param>
            <remarks>
            This event allows systems to react to changes in global game properties,
            enabling dynamic behavior based on game state modifications.
            </remarks>
        </member>
        <member name="P:GameCore.Event.EventGamePropertyChange.Property">
            <summary>
            Gets the game property that was changed.
            </summary>
        </member>
        <member name="T:GameCore.Event.EventPlayerUIPropertyChange">
            <summary>
            玩家UI属性变更事件
            </summary>
            <param name="player">发生属性变更的玩家</param>
            <param name="property">变更的UI属性</param>
        </member>
        <member name="M:GameCore.Event.EventPlayerUIPropertyChange.#ctor(GameCore.PlayerAndUsers.Player,GameCore.PlayerAndUsers.PropertyPlayerUI)">
            <summary>
            玩家UI属性变更事件
            </summary>
            <param name="player">发生属性变更的玩家</param>
            <param name="property">变更的UI属性</param>
        </member>
        <member name="P:GameCore.Event.EventPlayerUIPropertyChange.Player">
            <summary>
            发生属性变更的玩家
            </summary>
        </member>
        <member name="P:GameCore.Event.EventPlayerUIPropertyChange.Property">
            <summary>
            变更的UI属性
            </summary>
        </member>
        <member name="T:GameCore.Event.EventUnitCreate">
            <summary>
            Represents an event that occurs when a new unit is created.
            For client-side, it is triggered when a unit is created locally,
            Which means when the unit is appeared in the client's vision.
            So the timing of this event may be different from the server-side.
            </summary>
            <param name="unit">The unit instance that was created and is associated with this event. Cannot be null.</param>
        </member>
        <member name="M:GameCore.Event.EventUnitCreate.#ctor(GameCore.EntitySystem.Unit)">
            <summary>
            Represents an event that occurs when a new unit is created.
            For client-side, it is triggered when a unit is created locally,
            Which means when the unit is appeared in the client's vision.
            So the timing of this event may be different from the server-side.
            </summary>
            <param name="unit">The unit instance that was created and is associated with this event. Cannot be null.</param>
        </member>
        <member name="T:GameCore.Event.EventAbilityAttached">
            <summary>
            技能附加事件，当技能被附加到单位时触发
            </summary>
            <param name="ability">被附加的技能</param>
        </member>
        <member name="M:GameCore.Event.EventAbilityAttached.#ctor(GameCore.AbilitySystem.Ability)">
            <summary>
            技能附加事件，当技能被附加到单位时触发
            </summary>
            <param name="ability">被附加的技能</param>
        </member>
        <member name="P:GameCore.Event.EventAbilityAttached.Ability">
            <summary>
            被附加的技能
            </summary>
        </member>
        <member name="T:GameCore.Event.EventAbilityRemoved">
            <summary>
            技能移除事件，当技能从单位移除时触发
            </summary>
            <param name="ability">被移除的技能</param>
        </member>
        <member name="M:GameCore.Event.EventAbilityRemoved.#ctor(GameCore.AbilitySystem.Ability)">
            <summary>
            技能移除事件，当技能从单位移除时触发
            </summary>
            <param name="ability">被移除的技能</param>
        </member>
        <member name="P:GameCore.Event.EventAbilityRemoved.Ability">
            <summary>
            被移除的技能
            </summary>
        </member>
        <member name="T:GameCore.Event.EventBuffAttached">
            <summary>
            Buff附加事件，当Buff被附加到单位时触发
            </summary>
            <param name="buff">被附加的Buff</param>
        </member>
        <member name="M:GameCore.Event.EventBuffAttached.#ctor(GameCore.BuffSystem.Buff)">
            <summary>
            Buff附加事件，当Buff被附加到单位时触发
            </summary>
            <param name="buff">被附加的Buff</param>
        </member>
        <member name="P:GameCore.Event.EventBuffAttached.Buff">
            <summary>
            被附加的Buff
            </summary>
        </member>
        <member name="T:GameCore.Event.EventBuffRemoved">
            <summary>
            Buff移除事件，当Buff从单位移除时触发
            </summary>
            <param name="buff">被移除的Buff</param>
        </member>
        <member name="M:GameCore.Event.EventBuffRemoved.#ctor(GameCore.BuffSystem.Buff)">
            <summary>
            Buff移除事件，当Buff从单位移除时触发
            </summary>
            <param name="buff">被移除的Buff</param>
        </member>
        <member name="P:GameCore.Event.EventBuffRemoved.Buff">
            <summary>
            被移除的Buff
            </summary>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffect.TargetType">
            <summary>
            指定效果节点的目标类型，决定效果创建后的位置类型和视觉表现的播放行为。
            </summary>
            <remarks>
            <para>
            此属性是效果系统中最重要的配置之一，它不仅影响目标解析，更关键的是决定了
            效果节点附带的视觉表现（<see cref="P:GameCore.Execution.Data.GameDataEffect.ActorArray"/>）如何播放和跟随。
            </para>
            <para>
            <strong>🎯 目标解析行为：</strong>
            </para>
            <list type="bullet">
            <item><see cref="F:GameCore.BaseType.TargetType.Any"/>：接受目标的天然类型，保持原始目标类型</item>
            <item><see cref="F:GameCore.BaseType.TargetType.Unit"/>：强制要求目标为单位实体，若目标为点会导致整个效果执行失败</item>
            <item><see cref="F:GameCore.BaseType.TargetType.Point"/>：强制转换为坐标点，从单位目标提取执行瞬间的位置作为效果的执行目标</item>
            </list>
            <para>
            <strong>🎭 视觉表现影响：</strong>
            </para>
            <list type="bullet">
            <item><strong>Unit类型</strong>：表现会跟随目标单位移动，适用于需要附着在单位身上的效果</item>
            <item><strong>Point类型</strong>：表现固定在指定坐标播放，适用于地面效果或固定位置特效</item>
            <item><strong>AOE场景</strong>：即使搜索逻辑相同，不同的TargetType会导致完全不同的表现播放位置</item>
            </list>
            <para>
            <strong>💡 实战示例：</strong>
            </para>
            <para>
            火球术AOE爆炸效果：
            </para>
            <list type="bullet">
            <item>TargetType = Unit：爆炸特效跟随目标单位移动，适合"附身爆炸"效果</item>
            <item>TargetType = Point：爆炸特效固定在击中点，适合"地面爆炸"效果</item>
            </list>
            <para>
            ⚠️ <strong>常见误区：</strong>开发者常认为瞬间效果的TargetType不重要，但实际上它显著影响视觉表现的播放方式。
            </para>
            <para>
            <strong>🚫 语义限制警告：</strong>
            </para>
            <para>
            某些效果类型由于业务语义的天然限制，只能作用于单位实体，不能将TargetType设置为Point：
            </para>
            <list type="bullet">
            <item><see cref="T:GameCore.Execution.Data.GameDataEffectDamage"/>：伤害只能施加给单位，不能伤害坐标点</item>
            <item><see cref="T:GameCore.Execution.Data.GameDataEffectBuffAdd"/>/<see cref="T:GameCore.Execution.Data.GameDataEffectBuffRemove"/>：Buff状态只能附加到单位身上</item>
            <item>GameDataEffectUnitMoverApply/Remove：移动器只能控制单位的移动</item>
            <item>GameDataEffectUnitModify系列：只能修改单位的属性、朝向、归属等</item>
            <item>GameDataEffectAbilityModify系列：只能修改单位拥有的技能</item>
            </list>
            <para>
            这些效果通常继承自<see cref="T:GameCore.Execution.Data.GameDataEffectUnit"/>基类，默认TargetType为Unit。
            如果错误地设置为Point，会导致效果执行时因为<c>CmdError.MustTargetEntity</c>而失败。
            </para>
            </remarks>
            <seealso cref="T:GameCore.BaseType.TargetType"/>
            <seealso cref="P:GameCore.Execution.Data.GameDataEffect.TargetLocation"/>
            <seealso cref="P:GameCore.Execution.Data.GameDataEffect.ActorArray"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectAbility.AbilityLink">
            <summary>
            If null, use the ability that triggered the effect.
            </summary>
        </member>
        <member name="T:GameCore.Execution.Data.GameDataEffectCreateUnit">
            <summary>
            创建单位效果的游戏数据配置，用于在指定位置生成新的游戏单位
            </summary>
            <remarks>
            <para>
            GameDataEffectCreateUnit 是效果系统中用于创建单位的核心组件。它支持多种单位选择方式、
            灵活的生成位置配置、所有权管理以及生成后的效果处理。
            </para>
            
            <para><strong>单位选择方式：</strong></para>
            <list type="bullet">
            <item><description><strong>UnitLink</strong> - 通过 <see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnUnitTypePerLevel"/> 根据等级选择单位类型</description></item>
            <item><description><strong>Location</strong> - 通过 <see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnTypeUnit"/> 从目标位置获取单位类型</description></item>
            </list>
            
            <para><strong>生成配置：</strong></para>
            <list type="bullet">
            <item><description>支持批量生成多个单位（<see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnCount"/>）</description></item>
            <item><description>可自定义生成位置偏移（<see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnOffset"/>）</description></item>
            <item><description>灵活的单位所有权配置（<see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnOwner"/>）</description></item>
            <item><description>可选的生成后效果处理（<see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnEffect"/>）</description></item>
            <item><description>可选的默认AI配置（<see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.Flags"/>）</description></item>
            </list>
            
            <para><strong>验证机制：</strong></para>
            <para>
            系统会在执行前验证单位类型的有效性、玩家所有权的合法性等，确保创建过程的安全性和正确性。
            </para>
            </remarks>
            <example>
            <code>
            // 基础单位创建配置
            var createUnitEffect = new GameDataEffectCreateUnit
            {
                UnitPicker = UnitPicker.UnitLink,
                SpawnUnitTypePerLevel = 
                [
                    soldierUnitLink,        // 等级0-1使用普通士兵
                    soldierUnitLink,        
                    eliteSoldierUnitLink,   // 等级2-3使用精英士兵
                    eliteSoldierUnitLink,   
                    championUnitLink        // 等级4+使用冠军单位
                ],
                SpawnCount = static (effect) => 3,  // 生成3个单位
                SpawnOwner = new EffectOwnerExpression
                {
                    Value = EffectOwner.TargetLocation,
                    TargetLocation = new() { Value = BaseType.TargetLocation.Caster }
                },
                Flags = new CreateUnitFlags { UseDefaultAI = true }
            };
            
            // 带偏移和后续效果的配置
            var advancedCreateEffect = new GameDataEffectCreateUnit
            {
                UnitPicker = UnitPicker.Location,
                SpawnTypeUnit = targetLocationExpression,
                SpawnOffset = new EffectOffsetExpression { /* 偏移配置 */ },
                SpawnEffect = buffApplicationEffect,  // 生成后应用Buff
                ImpactUnitLocVar = LocVarType.CreatedUnit
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.UnitPicker">
            <summary>
            获取或设置单位选择方式，决定如何确定要创建的单位类型
            </summary>
            <remarks>
            <para>单位选择方式决定了系统如何确定要创建的单位类型：</para>
            <list type="bullet">
            <item><description><strong>UnitLink</strong> - 使用 <see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnUnitTypePerLevel"/> 根据效果等级选择单位</description></item>
            <item><description><strong>Location</strong> - 使用 <see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnTypeUnit"/> 从目标位置动态获取单位类型</description></item>
            </list>
            <para>
            UnitLink 方式适用于固定的单位类型配置，支持等级分层；Location 方式适用于需要根据
            目标位置动态决定单位类型的场景，如复制目标位置的单位。
            </para>
            </remarks>
            <seealso cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnUnitTypePerLevel"/>
            <seealso cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnTypeUnit"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnUnitTypePerLevel">
            <summary>
            获取或设置按等级分层的单位类型配置，当 <see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.UnitPicker"/> 为 UnitLink 时使用
            </summary>
            <value>默认为空集合</value>
            <remarks>
            <para>
            该属性允许根据效果的等级选择不同的单位类型，实现单位的升级机制。
            系统会根据效果的当前等级查找对应的单位类型，使用 <see cref="M:GameCore.Struct.LeveledData`1.GetLeveledData(System.Int32)"/> 方法
            进行自动等级范围限制，确保总是返回有效的单位类型。
            </para>
            
            <para><strong>配置规则：</strong></para>
            <list type="bullet">
            <item><description>等级索引从0开始（等级0、1、2...）</description></item>
            <item><description>建议从等级0开始配置，确保低等级效果有对应的单位类型</description></item>
            <item><description>使用集合初始化语法按顺序添加单位类型</description></item>
            <item><description>如果请求的等级超出范围，会自动返回最高等级的配置</description></item>
            <item><description>如果集合为空，验证阶段会返回 InvalidUnitType 错误</description></item>
            </list>
            </remarks>
            <example>
            <code>
            SpawnUnitTypePerLevel = 
            [
                basicSoldierLink,      // 等级0使用基础士兵
                basicSoldierLink,      // 等级1使用基础士兵  
                eliteSoldierLink,      // 等级2使用精英士兵
                eliteSoldierLink,      // 等级3使用精英士兵
                championSoldierLink    // 等级4+使用冠军士兵（实际等级超出配置范围会返回配置中最高等级的单位类型）
            ];
            </code>
            </example>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnTypeUnit">
            <summary>
            获取或设置目标位置表达式，当 <see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.UnitPicker"/> 为 Location 时用于动态获取单位类型
            </summary>
            <remarks>
            <para>
            该属性用于从指定的目标位置动态获取单位类型，常用于复制或转换现有单位的场景。
            表达式会在运行时解析，从目标位置的实体中提取单位类型信息。
            </para>
            
            <para><strong>使用场景：</strong></para>
            <list type="bullet">
            <item><description>复制目标单位：创建与目标相同类型的单位</description></item>
            <item><description>单位转换：基于目标单位类型创建相关的其他单位</description></item>
            <item><description>动态召唤：根据战场情况动态选择单位类型</description></item>
            </list>
            
            <para>
            如果目标位置没有有效的单位或实体，验证阶段会返回 InvalidUnitType 错误。
            </para>
            </remarks>
            <seealso cref="T:GameCore.Struct.TargetLocationExpression"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnOffset">
            <summary>
            获取或设置生成位置的偏移表达式，用于调整单位的实际生成位置
            </summary>
            <value>默认为 <see langword="null"/>，表示不应用偏移</value>
            <remarks>
            <para>
            该属性允许对基础生成位置应用偏移，实现更精确的位置控制。偏移会在效果的目标位置基础上计算，
            支持固定偏移、随机偏移、以及基于效果上下文的动态偏移。
            </para>
            
            <para><strong>偏移类型：</strong></para>
            <list type="bullet">
            <item><description><strong>固定偏移</strong> - 相对于目标位置的固定距离和方向</description></item>
            <item><description><strong>随机偏移</strong> - 在指定范围内随机选择偏移位置</description></item>
            <item><description><strong>动态偏移</strong> - 基于效果上下文计算的偏移</description></item>
            </list>
            
            <para>
            当值为 <see langword="null"/> 时，单位将直接在效果的目标位置生成。
            偏移计算会考虑地形限制和碰撞检测，确保生成位置的有效性。
            </para>
            </remarks>
            <example>
            <code>
            // 固定偏移示例
            SpawnOffset = new EffectOffsetExpression
            {
                Offset = new Vector3(2.0f, 0.0f, 0.0f)  // 向X轴正方向偏移2个单位
            };
            
            // 随机偏移示例
            SpawnOffset = new EffectOffsetExpression
            {
                RandomRadius = 3.0f  // 在半径3个单位的圆形区域内随机生成
            };
            </code>
            </example>
            <seealso cref="T:GameCore.Struct.EffectOffsetExpression"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnCount">
            <summary>
            获取或设置生成单位数量的计算函数
            </summary>
            <value>默认为返回1的静态函数</value>
            <remarks>
            <para>
            该函数用于动态计算要生成的单位数量，支持基于效果上下文的复杂逻辑。
            函数接收当前效果实例作为参数，返回要生成的单位数量。
            </para>
            
            <para><strong>计算方式：</strong></para>
            <list type="bullet">
            <item><description><strong>固定数量</strong> - 返回固定值的静态函数</description></item>
            <item><description><strong>等级相关</strong> - 基于效果等级计算数量</description></item>
            <item><description><strong>属性相关</strong> - 基于施法者属性计算数量</description></item>
            <item><description><strong>随机数量</strong> - 在指定范围内随机选择数量</description></item>
            </list>
            
            <para>
            返回值必须大于0，否则不会生成任何单位。建议对返回值进行合理的上限限制，
            避免一次性生成过多单位影响游戏性能。
            </para>
            </remarks>
            <example>
            <code>
            // 固定数量
            SpawnCount = static (_) => 3;
            
            // 基于等级的数量
            SpawnCount = (effect) => (uint)Math.Min(effect.Level / 5 + 1, 5);
            
            // 基于施法者属性的数量
            SpawnCount = (effect) => (uint)Math.Min(effect.Caster.GetAttribute("Intelligence") / 10, 8);
            
            // 随机数量
            SpawnCount = (effect) => (uint)Random.Range(2, 5);
            </code>
            </example>
            <seealso cref="T:GameCore.BaseType.FuncUIntEffect"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnOwner">
            <summary>
            获取或设置生成单位的所有者表达式，决定新创建单位的归属
            </summary>
            <value>默认为目标位置的施法者</value>
            <remarks>
            <para>
            该表达式用于确定新创建单位的所有者（玩家），这直接影响单位的控制权、
            敌友关系判定、以及相关的游戏逻辑。所有者的正确设置对于游戏平衡和逻辑正确性至关重要。
            </para>
            
            <para><strong>常用所有者类型：</strong></para>
            <list type="bullet">
            <item><description><strong>Caster</strong> - 效果施法者，最常见的配置</description></item>
            <item><description><strong>Target</strong> - 效果目标，用于"策反"类技能</description></item>
            <item><description><strong>Neutral</strong> - 中立单位，不属于任何玩家</description></item>
            <item><description><strong>Custom</strong> - 基于复杂逻辑确定的自定义所有者</description></item>
            </list>
            
            <para>
            默认配置将单位所有者设置为效果施法者，这适用于大多数召唤类技能。
            如果表达式解析失败或返回无效玩家，验证阶段会返回 InvalidPlayer 错误。
            </para>
            </remarks>
            <example>
            <code>
            // 施法者拥有（默认配置）
            SpawnOwner = new EffectOwnerExpression
            {
                Value = EffectOwner.TargetLocation,
                TargetLocation = new() { Value = BaseType.TargetLocation.Caster }
            };
            
            // 目标玩家拥有（策反效果）
            SpawnOwner = new EffectOwnerExpression
            {
                Value = EffectOwner.TargetLocation,
                TargetLocation = new() { Value = BaseType.TargetLocation.Target }
            };
            
            // 中立单位
            SpawnOwner = new EffectOwnerExpression
            {
                Value = EffectOwner.Neutral
            };
            </code>
            </example>
            <seealso cref="T:GameCore.Struct.EffectOwnerExpression"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnEffect">
            <summary>
            获取或设置在单位创建后立即执行的效果
            </summary>
            <value>默认为 <see langword="null"/>，表示不执行额外效果</value>
            <remarks>
            <para>
            该属性允许在单位成功创建后立即对其执行额外的效果，常用于初始化新单位的状态、
            应用特殊属性、或触发相关的游戏事件。
            </para>
            
            <para><strong>常见用途：</strong></para>
            <list type="bullet">
            <item><description><strong>状态初始化</strong> - 为新单位添加Buff或特殊状态</description></item>
            <item><description><strong>属性调整</strong> - 修改新单位的基础属性</description></item>
            <item><description><strong>视觉效果</strong> - 播放生成动画或特效</description></item>
            <item><description><strong>事件触发</strong> - 触发与单位创建相关的游戏事件</description></item>
            </list>
            
            <para>
            该效果会以新创建的单位作为目标执行，可以通过 <see cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.ImpactUnitLocVar"/> 
            将新单位存储到局部变量中供后续效果使用。如果生成效果执行失败，不会影响单位的创建。
            </para>
            
            <para>
            当值为 <see langword="null"/> 时，跳过生成后效果的执行。
            </para>
            </remarks>
            <example>
            <code>
            // 为新单位添加强化Buff
            SpawnEffect = strengthenBuffEffect;
            
            // 执行复合效果：添加Buff + 播放特效
            SpawnEffect = new GameDataEffectSet
            {
                Effects = new[] { buffEffect, visualEffect }
            };
            
            // 配合局部变量使用
            SpawnEffect = someEffect;
            ImpactUnitLocVar = LocVarType.CreatedUnit;  // 将新单位存储到变量
            </code>
            </example>
            <seealso cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.ImpactUnitLocVar"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.ImpactUnitLocVar">
            <summary>
            获取或设置用于存储新创建单位的局部变量类型
            </summary>
            <value>默认为 <see langword="null"/>，表示不存储到局部变量</value>
            <remarks>
            <para>
            该属性用于将新创建的单位存储到指定的局部变量中，使得后续的效果或逻辑
            可以引用这些新创建的单位。这对于需要对创建的单位进行进一步操作的复杂效果非常有用。
            </para>
            
            <para><strong>使用场景：</strong></para>
            <list type="bullet">
            <item><description><strong>链式效果</strong> - 后续效果需要引用新创建的单位</description></item>
            <item><description><strong>条件判断</strong> - 基于创建的单位数量或类型执行不同逻辑</description></item>
            <item><description><strong>状态跟踪</strong> - 在效果持续期间跟踪创建的单位</description></item>
            <item><description><strong>清理机制</strong> - 在特定条件下清理或移除创建的单位</description></item>
            </list>
            
            <para>
            当创建多个单位时，所有创建的单位都会存储到同一个局部变量中。
            局部变量的生命周期与效果的执行上下文相关。
            </para>
            
            <para>
            当值为 <see langword="null"/> 时，不会将单位存储到任何局部变量中。
            </para>
            </remarks>
            <example>
            <code>
            // 将创建的单位存储到局部变量
            ImpactUnitLocVar = LocVarType.CreatedUnit;
            
            // 在后续效果中引用这些单位
            var followupEffect = new GameDataEffectSomeOperation
            {
                TargetUnits = LocVarType.CreatedUnit  // 操作之前创建的单位
            };
            </code>
            </example>
            <seealso cref="T:GameCore.BaseType.LocVarType"/>
            <seealso cref="P:GameCore.Execution.Data.GameDataEffectCreateUnit.SpawnEffect"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectCreateUnit.Flags">
            <summary>
            获取或设置单位创建的标志配置，控制创建过程的特殊行为
            </summary>
            <value>默认为新的 CreateUnitFlags 实例</value>
            <remarks>
            <para>
            该属性包含控制单位创建过程特殊行为的标志配置。通过这些标志，
            可以精确控制新创建单位的初始状态和行为模式。
            </para>
            
            <para><strong>可用标志：</strong></para>
            <list type="bullet">
            <item><description><strong>UseDefaultAI</strong> - 是否为新创建的单位自动添加默认AI</description></item>
            </list>
            
            <para>
            UseDefaultAI 标志决定新创建的单位是否会自动获得默认的AI行为。
            启用此标志适用于需要单位立即开始自主行动的场景，如召唤的盟友单位。
            禁用此标志适用于需要玩家手动控制或有特殊AI配置的单位。
            </para>
            </remarks>
            <example>
            <code>
            // 创建具有默认AI的单位（如召唤的盟友）
            Flags = new CreateUnitFlags 
            { 
                UseDefaultAI = true 
            };
            
            // 创建需要手动控制的单位
            Flags = new CreateUnitFlags 
            { 
                UseDefaultAI = false 
            };
            </code>
            </example>
            <seealso cref="T:GameCore.Execution.Data.Struct.CreateUnitFlags"/>
        </member>
        <member name="T:GameCore.Execution.Data.GameDataEffectSet">
            <summary>
            效果集合数据配置，用于将多个子效果组合成一个复合效果
            </summary>
            <remarks>
            GameDataEffectSet 是效果系统中的核心组件，允许将多个子效果组合在一起执行。
            它提供了灵活的执行控制，包括执行数量限制、随机选择、唯一性控制等功能。
            
            效果集合支持两种主要的执行模式：
            - <strong>顺序执行</strong>：按配置顺序依次执行子效果
            - <strong>随机执行</strong>：使用加权随机算法选择子效果执行
            
            通过 <see cref="P:GameCore.Execution.Data.GameDataEffectSet.SetFlags"/> 可以精确控制执行行为，实现复杂的游戏机制，
            如多重攻击、随机技能选择、连锁效果等。
            </remarks>
            <example>
            <code>
            // 创建一个多重攻击效果集合
            var multiAttackSet = new GameDataEffectSet
            {
                Effects = new WeightedLinkComplex&lt;IGameLink&lt;GameDataEffect&gt;?&gt;
                {
                    Links = new[]
                    {
                        new WeightedLink&lt;IGameLink&lt;GameDataEffect&gt;?&gt; { Link = slashEffect, Weight = 60 },
                        new WeightedLink&lt;IGameLink&lt;GameDataEffect&gt;?&gt; { Link = thrustEffect, Weight = 30 },
                        new WeightedLink&lt;IGameLink&lt;GameDataEffect&gt;?&gt; { Link = kickEffect, Weight = 10 }
                    }
                },
                SetFlags = new SetFlags
                {
                    WeightedRandom = true,      // 启用加权随机
                    PreferUnique = true,        // 优先选择不重复的效果
                    MinCount = 2,               // 至少执行2个效果
                    MaxCount = 3                // 最多执行3个效果
                }
            };
            </code>
            </example>
            <seealso cref="P:GameCore.Execution.Data.GameDataEffectSet.SetFlags"/>
            <seealso cref="T:GameCore.Execution.EffectSet"/>
            <seealso cref="T:GameCore.Execution.Data.GameDataEffect"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectSet.Effects">
            <summary>
            获取或设置子效果列表，支持加权随机选择
            </summary>
            <remarks>
            此属性定义了效果集合可以执行的子效果列表。每个子效果都有一个权重值，
            当 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.WeightedRandom"/> 为 <see langword="true"/> 时，
            系统会根据权重进行随机选择。
            
            权重值越高，被选中的概率越大。权重为0的效果永远不会被选中。
            </remarks>
            <example>
            <code>
            // 配置带权重的效果列表
            Effects = new WeightedLinkComplex&lt;IGameLink&lt;GameDataEffect&gt;?&gt;
            {
                Links = new[]
                {
                    new WeightedLink&lt;IGameLink&lt;GameDataEffect&gt;?&gt; 
                    { 
                        Link = fireballEffect, 
                        Weight = 70  // 70% 概率选择火球
                    },
                    new WeightedLink&lt;IGameLink&lt;GameDataEffect&gt;?&gt; 
                    { 
                        Link = iceSpikeEffect, 
                        Weight = 30  // 30% 概率选择冰刺
                    }
                }
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectSet.SetFlags">
            <summary>
            获取或设置效果集合的执行标志，控制执行行为
            </summary>
            <remarks>
            SetFlags 控制效果集合的执行方式，包括随机性、唯一性、源覆盖和验证等行为。
            这些标志的组合可以实现各种复杂的执行模式。
            </remarks>
            <seealso cref="P:GameCore.Execution.Data.GameDataEffectSet.SetFlags"/>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectSet.MinCount">
            <summary>
            获取或设置最小执行效果数量
            </summary>
            <remarks>
            此属性定义了效果集合必须执行的最少子效果数量。
            如果设置为 <see langword="null"/>，则默认为0。
            
            当 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.Unique"/> 为 <see langword="true"/> 时，
            如果可用的不重复子效果数量少于 MinCount，效果集合会执行失败。
            
            此属性支持动态计算，可以通过表达式或函数返回不同的值。
            </remarks>
            <example>
            <code>
            // 静态配置
            MinCount = 3;  // 必须执行至少3个效果
            
            // 动态配置（基于施法者等级）
            MinCount = (context) => (uint)Math.Min(context.Level / 10 + 1, 5);
            </code>
            </example>
        </member>
        <member name="P:GameCore.Execution.Data.GameDataEffectSet.MaxCount">
            <summary>
            获取或设置最大执行效果数量
            </summary>
            <remarks>
            此属性定义了效果集合最多可以执行的子效果数量。
            如果设置为 <see langword="null"/>，则根据 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.Unique"/> 和
            <see cref="P:GameCore.Execution.Data.Struct.SetFlags.PreferUnique"/> 的值决定行为：
            - 当 Unique 或 PreferUnique 为 <see langword="true"/> 时，最大数量为可用效果数量
            - 当两者都为 <see langword="false"/> 时，必须设置此属性，此时的语义为可以重复执行相同的子效果，
            因此MaxCount的值必须有意义，否则就会陷入死循环。
            
            此属性支持动态计算，可以通过表达式或函数返回不同的值。
            </remarks>
            <example>
            <code>
            // 静态配置
            MaxCount = 5;  // 最多执行5个效果
            
            // 动态配置（基于目标数量）
            MaxCount = (context) => (uint)Math.Min(GetTargetCount(context), 8);
            </code>
            </example>
        </member>
        <member name="M:GameCore.Execution.Data.GameDataEffectSet.CreateEffect(GameCore.BaseInterface.ITarget,GameCore.Interface.IExecutionContext,System.Boolean)">
            <summary>
            创建效果集合的执行实例
            </summary>
            <param name="defaultTarget">默认目标</param>
            <param name="creationContext">创建上下文</param>
            <param name="preValidateOnly">是否仅用于预验证</param>
            <returns>新创建的 EffectSet 实例</returns>
            <remarks>
            此方法创建效果集合的执行实例，用于实际执行效果。
            当 preValidateOnly 为 <see langword="true"/> 时，创建的实例仅用于验证，
            不会执行实际的效果逻辑。
            </remarks>
            <seealso cref="T:GameCore.Execution.EffectSet"/>
        </member>
        <member name="M:GameCore.Execution.Data.GameDataEffectSet.Execute(GameCore.Execution.Effect)">
            <summary>
            执行效果集合
            </summary>
            <param name="context">效果执行上下文</param>
            <remarks>
            此方法实现了效果集合的核心执行逻辑，根据配置的标志和参数执行子效果。
            
            执行流程：
            1. 如果启用了 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.OverrideSource"/>，将目标设置为源
            2. 根据 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.WeightedRandom"/> 决定执行模式
            3. 根据 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.Unique"/> 和 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.PreferUnique"/> 控制重复性
            4. 执行选定数量的子效果
            
            执行模式：
            - <strong>顺序执行</strong>：按配置顺序依次执行，直到达到执行数量限制
            - <strong>随机执行</strong>：使用加权随机选择，支持唯一性控制
            </remarks>
        </member>
        <member name="M:GameCore.Execution.Data.GameDataEffectSet.Validate(GameCore.Execution.Effect)">
            <summary>
            验证效果集合的配置有效性
            </summary>
            <param name="context">效果验证上下文</param>
            <returns>验证结果</returns>
            <remarks>
            此方法验证效果集合的配置是否有效，包括：
            - 最小和最大执行数量的合理性
            - 子效果数量的充足性
            - 子效果的有效性（当启用验证时）
            
            验证规则：
            1. MinCount 不能大于 MaxCount
            2. 当 Unique 和 PreferUnique 都为 false 时，MaxCount 不能为 null
            3. 当 Unique 为 true 时，可用效果数量不能少于 MinCount
            4. 当启用子效果验证时，有效子效果数量必须满足要求
            </remarks>
        </member>
        <member name="T:GameCore.Execution.Data.Struct.SetFlags">
            <summary>
            定义效果集合的执行标志，控制效果集合的执行行为和特性
            </summary>
            <remarks>
            SetFlags 类用于配置效果集合（<see cref="T:GameCore.Execution.Data.GameDataEffectSet"/>）的执行方式，包括随机性、唯一性、
            源覆盖和子效果验证等行为。这些标志决定了效果集合如何从子效果列表中选择和执行效果，
            为创建复杂的效果组合提供了灵活的控制选项。
            </remarks>
        </member>
        <member name="P:GameCore.Execution.Data.Struct.SetFlags.WeightedRandom">
            <summary>
            获取或设置是否使用加权随机选择子效果
            </summary>
            <remarks>
            当设置为 <see langword="true"/> 时，效果集合会使用加权随机算法从子效果列表中选择效果执行。
            当设置为 <see langword="false"/> 时，效果集合会按顺序执行子效果。
            默认值为 <see langword="false"/>。
            
            此标志与 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.Unique"/> 和 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.PreferUnique"/> 配合使用，
            可以实现复杂的随机选择逻辑。
            </remarks>
            <example>
            <code>
            // 配置随机选择效果
            var setFlags = new SetFlags
            {
                WeightedRandom = true,  // 启用加权随机
                PreferUnique = true     // 优先选择不重复的效果
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.Execution.Data.Struct.SetFlags.PreferUnique">
            <summary>
            获取或设置是否优先选择不重复的子效果
            </summary>
            <remarks>
            当设置为 <see langword="true"/> 时，效果集合会优先选择尚未执行过的子效果。
            当设置为 <see langword="false"/> 时，效果集合不会考虑重复性。
            默认值为 <see langword="true"/>。
            
            此标志与 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.WeightedRandom"/> 配合使用时，可以实现"尽量不重复"的随机选择。
            当所有子效果都已执行过时，系统会重新开始选择。
            </remarks>
            <example>
            <code>
            // 配置优先不重复的效果选择
            var setFlags = new SetFlags
            {
                WeightedRandom = true,  // 启用加权随机
                PreferUnique = true     // 优先选择不重复的效果
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.Execution.Data.Struct.SetFlags.Unique">
            <summary>
            获取或设置是否严格禁止重复执行子效果
            </summary>
            <remarks>
            当设置为 <see langword="true"/> 时，效果集合严格禁止重复执行同一个子效果。
            当设置为 <see langword="false"/> 时，允许重复执行子效果。
            默认值为 <see langword="false"/>。
            
            此标志比 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.PreferUnique"/> 更严格，当设置为 <see langword="true"/> 时，
            如果可用的不重复子效果数量少于 <see cref="P:GameCore.Execution.Data.GameDataEffectSet.MinCount"/>，
            效果集合会执行失败。
            </remarks>
            <example>
            <code>
            // 配置严格不重复的效果执行
            var setFlags = new SetFlags
            {
                Unique = true,          // 严格禁止重复
                MinCount = 3,           // 需要至少3个不同的效果
                MaxCount = 5            // 最多执行5个效果
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.Execution.Data.Struct.SetFlags.OverrideSource">
            <summary>
            获取或设置是否将目标作为源传递给子效果
            </summary>
            <remarks>
            当设置为 <see langword="true"/> 时，效果集合会将当前目标设置为子效果的源。
            当设置为 <see langword="false"/> 时，子效果会继承父效果的源。
            默认值为 <see langword="false"/>。
            
            此标志用于创建"连锁反应"类型的效果，其中每个子效果的目标成为下一个效果的源。
            常用于闪电链、弹射效果等场景。
            </remarks>
            <example>
            <code>
            // 配置连锁效果
            var setFlags = new SetFlags
            {
                OverrideSource = true   // 目标成为子效果的源
            };
            
            // 这样配置后，每个被攻击的目标都会成为下一个攻击的源
            // 实现类似"闪电链"的效果
            </code>
            </example>
        </member>
        <member name="P:GameCore.Execution.Data.Struct.SetFlags.ValidateChildren">
            <summary>
            获取或设置是否在执行前验证子效果
            </summary>
            <remarks>
            当设置为 <see langword="true"/> 时，效果集合会在执行前验证每个子效果的有效性。
            当设置为 <see langword="false"/> 时，跳过子效果验证。
            默认值为 <see langword="false"/>。
            
            启用此标志后，只有通过验证的子效果才会计入执行次数，但会增加性能开销。
            当 <see cref="P:GameCore.Execution.Data.Struct.SetFlags.Unique"/> 为 <see langword="true"/> 时，此标志特别重要，
            因为系统需要确保有足够的有效子效果来满足最小执行数量要求。
            </remarks>
            <example>
            <code>
            // 配置子效果验证
            var setFlags = new SetFlags
            {
                ValidateChildren = true,  // 启用子效果验证
                Unique = true,            // 严格不重复
                MinCount = 2              // 需要至少2个有效效果
            };
            </code>
            </example>
        </member>
        <member name="T:GameCore.Execution.EffectPersist">
            <summary>
            Should be used for effects that are meant to persist in the game world.
            Always make sure that the effect will be stopped properly when exceptions are thrown.
            </summary>
        </member>
        <member name="T:GameCore.Execution.ExecutionParamShared">
            <summary>
            I can just use IExecutionContext as shared parameter for all effects, but most IExecutionContext are disposable and I don't want to dispose them.
            I also want to snapshot context data, like unit properties, Level, etc.
            </summary>
        </member>
        <member name="M:GameCore.Execution.ExecutionParamShared.#ctor(GameCore.Interface.IExecutionContext)">
            <summary>
            I can just use IExecutionContext as shared parameter for all effects, but most IExecutionContext are disposable and I don't want to dispose them.
            I also want to snapshot context data, like unit properties, Level, etc.
            </summary>
        </member>
        <member name="P:GameCore.Execution.ExecutionParamShared.CreatorPlayer">
            <summary>
            Snapshot of the player who created this effect tree.
            As Caster may swap player during the execution.
            </summary>
        </member>
        <member name="P:GameCore.Execution.ExecutionParamShared.Level">
            <summary>
            Snapped level of the execution
            </summary>
        </member>
        <member name="T:GameCore.Execution.ExecutionState">
            <summary>
            Defines the possible states of execution for game operations, abilities, commands, or other executable actions.
            </summary>
            <remarks>
            This enum tracks the lifecycle of executable operations from initial queuing through completion or failure.
            It provides a standardized way to monitor and respond to the progress of various game systems that perform
            time-based or conditional operations.
            </remarks>
        </member>
        <member name="F:GameCore.Execution.ExecutionState.Pending">
            <summary>
            The execution is queued and waiting to begin.
            </summary>
            <remarks>
            This is the initial state when an operation has been requested but not yet started.
            The operation may be waiting for conditions to be met or for its turn in a queue.
            </remarks>
        </member>
        <member name="F:GameCore.Execution.ExecutionState.Failed">
            <summary>
            The execution has failed and cannot be completed.
            </summary>
            <remarks>
            This state indicates that the operation encountered an error, failed validation,
            or was unable to complete due to invalid conditions or constraints.
            </remarks>
        </member>
        <member name="F:GameCore.Execution.ExecutionState.Executing">
            <summary>
            The execution is currently in progress.
            </summary>
            <remarks>
            This state indicates that the operation has started and is actively being processed.
            The operation may still be running, animating, or performing its intended actions.
            </remarks>
        </member>
        <member name="F:GameCore.Execution.ExecutionState.Aborted">
            <summary>
            The execution was cancelled or interrupted before completion.
            </summary>
            <remarks>
            This state indicates that the operation was stopped by external intervention,
            such as user cancellation, conflicting operations, or changing game conditions.
            </remarks>
        </member>
        <member name="F:GameCore.Execution.ExecutionState.Completed">
            <summary>
            The execution has finished successfully.
            </summary>
            <remarks>
            This state indicates that the operation has run to completion and achieved
            its intended result without errors or interruptions.
            </remarks>
        </member>
        <member name="T:GameCore.Extension.EnumExtensionAttribute">
            <summary>
            Attribute used to mark enums for extension capabilities within the GameCore framework.
            </summary>
            <remarks>
            This attribute provides metadata for enums that can be extended at runtime or compile-time,
            allowing for flexible and modular enum systems. It supports flag-based enums, extendable
            enums that can be inherited, and enum extension hierarchies.
            </remarks>
        </member>
        <member name="P:GameCore.Extension.EnumExtensionAttribute.UseAsFlags">
            <summary>
            Gets or sets a value indicating whether the enum should be treated as a flags enumeration.
            </summary>
            <remarks>
            When set to true, the enum values can be combined using bitwise operations,
            similar to the standard <see cref="T:System.FlagsAttribute"/> behavior.
            </remarks>
        </member>
        <member name="P:GameCore.Extension.EnumExtensionAttribute.Extendable">
            <summary>
            Gets or sets a value indicating whether this enum can be extended by other enums.
            </summary>
            <remarks>
            Extendable enums can have additional values added through the extension system,
            allowing for modular and plugin-based enum definitions.
            </remarks>
        </member>
        <member name="P:GameCore.Extension.EnumExtensionAttribute.Extends">
            <summary>
            Gets or sets the base enum type that this enum extends.
            </summary>
            <remarks>
            When specified, this enum will inherit or extend the values from the base enum type,
            creating a hierarchical enum extension system.
            </remarks>
        </member>
        <member name="T:GameCore.Extension.EnumValueExtensionAttribute">
            <summary>
            Marks an enum field with extension configuration options, controlling its behavior in various game systems.
            </summary>
            <remarks>
            This attribute provides metadata for enum values that can be used by the game engine and editor tools
            to customize how specific enum values are handled, displayed, or processed. It allows fine-grained
            control over enum value behavior without modifying the core enum definition.
            </remarks>
        </member>
        <member name="F:GameCore.Extension.EnumValueExtensionAttribute.HiddenInEditor">
            <summary>
            Gets or sets a value indicating whether this enum value should be hidden in editor interfaces.
            </summary>
            <remarks>
            When set to true, this enum value will not appear in editor dropdowns, property inspectors,
            or other UI elements where enum values are displayed for selection. This is useful for
            internal or deprecated enum values that should not be exposed to content creators.
            TODO: Hide in Editor
            </remarks>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.As``1(System.Enum)">
            <summary>
            Check if the enum's extended enum type extends <typeparamref name="TExtendableEnum"/>, 
            if so, return a cached instance of <typeparamref name="TExtendableEnum"/> wrapping the enum value; 
            otherwise, return null.
            </summary>
            <typeparam name="TExtendableEnum">the extendable enum type to check</typeparam>
            <param name="en">the inner enum used for check</param>
            <returns></returns>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.Except``1(``0,``0)">
            <summary>
            Returns a new flag enum value with the specified flags removed.
            </summary>
            <typeparam name="TEnum">The flag enum type.</typeparam>
            <param name="value">The original enum value.</param>
            <param name="except">The flags to remove from the original value.</param>
            <returns>A new enum value with the specified flags removed.</returns>
            <remarks>
            This method performs a bitwise AND operation with the bitwise NOT of the except parameter,
            effectively removing the specified flags from the original value.
            Example: <c>RoutedEvents.All.Except(RoutedEvents.PointerClicked)</c>
            </remarks>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.Forget(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
            执行但不等待
            </summary>
            <remarks>
            执行一个异步任务，但不等待。但依然可以捕获异常。
            <br/>
            可以自定义异常处理，若没有设置，则异常会转到<see cref="E:GameCore.GameSystem.Game.TaskUnhandledException"/>中。
            </remarks>
            <param name="task"></param>
            <param name="innerExceptionHandler">
            自定义异常处理，当任务中出现异常时会执行对应的处理逻辑。
            <br/>
            若没有设置，则异常会转到<see cref="E:GameCore.GameSystem.Game.TaskUnhandledException"/>中。
            </param>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.LogError(Microsoft.Extensions.Logging.ILogger,System.Exception,System.Diagnostics.StackTrace,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="callerStackTrace">The stack trace of the caller.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>
            <code language="csharp">
            logger.LogError(exception, new StackTrace(), "Error while processing request from {Address}", address)
            </code>
            </example>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.ResolveComponent(GameCore.BaseInterface.ICooldownHost,System.Int64)">
            <summary>
            Resolves a component based on a property hash and returns the associated owner and identifiers.
            </summary>
            <param name="host">The context in which the property is being resolved.</param>
            <param name="propertyHashLong">A long value representing the property hash used for resolution.</param>
            <returns>Returns a tuple containing the owner, a short property hash, and an attached synchronization ID.</returns>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.CreateStackTrace(System.Int32)">
            <summary>
            创建一个跳过指定帧数的堆栈跟踪，避免包含不相关的调用帧
            </summary>
            <param name="skipFrames">要跳过的帧数，默认为1（跳过当前方法）</param>
            <returns>新的堆栈跟踪实例</returns>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.LogErrorLazy(Microsoft.Extensions.Logging.ILogger,System.Exception,System.Func{System.Diagnostics.StackTrace},System.String,System.Object[])">
            <summary>
            带性能考虑的LogError扩展方法
            只有在Error级别启用时才会创建堆栈跟踪
            </summary>
            <param name="logger">日志记录器</param>
            <param name="exception">异常</param>
            <param name="createStackTrace">是否创建堆栈跟踪的函数</param>
            <param name="message">日志消息</param>
            <param name="args">消息参数</param>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.LogExceptionWithContext(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Int32)">
            <summary>
            简化的异常日志记录方法，自动跳过当前调用帧
            </summary>
            <param name="logger">日志记录器</param>
            <param name="exception">异常</param>
            <param name="message">自定义消息</param>
            <param name="skipFrames">要跳过的帧数，默认为1</param>
        </member>
        <member name="M:GameCore.Extension.ExtensionMethods.HasStackTrace(System.Exception)">
            <summary>
            检查异常是否包含有用的堆栈跟踪信息
            </summary>
            <param name="exception">要检查的异常</param>
            <returns>如果异常包含堆栈跟踪信息则返回true</returns>
        </member>
        <member name="T:GameCore.Extension.GameDataCategoryAttribute">
            <summary>
            Marks a class as a game data category, indicating that it represents a configuration data type used by the game engine.
            </summary>
            <remarks>
            This attribute is used to identify classes that contain game configuration data, allowing the engine
            to automatically discover, load, and manage these data types. Classes marked with this attribute are
            typically used for defining game rules, unit properties, abilities, items, and other configurable
            game elements that can be modified without recompiling the game code.
            </remarks>
        </member>
        <member name="T:GameCore.FloatingTextSystem.Data.GameDataFloatingText">
            <summary>
            TODO: Does not have any data for now.
            The game actually uses FloatingText setting in the ini file.
            Should use GameDataFloatingText in the future.
            </summary>
        </member>
        <member name="M:GameCore.FloatingTextSystem.FloatingText.AttachToEntity(GameCore.EntitySystem.Entity)">
            <summary>
            Set the position of the floating text to the entity's position.
            </summary>
            <param name="unit">
            The entity to attach the floating text to.
            </param>
        </member>
        <member name="M:GameCore.FloatingTextSystem.FloatingText.SetWorldPosition(System.Numerics.Vector3)">
            <summary>
            Set the position of the floating text in world space.
            </summary>
            <param name="position3D">
            The position of the floating text in world space.
            It use <see cref="T:System.Numerics.Vector3"/> instead of <see cref="T:GameCore.SceneSystem.ScenePoint"/> because the floating text does not depend on the scene.
            </param>
        </member>
        <member name="P:GameCore.GameSystem.Data.GameDataGameMode.DefaultScene">
            <summary>
            The default scene for this game mode. The server will try to load this scene when the game starts, and all players will be set to this scene by default.
            </summary>
        </member>
        <member name="T:GameCore.GameSystem.Data.GameDataGameplay">
            <summary>
            定义游戏核心玩法规则和全局配置，包含游戏运行时的关键参数和系统配置。
            </summary>
            <remarks>
            此类作为游戏玩法的中央配置中心，包含影响整个游戏体验的全局设置。
            通过此配置类可以统一管理各种游戏系统的默认行为和规则参数。
            </remarks>
        </member>
        <member name="P:GameCore.GameSystem.Data.GameDataGameplay.DefaultWaveAI">
            <summary>
            获取或设置默认的波次AI配置，用于控制游戏中敌方单位的自动行为模式。
            </summary>
            <remarks>
            此配置定义了游戏中AI单位的默认决策逻辑，包括移动模式、攻击策略、编队行为等。
            所有未明确指定AI配置的敌方单位将使用此默认配置。
            </remarks>
        </member>
        <member name="P:GameCore.GameSystem.Data.GameDataGameplay.ItemQualityList">
            <summary>
            获取或设置全局物品品质配置列表，定义游戏中所有品质等级的视觉表现和特效规则。
            </summary>
            <remarks>
            <para>此列表按品质等级顺序排列，物品的<see cref="P:GameCore.ItemSystem.Item.Quality"/>值用作索引来查找对应的品质配置：</para>
            <list type="bullet">
            <item><description><see cref="P:GameCore.ItemSystem.Item.Quality"/> = 0：使用列表中第一个品质配置（索引0）</description></item>
            <item><description><see cref="P:GameCore.ItemSystem.Item.Quality"/> = 1：使用列表中第二个品质配置（索引1），以此类推</description></item>
            <item><description>如果<see cref="P:GameCore.ItemSystem.Item.Quality"/>超出列表范围，则使用最后一个品质配置</description></item>
            <item><description>如果列表为空或null，物品将不应用任何品质相关的视觉效果</description></item>
            </list>
            <para>品质配置影响物品在UI中的显示效果、地面掉落时的特效表现等视觉元素，
            是实现物品稀有度系统的核心配置。建议按从低到高的品质顺序排列配置项。</para>
            </remarks>
        </member>
        <member name="T:GameCore.GameSystem.Data.GameDataGlobalConfig">
            <summary>
            Represents the global configuration for game data, including available game modes and testing settings.
            </summary>
            <remarks>This class provides a centralized configuration for managing game modes and testing parameters.  It
            includes a dictionary of available game modes, a default game mode for testing, and settings for single-player
            testing.</remarks>
        </member>
        <member name="P:GameCore.GameSystem.Data.GameDataGlobalConfig.AvailableGameModes">
            <summary>
            Register the game mod for the game system.
            in non-testing (online) mode, the server will send game mode strings to the engine,
            and the engine will use this to determine which game mode to use.
            </summary>
        </member>
        <member name="P:GameCore.GameSystem.Data.GameDataGlobalConfig.TestGameMode">
            <summary>
            The game mode to use when testing the game remotely or locally.
            </summary>
        </member>
        <member name="P:GameCore.GameSystem.Data.GameDataGlobalConfig.SinglePlayerTestSlotId">
            <summary>
            The player slot ID the local player will use in single-player testing mode.
            </summary>
        </member>
        <member name="T:GameCore.GameSystem.Data.GameDataRule">
            <summary>
            Represents the abstract base class for all game rule configurations, defining how game systems behave and interact.
            </summary>
            <remarks>
            This class serves as the foundation for all rule-based game logic, including victory conditions, gameplay mechanics,
            resource management rules, and behavioral constraints. Derived classes implement specific rule types that govern
            different aspects of gameplay, allowing for flexible and configurable game systems that can be modified without
            code changes.
            </remarks>
        </member>
        <member name="T:GameCore.GameSystem.Enum.EStandardUIType">
            <summary>
            标准UI类型枚举，按照传统游戏UI渲染优先级排序
            数值越小的元素渲染层级越低（越靠后），数值越大的元素渲染层级越高（越靠前）
            </summary>
            <remarks>
            渲染优先级从低到高的分层逻辑：
            1. 基础游戏控制层：摇杆、地图等基础交互元素
            2. 信息面板层：背包、角色面板、任务等游戏信息界面
            3. 系统功能层：设置、排行榜等系统级功能
            4. 交互反馈层：聊天、对话等即时交互
            5. 顶层通知层：通知、主菜单等最高优先级UI
            </remarks>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Joystick">
            <summary>
            虚拟摇杆控制 - 基础移动控制，应在最底层
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Map">
            <summary>
            游戏地图界面 - 基础导航信息
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.CharacterSheet">
            <summary>
            角色属性面板 - 角色基础信息
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Inventory">
            <summary>
            物品背包界面 - 物品管理
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Quest">
            <summary>
            任务追踪显示 - 当前活跃任务
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.QuestLog">
            <summary>
            任务日志面板 - 完整任务列表
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Crafting">
            <summary>
            制作合成界面 - 物品制作
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.TalentTree">
            <summary>
            技能天赋树 - 角色成长
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Leaderboards">
            <summary>
            排行榜界面 - 竞技信息
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Settings">
            <summary>
            游戏设置面板 - 系统配置
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Chat">
            <summary>
            聊天系统界面 - 玩家交流
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Dialogue">
            <summary>
            NPC对话界面 - 剧情交互，需要较高优先级
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Notifications">
            <summary>
            系统通知提示 - 重要信息通知
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.MainMenu">
            <summary>
            主菜单界面 - 最高优先级的模态界面
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Minimap">
            <summary>
            小地图/雷达 - 局部区域导航，通常固定显示
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Hotbar">
            <summary>
            快捷栏/技能栏 - 快速访问技能和物品
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.StatusBar">
            <summary>
            血条/状态栏 - 角色生命值、法力值等关键状态。
            注意这是指 UI 中的血条/状态栏，而非实体组件中的血条（位于场景中）。
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Shop">
            <summary>
            商店/交易界面 - 商品购买和交易
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Party">
            <summary>
            团队/组队界面 - 多人游戏团队管理
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Social">
            <summary>
            好友/社交面板 - 社交功能管理
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Achievement">
            <summary>
            成就系统界面 - 成就展示和追踪
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Tutorial">
            <summary>
            教程/引导界面 - 新手引导和帮助
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Reward">
            <summary>
            奖励选择面板 - 游戏中的升级/奖励选择界面，需要暂停游戏并强制选择
            </summary>
            <remarks>
            类似《吸血鬼幸存者》等游戏中的升级选择面板，具有以下特点：
            - 模态交互，暂停游戏进行
            - 阻止其他UI操作
            - 要求玩家必须做出选择才能继续
            - 优先级应高于一般UI但低于系统确认对话框
            </remarks>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.ConfirmDialog">
            <summary>
            确认对话框 - 重要操作确认，需要最高优先级
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.ErrorDialog">
            <summary>
            系统错误提示 - 错误信息显示，最高优先级
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.EStandardUIType.Loading">
            <summary>
            加载界面 - 场景切换时的加载提示
            </summary>
        </member>
        <member name="P:GameCore.GameSystem.Enum.StandardUIType.ExpectedZIndex">
            <summary>
            获取当前标准UI类型的期望ZIndex值
            </summary>
            <returns>
            根据当前游戏模式的UI配置计算得出的ZIndex值，如果无法获取配置则返回null
            </returns>
            <remarks>
            <para>此属性会自动从当前游戏模式的 <see cref="!:GameUI.Data.GameDataGameUI"/> 配置中获取ZIndex值。</para>
            <para>计算公式：ZIndex = BaseZIndex + (在渲染顺序数组中的索引 × ZIndexStep)</para>
            <para>如果满足以下任一条件，将返回null：</para>
            <list type="bullet">
            <item>游戏模式未初始化</item>
            <item>游戏模式数据为空</item>
            <item>UI配置未设置</item>
            <item>当前UI类型不在渲染顺序配置中</item>
            </list>
            <para>建议在使用前检查返回值是否为null，并提供合适的默认值。</para>
            </remarks>
            <example>
            <code>
            var zIndex = StandardUIType.Chat.ExpectedZIndex;
            if (zIndex.HasValue)
            {
                control.ZIndex = zIndex.Value;
            }
            else
            {
                // 使用默认值或记录警告
                control.ZIndex = 1000; // 默认值
                Game.Logger.LogWarning("Unable to get ZIndex for {UIType}, using default", StandardUIType.Chat);
            }
            </code>
            </example>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Joystick">
            <summary>
            虚拟摇杆控制 - 基础移动控制，应在最底层
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Map">
            <summary>
            游戏地图界面 - 基础导航信息
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.CharacterSheet">
            <summary>
            角色属性面板 - 角色基础信息
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Inventory">
            <summary>
            物品背包界面 - 物品管理
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Quest">
            <summary>
            任务追踪显示 - 当前活跃任务
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.QuestLog">
            <summary>
            任务日志面板 - 完整任务列表
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Crafting">
            <summary>
            制作合成界面 - 物品制作
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.TalentTree">
            <summary>
            技能天赋树 - 角色成长
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Leaderboards">
            <summary>
            排行榜界面 - 竞技信息
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Settings">
            <summary>
            游戏设置面板 - 系统配置
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Chat">
            <summary>
            聊天系统界面 - 玩家交流
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Dialogue">
            <summary>
            NPC对话界面 - 剧情交互，需要较高优先级
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Notifications">
            <summary>
            系统通知提示 - 重要信息通知
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.MainMenu">
            <summary>
            主菜单界面 - 最高优先级的模态界面
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Minimap">
            <summary>
            小地图/雷达 - 局部区域导航，通常固定显示
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Hotbar">
            <summary>
            快捷栏/技能栏 - 快速访问技能和物品
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.StatusBar">
            <summary>
            血条/状态栏 - 角色生命值、法力值等关键状态。
            注意这是指 UI 中的血条/状态栏，而非实体组件中的血条（位于场景中）。
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Shop">
            <summary>
            商店/交易界面 - 商品购买和交易
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Party">
            <summary>
            团队/组队界面 - 多人游戏团队管理
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Social">
            <summary>
            好友/社交面板 - 社交功能管理
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Achievement">
            <summary>
            成就系统界面 - 成就展示和追踪
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Tutorial">
            <summary>
            教程/引导界面 - 新手引导和帮助
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Reward">
            <summary>
            奖励选择面板 - 游戏中的升级/奖励选择界面，需要暂停游戏并强制选择
            </summary>
            <remarks>
            类似《吸血鬼幸存者》等游戏中的升级选择面板，具有以下特点：
            - 模态交互，暂停游戏进行
            - 阻止其他UI操作
            - 要求玩家必须做出选择才能继续
            - 优先级应高于一般UI但低于系统确认对话框
            </remarks>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.ConfirmDialog">
            <summary>
            确认对话框 - 重要操作确认，需要最高优先级
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.ErrorDialog">
            <summary>
            系统错误提示 - 错误信息显示，最高优先级
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Enum.StandardUIType.Loading">
            <summary>
            加载界面 - 场景切换时的加载提示
            </summary>
        </member>
        <member name="F:GameCore.GameSystem.Game.FramePerSecond">
            <summary>
            This is not the real frame rate, but the target frame rate for the game loop on client side.
            </summary>
        </member>
        <member name="P:GameCore.GameSystem.Game.ForgetRunCaptureCallerStackTrace">
            <summary>
            Gets or sets a value indicating whether the caller's <see cref="T:System.Diagnostics.StackTrace"/> should be captured when a task is run and
            subsequently forgotten.
            Default value is <see langword="false"/>.
            </summary>
            <remarks>This property can be used to control whether stack trace information is retained for
            diagnostic purposes when a task is executed and not awaited. Setting this to <see langword="false"/> may improve
            performance by avoiding the overhead of capturing the stack trace, but will lose the information of the task's caller stack.</remarks>
        </member>
        <member name="T:GameCore.GameSystem.Game.TaskUnhandledExceptionEventHandler">
            <summary>
            Represents the method that will handle an unhandled exception thrown during the execution of a task.
            </summary>
            <remarks>This delegate is typically used to subscribe to events or callbacks that notify about
            unhandled exceptions in asynchronous task execution. Implementations of this delegate should handle the
            exception appropriately, such as logging the error or performing cleanup operations.</remarks>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> instance that encountered the unhandled exception.</param>
            <param name="e">The <see cref="T:System.Exception"/> that was thrown by the task.</param>
            <param name="callerStackTrace">The optional <see cref="T:System.Diagnostics.StackTrace"/> of the caller at the time the exception occurred, providing additional
            context for debugging. Only work if <see cref="P:GameCore.GameSystem.Game.ForgetRunCaptureCallerStackTrace"/> is <c>true</c>.</param>
        </member>
        <member name="M:GameCore.GameSystem.Game.Delay(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32)">
            <summary>
            Creates a new <see cref="M:GameCore.GameSystem.Game.Delay(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32)"/> instance with the specified delay duration, optional cancellation token, and
            adjustment value.
            </summary>
            <param name="delay">The duration of the delay.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the delay.  If <see langword="null"/>,
            the delay cannot be canceled.</param>
            <param name="adjustment">An optional adjustment value, in milliseconds, to modify the delay duration.  The final delay duration is
            calculated as <paramref name="delay"/> plus <paramref name="adjustment"/>.</param>
            <returns>A new <see cref="M:GameCore.GameSystem.Game.Delay(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32)"/> instance configured with the specified parameters.</returns>
        </member>
        <member name="M:GameCore.GameSystem.Game.Delay(System.Int32,System.Nullable{System.Threading.CancellationToken},System.Int32)">
            <summary>
            Creates a new <see cref="M:GameCore.GameSystem.Game.Delay(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32)"/> instance with the specified delay duration in milliseconds, optional cancellation token, and
            adjustment value.
            </summary>
            <param name="delayInMilliseconds">The duration of the delay in milliseconds.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the delay.  If <see langword="null"/>,
            the delay cannot be canceled.</param>
            <param name="adjustment">An optional adjustment value, in milliseconds, to modify the delay duration.  The final delay duration is
            calculated as <paramref name="delayInMilliseconds"/> plus <paramref name="adjustment"/>.</param>
            <returns>A new <see cref="M:GameCore.GameSystem.Game.Delay(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32)"/> instance configured with the specified parameters.</returns>
        </member>
        <member name="M:GameCore.GameSystem.Game.DelaySimulateRealTime(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32)">
            <summary>
            Creates a delay that simulates real-time progression, with optional cancellation and adjustment.
            </summary>
            <param name="delay">The duration of the delay to simulate.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the delay.</param>
            <param name="adjustment">An optional adjustment value, in milliseconds, to modify the delay duration.</param>
            <returns>A <see cref="M:GameCore.GameSystem.Game.Delay(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32)"/> instance configured to simulate real-time progression.</returns>
        </member>
        <member name="M:GameCore.GameSystem.Game.DelaySimulateRealTime(System.Int32,System.Nullable{System.Threading.CancellationToken},System.Int32)">
            <summary>
            Creates a delay that simulates real-time progression with the specified duration in milliseconds, with optional cancellation and adjustment.
            </summary>
            <param name="delayInMilliseconds">The duration of the delay to simulate in milliseconds.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the delay.</param>
            <param name="adjustment">An optional adjustment value, in milliseconds, to modify the delay duration.</param>
            <returns>A <see cref="M:GameCore.GameSystem.Game.Delay(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32)"/> instance configured to simulate real-time progression.</returns>
        </member>
        <member name="P:GameCore.GameSystem.Game.LocalScene">
            <summary>
            Gets the local player's current scene.
            </summary>
            <returns>The scene that the local player is currently in.</returns>
            <remarks>
            This is a convenience method that provides easy access to the local player's scene.
            It's equivalent to calling <c>Player.LocalPlayer.Scene</c> but provides a more direct
            and semantic way to access the local scene.
            </remarks>
        </member>
        <member name="E:GameCore.GameSystem.Game.OnRegisterGameClasses">
            <summary>
            Requires manually unregistering the event. When the game starts, the events happens in the following order:
            <list type="number">
            <item>
            OnRegisterAssemblySetup
            </item>
            <item>
            OnGameDataInitialization
            </item>
            <item>
            OnGameplaySettingsInitialization
            </item>
            <item>
            OnGameInstanceInitialization
            </item>
            <item>
            EventGameStart
            </item>
            </list>
            </summary>
        </member>
        <member name="E:GameCore.GameSystem.Game.OnGameDataInitialization">
            <summary>
            Requires manually unregistering the event. When the game starts, the events happens in the following order:
            <list type="number">
            <item>
            OnRegisterAssemblySetup
            </item>
            <item>
            OnGameDataInitialization
            </item>
            <item>
            OnGameplaySettingsInitialization
            </item>
            <item>
            OnGameInstanceInitialization
            </item>
            <item>
            EventGameStart
            </item>
            </list>
            </summary>
        </member>
        <member name="E:GameCore.GameSystem.Game.OnGameplaySettingsInitialization">
            <summary>
            Requires manually unregistering the event. When the game starts, the events happens in the following order:
            <list type="number">
            <item>
            OnRegisterAssemblySetup
            </item>
            <item>
            OnGameDataInitialization
            </item>
            <item>
            OnGameplaySettingsInitialization
            </item>
            <item>
            OnGameInstanceInitialization
            </item>
            <item>
            EventGameStart
            </item>
            </list>
            </summary>
        </member>
        <member name="E:GameCore.GameSystem.Game.OnGameInstanceInitialization">
            <summary>
            Requires manually unregistering the event. When the game starts, the events happens in the following order:
            <list type="number">
            <item>
            OnRegisterAssemblySetup
            </item>
            <item>
            OnGameDataInitialization
            </item>
            <item>
            OnGameplaySettingsInitialization
            </item>
            <item>
            OnGameInstanceInitialization
            </item>
            <item>
            EventGameStart
            </item>
            </list>
            </summary>
        </member>
        <member name="E:GameCore.GameSystem.Game.OnGameUIInitialization">
            <summary>
            The game won't be able to create GameUI before this event is triggered.
            Only make sense in client.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IActorSync.Host">
            <summary>
            Synced actor's host. Have no socket.
            </summary>
        </member>
        <member name="T:GameCore.Interface.IDebugDraw">
            <summary>
            Defines an interface for drawing debug shapes and text in the game scene.
            Implementations provide methods to visualize geometric primitives such as lines, circles, points, sectors, parallelograms, rectangles, and text for debugging purposes.
            </summary>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.Clear">
            <summary>
            Clears all debug drawings from the current debug graph.
            </summary>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.Destroy(System.Boolean)">
            <summary>
            Destroys the debug drawing context and releases associated resources.
            </summary>
            <param name="isHostDispose">Indicates whether the destruction is triggered by the host's disposal process. 
            this will skip some cleanup steps if true, as the host will handle them.
            </param>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.DrawCircle(System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws a circle in 3D space.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="eulerRotation">The rotation of the circle in Euler angles (degrees).</param>
            <param name="radius">The radius of the circle.</param>
            <param name="color">The color of the circle.</param>
            <param name="fill">Whether to fill the circle (true) or draw only the outline (false).</param>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.DrawLine(System.Numerics.Vector3,System.Numerics.Vector3,System.Drawing.Color)">
            <summary>
            Draws a line between two points in 3D space.
            </summary>
            <param name="origin">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.DrawParallelogram(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws a parallelogram in 3D space, defined by an origin and two side vectors.
            </summary>
            <param name="origin">The origin (one corner) of the parallelogram.</param>
            <param name="sideVectorA">
            The first side vector from the origin.
            </param>
            <param name="sideVectorB">
            The second side vector from the origin.
            </param>
            <param name="color">The color of the parallelogram.</param>
            <param name="fill">Whether to fill the parallelogram (true) or draw only the outline (false).</param>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.DrawPoint(System.Numerics.Vector3,System.Drawing.Color)">
            <summary>
            Draws a point in 3D space.
            </summary>
            <param name="point">The position of the point.</param>
            <param name="color">The color of the point.</param>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.DrawRectangle(System.Numerics.Vector3,System.Single,System.Single,System.Numerics.Vector3,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws a rectangle in 3D space, defined by its center, width, height, and rotation (XYZ order).
            </summary>
            <param name="center">The center of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="rotation">The rotation of the rectangle in Euler angles (degrees, XYZ order).</param>
            <param name="color">The color of the rectangle.</param>
            <param name="fill">Whether to fill the rectangle (true) or draw only the outline (false).</param>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.DrawSector(System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws a sector (pie slice) in 3D space.
            </summary>
            <param name="center">The center of the sector.</param>
            <param name="eulerRotation">The rotation of the sector in Euler angles (degrees).</param>
            <param name="radius">The radius of the sector.</param>
            <param name="angle">The angle of the sector in degrees.</param>
            <param name="color">The color of the sector.</param>
            <param name="fill">Whether to fill the sector (true) or draw only the outline (false).</param>
        </member>
        <member name="M:GameCore.Interface.IDebugDraw.DrawText(System.Numerics.Vector3,System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws text at a specified position in 3D space.
            </summary>
            <param name="position">The position where the text will be drawn.</param>
            <param name="text">The text to display.</param>
            <param name="color">The color of the text.</param>
            <param name="onTopOfEverything">Whether to render the text on top of all other elements.</param>
        </member>
        <member name="T:GameCore.Interface.IExecutableData">
            <summary>
            Represents game data that can be executed within a specific context, such as abilities, spells, or items.
            </summary>
            <remarks>
            This interface extends <see cref="T:GameData.IGameData"/> to provide execution capabilities with validation.
            Implementers define specific logic for how the data should be executed and what validation rules apply.
            </remarks>
        </member>
        <member name="M:GameCore.Interface.IExecutableData.Execute(GameCore.Interface.IExecutableObject)">
            <summary>
            Executes the data's logic within the specified context.
            </summary>
            <param name="context">The execution context containing information about the caster, targets, and environment.</param>
        </member>
        <member name="M:GameCore.Interface.IExecutableData.Validate(GameCore.Interface.IExecutableObject)">
            <summary>
            Validates whether the data can be executed in the given context.
            </summary>
            <param name="context">The execution context to validate against.</param>
            <returns>A <see cref="T:GameCore.BaseType.CmdResult"/> indicating whether execution is valid.</returns>
        </member>
        <member name="P:GameCore.Interface.IExecutableData.Validators">
            <summary>
            Gets the validator function used for additional validation checks, if any.
            </summary>
        </member>
        <member name="T:GameCore.Interface.IExecutableObject">
            <summary>
            Represents an object that can execute game logic within a specific context, providing access to execution parameters and validation.
            </summary>
            <remarks>
            This interface combines <see cref="T:GameCore.Interface.IExecutionContext"/> and <see cref="T:GameData.Interface.IGameObject"/> to create objects that can both
            hold execution state and be executed. It provides access to casters, targets, abilities, items, and scene information
            needed for complex game operations.
            </remarks>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.Parent">
            <summary>
            Gets the parent executable object in the execution hierarchy, if any.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.Shared">
            <summary>
            Gets the shared execution parameters containing common data like caster, targets, and level.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.Source">
            <summary>
            Gets the source target of the execution, which is typically the caster.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.GameCore#Interface#IExecutionContext#Level">
            <summary>
            Gets the level at which this execution is performed.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.GameCore#Interface#IExecutionContext#Caster">
            <summary>
            Gets the entity that is casting or initiating this execution.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.GameCore#Interface#IExecutionContext#Ability">
            <summary>
            Gets the ability associated with this execution, if any.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.GameCore#Interface#IExecutionContext#Item">
            <summary>
            Gets the item associated with this execution, if any.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.GameCore#Interface#IExecutionContext#Order">
            <summary>
            Gets the order associated with this execution, if any.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.GameCore#Interface#IExecutionContext#MainTarget">
            <summary>
            Gets the main target of this execution.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.GameCore#Interface#IExecutionContext#FactoryParent">
            <summary>
            Gets the factory parent for creating child executable objects.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.LocVarUnit">
            <summary>
            Gets the local variable dictionary for unit references, if any.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.LocVarPoint">
            <summary>
            Gets the local variable dictionary for scene point references, if any.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.Missile">
            <summary>
            Gets the missile entity associated with this execution, if any.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.PersistIndex">
            <summary>
            Gets the persistence index for this executable object, if any.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.LaunchScene">
            <summary>
            Gets the scene where this execution was launched.
            </summary>
        </member>
        <member name="P:GameCore.Interface.IExecutableObject.Cache">
            <summary>
            Gets the executable data cache for this object.
            </summary>
        </member>
        <member name="M:GameCore.Interface.IExecutableObject.SearchAncestor(GameData.IGameLink)">
            <summary>
            Searches up the execution hierarchy to find an ancestor with the specified link.
            </summary>
            <param name="link">The game link to search for, or null to return this object.</param>
            <returns>The ancestor executable object with the matching link, or null if not found.</returns>
        </member>
        <member name="M:GameCore.Interface.IExecutableObject.Execute">
            <summary>
            Executes this object after validating that execution is allowed.
            </summary>
            <returns>A <see cref="T:GameCore.BaseType.CmdResult"/> indicating the success or failure of the execution.</returns>
        </member>
        <member name="T:GameCore.ItemSystem.Data.GameDataItem">
            <summary>
            Represents the base data class for item configurations, defining common properties and creation methods for all item types.
            </summary>
            <remarks>
            This abstract class provides the foundation for all item data types in the game, including display information,
            unit associations, quality and level settings, and filtering capabilities. It defines the common interface for
            creating item instances and their associated units in the game world.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItem.DisplayName">
            <summary>
            Gets or sets the localized display name for this item.
            </summary>
            <remarks>
            This name is shown to players in the user interface and supports localization
            for different languages and regions.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItem.Description">
            <summary>
            Gets or sets the localized description text for this item.
            </summary>
            <remarks>
            This description provides detailed information about the item's purpose, effects,
            and usage. It supports localization for different languages and regions.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItem.Icon">
            <summary>
            Gets or sets the icon used to represent this item in the user interface.
            </summary>
            <remarks>
            The icon provides a visual representation of the item for display in inventories,
            tooltips, and other UI elements.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItem.Unit">
            <summary>
            Gets or sets the unit data that defines the physical representation of this item in the game world.
            </summary>
            <remarks>
            Every item is associated with a unit that provides its 3D model, collision, animations,
            and other physical properties when the item exists as an object in the game world.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItem.Quality">
            <summary>
            Gets or sets the default quality level for items created from this data.
            </summary>
            <remarks>
            Quality represents the tier or rarity of the item, affecting its properties and value.
            Individual item instances can have their quality modified after creation.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItem.Level">
            <summary>
            Gets or sets the default level for items created from this data.
            </summary>
            <remarks>
            Level represents the upgrade tier or enhancement level of the item.
            Individual item instances can have their level modified after creation.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItem.Filter">
            <summary>
            Gets or sets the targeting filters that determine which entities can interact with this item.
            </summary>
            <remarks>
            These filters control pickup eligibility, usage restrictions, and other interaction rules
            based on entity properties, states, and other criteria.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.Data.GameDataItem.CreateItem(GameCore.SceneSystem.ScenePoint,GameCore.PlayerAndUsers.Player)">
            <summary>
            Creates an item instance at the specified location in the game world.
            </summary>
            <param name="scene">The scene position where the item should be created.</param>
            <param name="player">The player that will own the item, or null to use the default player.</param>
            <returns>A new item instance attached to a unit at the specified location.</returns>
            <remarks>
            This method creates both the physical unit representation and the item component,
            providing a complete item that exists in the game world and can be interacted with.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.Data.GameDataItem.CreateItemUnit(GameCore.SceneSystem.ScenePoint,GameCore.PlayerAndUsers.Player)">
            <summary>
            Creates the unit that will represent this item in the game world.
            </summary>
            <param name="scene">The scene position where the unit should be created.</param>
            <param name="player">The player that will own the unit, or null to use the default player.</param>
            <returns>A new unit instance configured according to this item's unit data.</returns>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the unit data is invalid or null.</exception>
            <remarks>
            This method creates the physical representation of the item as a unit in the game world,
            which provides 3D model, collision, and other physical properties.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItemPickable.CanAbsorb">
            <summary>
            Automatically absorb the stack of another item, only if the item is stackable
            </summary>
        </member>
        <member name="T:GameCore.ItemSystem.Data.GameDataItemQuality">
            <summary>
            定义物品品质的视觉表现和特效配置，包括颜色、图标装饰和地面特效等品质相关的显示属性。
            </summary>
            <remarks>
            物品品质系统通过此配置类为不同品质等级的物品提供统一的视觉标识。品质配置影响物品在UI中的显示效果，
            包括名称颜色、图标装饰以及物品掉落在地面时的视觉特效。高品质物品通常配置更加醒目的视觉效果以突出其稀有性。
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItemQuality.Color">
            <summary>
            获取或设置此品质对应的显示颜色，用于物品名称和相关UI元素的着色。
            </summary>
            <remarks>
            此颜色将应用于物品名称文本、品质标识等UI元素，为玩家提供直观的品质识别。
            通常低品质使用灰白色，高品质使用金色、紫色等醒目颜色。
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItemQuality.BackgroundImage">
            <summary>
            获取或设置此品质的背景装饰图标，用于物品图标的背景层显示。
            </summary>
            <remarks>
            背景图标通常显示在物品图标的后方，为不同品质提供视觉区分。
            可以是简单的色彩背景、纹理图案或装饰性边框等。
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItemQuality.BorderImage">
            <summary>
            获取或设置此品质的边框装饰图标，用于物品图标的边框层显示。
            </summary>
            <remarks>
            边框图标显示在物品图标的最前层，通常用于突出显示高品质物品。
            可以是发光效果、华丽边框或特殊形状的装饰框等。
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Data.GameDataItemQuality.ActorArray">
            <summary>
            获取或设置物品掉落在地面时的附属视觉特效Actor列表，用于提供品质相关的地面显示效果。
            </summary>
            <remarks>
            <para>这些Actor通常包含粒子系统、光效、动画等视觉组件，在物品作为地面对象存在时自动激活。</para>
            <para>不同品质的物品可以配置不同强度和样式的特效：</para>
            <list type="bullet">
            <item><description>普通品质：无特效或简单光点</description></item>
            <item><description>稀有品质：彩色光环或闪烁效果</description></item>
            <item><description>史诗品质：华丽光柱或旋转特效</description></item>
            <item><description>传说品质：复杂粒子系统和动态光效</description></item>
            </list>
            <para>这些特效有助于玩家在游戏世界中快速识别和定位高价值物品。</para>
            </remarks>
        </member>
        <member name="T:GameCore.ItemSystem.DynamicModification">
            <summary>
            动态修改项，每个物品上对于特定槽位类型+属性+子类型的组合是唯一的
            </summary>
            <remarks>
            DynamicModification表示通过代码动态添加到物品上的属性修改。
            每个物品上对于特定槽位类型+属性+子类型的组合只能有一个修改值，
            这确保了数据的一致性和同步的便利性。
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModification.Key">
            <summary>
            修改的唯一标识符
            </summary>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModification.Value">
            <summary>
            修改值
            </summary>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModification.Property">
            <summary>
            属性链接（从Key中获取）
            </summary>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModification.SubType">
            <summary>
            属性子类型（从Key中获取）
            </summary>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModification.SlotType">
            <summary>
            槽位类型（从Key中获取）
            </summary>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModification.HashKey">
            <summary>
            生成哈希键，用于数据同步和云保存
            </summary>
            <remarks>
            这个哈希值可以用于物品的同步属性以及云保存数据中
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.DynamicModification.ToString">
            <summary>
            返回修改项的字符串表示
            </summary>
        </member>
        <member name="T:GameCore.ItemSystem.DynamicModificationKey">
            <summary>
            动态修改的唯一标识符
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="Property">属性链接</param>
            <param name="SubType">属性子类型</param>
        </member>
        <member name="M:GameCore.ItemSystem.DynamicModificationKey.#ctor(GameCore.Container.ItemSlotType,GameData.IGameLink{GameCore.Data.GameDataUnitProperty},GameCore.BaseType.PropertySubType)">
            <summary>
            动态修改的唯一标识符
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="Property">属性链接</param>
            <param name="SubType">属性子类型</param>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModificationKey.SlotType">
            <summary>槽位类型</summary>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModificationKey.Property">
            <summary>属性链接</summary>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModificationKey.SubType">
            <summary>属性子类型</summary>
        </member>
        <member name="P:GameCore.ItemSystem.DynamicModificationKey.HashKey">
            <summary>
            生成哈希键，用于数据同步和云保存
            </summary>
            <remarks>
            这个哈希值可以用于物品的同步属性以及云保存数据中
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.DynamicModificationKey.ToString">
            <summary>
            返回键的字符串表示
            </summary>
        </member>
        <member name="T:GameCore.ItemSystem.IPickUpItem">
            <summary>
            Defines an interface for items that can be picked up and added to inventories.
            </summary>
            <remarks>
            This interface provides the contract for items that support pickup interactions with inventory systems.
            It includes validation to check if pickup is possible and methods to perform the actual pickup operation.
            Range checking is handled separately by the calling systems, allowing this interface to focus on
            item-specific pickup logic and inventory compatibility.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.IPickUpItem.CanPickUp(GameCore.Container.InventoryManager)">
            <summary>
            Determines whether the item can be picked up by the specified inventory manager.
            </summary>
            <param name="manager">The inventory manager attempting to pick up the item.</param>
            <returns><c>true</c> if the item can be picked up; otherwise, <c>false</c>.</returns>
            <remarks>
            This method performs validation checks such as inventory space, item compatibility,
            and other pickup requirements. Range checking is explicitly ignored and should be
            handled by the calling system before invoking this method.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.IPickUpItem.PickUp(GameCore.Container.InventoryManager,System.Boolean)">
            <summary>
            Attempts to pick up the item and add it to the specified inventory manager.
            </summary>
            <param name="manager">The inventory manager that will receive the item.</param>
            <param name="isRequest">Whether this is a request operation (for validation) or an actual pickup.</param>
            <returns><c>true</c> if the pickup was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            This method performs the actual pickup operation, transferring the item to the inventory.
            Range checking is explicitly ignored and should be handled by the calling system.
            When <paramref name="isRequest"/> is true, this may perform a dry-run validation without
            actually modifying the item or inventory state.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.IPickUpItem.IsValid">
            <summary>
            Gets a value indicating whether this item is still valid and can participate in pickup operations.
            </summary>
            <remarks>
            Invalid items (such as destroyed or disposed items) should not be available for pickup.
            This property allows the pickup system to filter out items that are no longer active.
            </remarks>
        </member>
        <member name="T:GameCore.ItemSystem.Item">
            <summary>
            Represents the base class for all items in the game, providing common functionality for quality, level, and category management.
            </summary>
            <remarks>
            Items are components attached to units that represent equipment, consumables, and other game objects.
            They support quality and level progression, categorization for filtering and organization, and integration
            with the property and event systems. Items can be synchronized between server and client for multiplayer
            functionality and participate in the cooldown system for ability-based items.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.Item.ToString">
            <summary>
            Returns a string representation of this item including its type and friendly name.
            </summary>
            <returns>A formatted string describing this item.</returns>
        </member>
        <member name="P:GameCore.ItemSystem.Item.Link">
            <summary>
            Gets the game data link that defines this item's configuration and properties.
            </summary>
        </member>
        <member name="P:GameCore.ItemSystem.Item.Cache">
            <summary>
            Gets the cached game data for this item, providing access to configuration properties.
            </summary>
        </member>
        <member name="M:GameCore.ItemSystem.Item.#ctor(GameCore.EntitySystem.Unit,GameData.IGameLink{GameCore.ItemSystem.Data.GameDataItem})">
            <summary>
            Initializes a new item instance and attaches it to the specified unit.
            </summary>
            <param name="entity">The unit that will own this item.</param>
            <param name="link">The game data link defining this item's properties.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided link has invalid data.</exception>
            <remarks>
            This constructor sets up the item with its initial quality and level from the data configuration,
            configures synchronization settings, and registers the item with the host's attached objects system.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Item.Unit">
            <summary>
            Gets the unit that owns this item.
            </summary>
            <remarks>
            Items are always attached to units, which serve as their hosts and provide context
            for item functionality and interactions.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Item.Quality">
            <summary>
            Gets or sets the quality level of this item.
            </summary>
            <remarks>
            Quality represents the tier or rarity of the item, affecting its properties and value.
            Changes to quality trigger quality change events and are synchronized between server and client.
            On the client side, this property can only be set internally through replication.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Item.Level">
            <summary>
            Gets or sets the level of this item.
            </summary>
            <remarks>
            Level represents the upgrade tier or enhancement level of the item, typically affecting
            its effectiveness and properties. Changes to level trigger level change events and are
            synchronized between server and client. On the client side, this property can only be
            set internally through replication.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Item.Categories">
            <summary>
            Gets the list of categories this item belongs to.
            </summary>
            <remarks>
            Categories are used for filtering, organizing, and applying rules to items.
            They help determine compatibility with inventories, abilities, and other game systems.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.Item.HasCategory(GameCore.Struct.ItemCategory)">
            <summary>
            Determines whether this item belongs to the specified category.
            </summary>
            <param name="category">The category to check for.</param>
            <returns><c>true</c> if the item has the specified category; otherwise, <c>false</c>.</returns>
            <remarks>
            This method provides a convenient way to check item compatibility and filtering rules
            based on category membership.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.Item.QualityConfiguration">
            <summary>
            获取当前物品品质对应的配置数据，用于确定品质相关的视觉表现和特效。
            </summary>
            <remarks>
            <para>此属性根据物品的<see cref="P:GameCore.ItemSystem.Item.Quality"/>值从全局品质配置列表中查找对应的配置。</para>
            <para>查找规则：</para>
            <list type="bullet">
            <item><description>使用<see cref="P:GameCore.ItemSystem.Item.Quality"/>值作为索引在<see cref="P:GameCore.GameSystem.Data.GameDataGameplay.ItemQualityList"/>中查找</description></item>
            <item><description>如果索引超出范围，返回列表中的最后一个配置</description></item>
            <item><description>如果全局配置列表为空或null，返回null（物品将不显示品质特效）</description></item>
            </list>
            <para>此属性为只读计算属性，每次访问时动态获取最新的配置数据。</para>
            </remarks>
        </member>
        <member name="F:GameCore.ItemSystem.Item.QualityActors">
            <summary>
            存储当前激活的品质特效Actor列表，仅在客户端使用。
            </summary>
        </member>
        <member name="M:GameCore.ItemSystem.Item.UpdateQualityActors">
            <summary>
            更新物品的品质视觉特效，根据当前状态决定是否显示品质相关的Actor。
            </summary>
            <remarks>
            <para>此方法会根据物品当前状态自动管理品质特效的显示：</para>
            <list type="bullet">
            <item><description>如果物品单位有效且存活，清除旧特效并创建新特效</description></item>
            <item><description>如果物品单位无效或已死亡，仅清除特效</description></item>
            </list>
            <para>子类可以重写此方法来实现特定的品质特效逻辑（如ItemPickable只在地面时显示）。</para>
            </remarks>
        </member>
        <member name="T:GameCore.ItemSystem.ItemExtension">
            <summary>
            Provides extension methods for entity-based item component access.
            </summary>
            <remarks>
            This class enables exclusive access to item components on entities, allowing the use of
            Entity.GetComponent&lt;Item&gt;() syntax to retrieve item components by their tag.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.ItemExtension.GetComponent``1(GameCore.EntitySystem.Entity)">
            <summary>
            Gets an item component of the specified type from the entity.
            </summary>
            <typeparam name="TComponent">The type of item component to retrieve.</typeparam>
            <param name="entity">The entity to search for the item component.</param>
            <returns>The item component if found; otherwise, null.</returns>
            <remarks>
            This extension method provides a convenient way to access item components on entities
            using generic type parameters and the standard component access pattern.
            </remarks>
        </member>
        <member name="T:GameCore.ItemSystem.ItemMod">
            <summary>
            Represents a modifier item that can be equipped and provides dynamic property modifications and abilities to the host unit.
            </summary>
            <remarks>
            ItemMod is an advanced item type that can grant abilities, modify unit properties, and provide dynamic effects
            based on the equipped slot and current game state. Unlike static items, ItemMods have complex requirements,
            stack-based effects, and can enable/disable themselves based on conditions. They integrate with the modification
            system to provide property bonuses and state changes, and can grant temporary abilities while equipped.
            The item can have different effects based on which slot type it's equipped in, supporting versatile equipment systems.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.ItemMod.IsEnabled">
            <summary>
            Gets a value indicating whether this item mod is currently enabled and providing its effects.
            </summary>
            <value>True if the item mod meets all requirements and is actively providing benefits; otherwise, false.</value>
            <remarks>
            An enabled item mod actively applies its property modifications, state changes, and grants its ability.
            The enabled state depends on meeting all base requirements plus any additional item-specific requirements.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.ItemMod.EffectCaster">
            <summary>
            Gets the entity that serves as the caster for effects granted by this item mod.
            </summary>
            <value>The carrying unit if the item is being carried, otherwise the owning unit.</value>
            <remarks>
            This property determines which entity is considered the source for abilities and effects
            granted by this item mod. It's important for targeting, ownership, and effect attribution.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.ItemMod.MeetRequirement">
            <summary>
            Gets a value indicating whether this item mod meets all requirements for activation.
            </summary>
            <value>True if all base and carrier-specific requirements are met; otherwise, false.</value>
            <remarks>
            Item mods can have additional requirements beyond basic item requirements, such as
            unit level, stats, or other conditions that must be met by the carrying unit.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.ItemMod.Stack">
            <summary>
            Gets or sets the stack count for this item mod.
            </summary>
            <value>The number of identical item mods stacked together.</value>
            <remarks>
            Stack count affects the magnitude of property modifications and other effects.
            When the stack count changes, all modifications are updated to reflect the new values.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.ItemMod.#ctor(GameCore.EntitySystem.Unit,GameData.IGameLink{GameCore.ItemSystem.Data.GameDataItemMod},System.Boolean)">
            <summary>
            Initializes a new item mod instance with the specified configuration.
            </summary>
            <param name="entity">The unit that will own this item mod.</param>
            <param name="link">The game data link defining this item mod's properties and effects.</param>
            <param name="initializeModificationData">Whether to immediately initialize modification managers for all slot types.</param>
            <remarks>
            This constructor sets up modification managers for each slot type defined in the item's configuration.
            If initializeModificationData is true, all managers are immediately initialized; otherwise, they
            are created but not activated until needed.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.ItemMod.TestRequirement(GameCore.EntitySystem.Unit)">
            <summary>
            Tests whether this item mod meets all requirements for the specified unit.
            </summary>
            <param name="unit">The unit to test requirements against.</param>
            <returns>True if the unit meets all requirements for this item mod; otherwise, false.</returns>
            <remarks>
            This method checks both the base item requirements and any additional requirements
            specific to this item mod type, such as level, stats, or class restrictions.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.ItemMod.ActiveAbility">
            <summary>
            Gets the ability currently granted by this item mod, if any.
            </summary>
            <value>The active ability instance, or null if no ability is currently granted.</value>
            <remarks>
            Item mods can grant temporary abilities while equipped. The ability is automatically
            created when the item mod is properly equipped and meets requirements, and destroyed
            when conditions change. On the client side, this property reflects the server state.
            </remarks>
        </member>
        <member name="P:GameCore.ItemSystem.ItemMod.ActiveModificationManager">
            <summary>
            Gets the modification manager currently active for this item mod based on its equipped slot.
            </summary>
            <value>The active modification manager, or null if the item is not equipped in a supported slot.</value>
            <remarks>
            The active modification manager determines which set of property modifications and effects
            are currently being applied. This can change when the item is moved between different slots.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.ItemMod.GetModificationManager(GameCore.Container.ItemSlotType)">
            <summary>
            Gets the modification manager for the specified slot type.
            </summary>
            <param name="slotType">The slot type to get the modification manager for.</param>
            <returns>The modification manager for the specified slot type, or null if not found.</returns>
            <remarks>
            This method allows access to modification managers for specific slot types, which is useful
            for inspecting potential effects before equipping the item in different slots.
            </remarks>
        </member>
        <member name="M:GameCore.ItemSystem.ItemMod.OnInternalAssigned(GameCore.Container.InventorySlot,GameCore.Container.ReasonItemAssign)">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.ItemSystem.ItemMod.UpdateHostedAndSelfActors">
            <summary>
            HostedActors 是指物品被携带或装备时，基于物品的修改器数据为物品的拥有者动态创建的附属 Actor。
            SelfActors 是指物品本身作为单位时，附属在物品单位上的 Actor。
            它们不可能同时存在，因为物品要么被携带（此时显示为持有者身上的 HostedActors），要么作为单位存在（此时显示 SelfActors）。
            </summary>
        </member>
        <member name="M:GameCore.ItemSystem.ItemMod.ClearSelfActors">
            <summary>
            物品本身是一种单位，因此它可能有自己的附属 Actor。
            当物品被拾取后，这些附属 Actor 需要被清除，以避免视觉上的混乱。
            物品单位本身会在服务端被附加 <see cref="F:GameCore.BaseType.UnitState.SuppressActor"/> 状态，因此在客户端不会渲染其自身的表现。
            然而这个状态似乎并不会影响物品单位附属的 Actor，因此需要手动清除。
            </summary>
        </member>
        <member name="M:GameCore.ItemSystem.ItemMod.CreateSelfActors">
            <summary>
            物品本身是一种单位，因此它可能有自己的附属 Actor。
            当物品被丢弃后，这些附属 Actor 需要被重新创建，以恢复物品的视觉表现。
            参考 <see cref="M:GameCore.ItemSystem.ItemMod.ClearSelfActors"/> 方法的说明。
            </summary>
        </member>
        <member name="M:GameCore.ItemSystem.ItemMod.OnInternalDropped(GameCore.Container.InventorySlot,GameCore.Container.ReasonItemDrop)">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.ItemSystem.ItemPickable.CanAbsorb(GameCore.ItemSystem.ItemPickable)">
            <summary>
            Check if the item can absorb the stack of another item
            </summary>
            <param name="inItem">Item to be absorbed</param>
            <returns></returns>
        </member>
        <member name="M:GameCore.ItemSystem.ItemPickable.Absorb(GameCore.ItemSystem.ItemPickable)">
            <summary>
            Absorb the stack of another item
            </summary>
            <param name="inItem">Item to be absorbed</param>
            <returns>The amount of stack absorbed</returns>
        </member>
        <member name="M:GameCore.ItemSystem.ItemPickable.UpdateQualityActors">
            <summary>
            重写品质特效更新逻辑，仅在物品掉落在地面时显示品质特效。
            </summary>
            <remarks>
            <para>可拾取物品的品质特效显示规则：</para>
            <list type="bullet">
            <item><description>物品在地面时（<see cref="P:GameCore.ItemSystem.ItemPickable.Carrier"/> 为 null）：显示品质特效</description></item>
            <item><description>物品在背包中时：不显示品质特效（清除所有特效）</description></item>
            <item><description>物品单位死亡或无效时：清除所有特效</description></item>
            </list>
            <para>这种设计确保玩家只在需要识别地面物品品质时才看到特效，避免背包中的物品产生不必要的视觉干扰。</para>
            </remarks>
        </member>
        <member name="T:GameCore.ItemSystem.Protocol.ProtoDynamicModificationKey">
            <summary>
            <see cref="P:GameCore.ItemSystem.Protocol.ProtoDynamicModificationKey.DynamicModificationKey"/>的协议表示，为可序列化的值类型
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="ProtoProperty">属性链接</param>
            <param name="SubType">属性子类型</param>
        </member>
        <member name="M:GameCore.ItemSystem.Protocol.ProtoDynamicModificationKey.#ctor(GameCore.Container.ItemSlotType,GameCore.Protocol.ProtoIGameLink{GameCore.Data.GameDataUnitProperty},GameCore.Protocol.ProtoIExtendableEnum{GameCore.BaseType.PropertySubType})">
            <summary>
            <see cref="P:GameCore.ItemSystem.Protocol.ProtoDynamicModificationKey.DynamicModificationKey"/>的协议表示，为可序列化的值类型
            </summary>
            <param name="SlotType">槽位类型</param>
            <param name="ProtoProperty">属性链接</param>
            <param name="SubType">属性子类型</param>
        </member>
        <member name="P:GameCore.ItemSystem.Protocol.ProtoDynamicModificationKey.SlotType">
            <summary>槽位类型</summary>
        </member>
        <member name="P:GameCore.ItemSystem.Protocol.ProtoDynamicModificationKey.ProtoProperty">
            <summary>属性链接</summary>
        </member>
        <member name="P:GameCore.ItemSystem.Protocol.ProtoDynamicModificationKey.SubType">
            <summary>属性子类型</summary>
        </member>
        <member name="T:GameCore.Leveling.Data.GameDataRuleExperienceGrant">
            <summary>
            Defines the rules and configuration for distributing experience points when a unit is killed.
            This includes how experience is granted, the radius for distribution, filtering and validation of candidates,
            and whether to fallback to global distribution if no valid candidates are found within the radius.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataRuleExperienceGrant.ExperienceGrant">
            <summary>
            Delegate that calculates the experience points awarded when a unit is killed.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataRuleExperienceGrant.ExperienceDistributionRadius">
            <summary>
            The radius within which experience is distributed to eligible units.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataRuleExperienceGrant.ExperienceDistributionFilter">
            <summary>
            The filter used to determine which units within the radius are eligible to receive experience, the compare source is the killed unit. Combined with the validator.
            </summary>
            <remarks>
            Only units that have leveling enabled will be considered for experience distribution.
            </remarks>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataRuleExperienceGrant.ExperienceDistributionValidator">
            <summary>
            Delegate that validates whether a candidate unit is eligible to receive experience. Combined with the filter,
            </summary>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataRuleExperienceGrant.AllowGlobalExperienceDistributionFallback">
            <summary>
            Indicates whether to fall back to global experience distribution if no valid candidates are found within the radius and the killer is not a valid candidate.
            </summary>
        </member>
        <member name="M:GameCore.Leveling.Data.GameDataRuleExperienceGrant.IsValidDistributionCandidate(GameCore.EntitySystem.Unit,GameCore.EntitySystem.Unit,GameCore.Interface.IExecutionContext)">
            <summary>
            Determines whether the specified candidate unit is eligible to receive experience distribution  based on the
            given killed unit and execution context.
            </summary>
            <remarks>A candidate unit is considered valid for experience distribution if it passes the experience 
            distribution filter, has leveling capabilities, and satisfies any additional validation logic  provided by the
            <c>ExperienceDistributionValidator</c>, if defined.</remarks>
            <param name="killedUnit">The unit that was killed, which serves as the source of experience distribution.</param>
            <param name="candidate">The unit being evaluated for eligibility to receive experience distribution.</param>
            <param name="killingContext">The execution context in which the killing occurred, providing additional  information for validation.</param>
            <returns><see langword="true"/> if the candidate unit is eligible to receive experience distribution;  otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataUnitLeveling.ExperienceKillerFraction">
            <summary>
            Gets or sets the fraction of experience points awarded to the unit if the unit is the one that
            dealt the killing blow.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataUnitLeveling.ExperienceRequiredForEachLevel">
            <summary>
            Gets or sets the list of experience points required to reach each level n from level n-1.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataUnitLeveling.ExtraLevelExperienceRequiredLevelFactor">
            <summary>
            If the targeting level is higher than the level specified in <see cref="P:GameCore.Leveling.Data.GameDataUnitLeveling.ExperienceRequiredForEachLevel"/>, this value and <see cref="P:GameCore.Leveling.Data.GameDataUnitLeveling.ExtraLevelExperienceRequiredBonusPerLevel"/> will be used to calculate the experience required for level n from n-1. The formula is: RequiredExperience = ExtraLevelExperienceRequiredLevelFactor * level + ExtraLevelExperienceRequiredBonusPerLevel
            </summary>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataUnitLeveling.ExtraLevelExperienceRequiredBonusPerLevel">
            <summary>
            If the targeting level is higher than the level specified in <see cref="P:GameCore.Leveling.Data.GameDataUnitLeveling.ExperienceRequiredForEachLevel"/>, this value and <see cref="P:GameCore.Leveling.Data.GameDataUnitLeveling.ExtraLevelExperienceRequiredLevelFactor"/> will be used to calculate the experience required for level n from n-1. The formula is: RequiredExperience = ExtraLevelExperienceRequiredLevelFactor * level + ExtraLevelExperienceRequiredBonusPerLevel
            </summary>
        </member>
        <member name="P:GameCore.Leveling.Data.GameDataUnitLeveling.MaxLevelLeech">
            <summary>
            Specifies if the entity can still be distributed experience even if it is at the maximum level. This is useful for entities that have a maximum level but can still gain experience for other purposes, such as item upgrades or other rewards. If this is set to false, the entity will not receive experience if it is at the maximum level, and other candidates will receive more experience as fewer candidates are available.
            </summary>
        </member>
        <member name="M:GameCore.Leveling.Data.GameDataUnitLeveling.ExperienceRequiredForLevel(System.UInt32)">
            <summary>
            Returns the experience required to reach the specified level from the previous level.
            For levels within ExperienceRequiredForEachLevel, returns the corresponding value.
            For higher levels, uses the formula:
              RequiredExperience = ExtraLevelExperienceRequiredLevelFactor * level + ExtraLevelExperienceRequiredBonusPerLevel
            </summary>
            <param name="level">The target level.</param>
            <returns>Experience required to reach the specified level from the previous level.</returns>
        </member>
        <member name="M:GameCore.Leveling.Data.GameDataUnitLeveling.TotalExperienceRequiredForLevel(System.UInt32)">
            <summary>
            Returns the total cumulative experience required to reach the specified level from level 0.
            Sums up the experience required for each level up to the specified level.
            </summary>
            <param name="level">The target level.</param>
            <returns>Total experience required to reach the specified level from level 0.</returns>
        </member>
        <member name="T:GameCore.Leveling.Data.Struct.ExperienceDistributionValidator">
            <summary>
            Represents a method that validates whether a candidate unit is eligible to receive experience points.
            </summary>
            <param name="candidate">
            The unit being considered for experience distribution. This is typically a unit that may receive experience.
            </param>
            <param name="killContext">
            The execution context providing additional information relevant to the validation, such as the killer and victim.
            </param>
            <returns>
            A <see cref="T:GameCore.BaseType.CmdResult"/> indicating whether the candidate is eligible to receive experience.
            If returns <see cref="F:GameCore.BaseType.CmdResult.Ok"/>, the candidate can receive experience; otherwise, the candidate is excluded.
            </returns>
        </member>
        <member name="T:GameCore.Leveling.Data.Struct.UnitKilledExperience">
            <summary>
            Represents a method that calculates the experience points awarded when a unit is killed.
            </summary>
            <param name="deathType">
            The type of death that occurred, which may influence the experience calculation.
            Normally, only <see cref="F:GameCore.BaseType.DeathType.Normal"/> will grant experience points.
            </param>
            <param name="context">The execution context providing additional information or state relevant to the calculation, such as the killer and victim.
            </param>
            <returns>
            The amount of experience points awarded as a <see langword="double"/>. If the experience is not applicable or cannot be calculated, <see langword="null"/> is returned.
            </returns>
        </member>
        <member name="T:GameCore.Leveling.UnitLeveling">
            <summary>
            Provides leveling logic for a unit, including experience tracking, level calculation, and property/state modifications.
            Handles level up/down, experience to next level, and applies modifications as the unit's level changes.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.UnitLeveling.UnitPropertyComplex">
            <summary>
            Gets the <see cref="P:GameCore.Leveling.UnitLeveling.UnitPropertyComplex"/> component used for property calculations.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.UnitLeveling.Unit">
            <summary>
            Gets the unit associated with this leveling logic.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.UnitLeveling.Level">
            <summary>
            Gets the current level of the unit.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.UnitLeveling.ExperienceToNextLevel">
            <summary>
            Gets the experience required to reach the next level, or <c>null</c> if at max level.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.UnitLeveling.Experience">
            <summary>
            Gets the current experience points of the unit.
            Setting this property will recalculate the level and update the experience property accordingly.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.UnitLeveling.LevelMax">
            <summary>
            Gets the maximum level the unit can reach, or <c>null</c> if not set, this is determined by the <see cref="F:GameCore.ScopeData.UnitProperty.LevelMax"/> property in the <see cref="P:GameCore.Leveling.UnitLeveling.UnitPropertyComplex"/> component.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.UnitLeveling.IsMaxLevel">
            <summary>
            Gets a value indicating whether the unit is at the maximum level.
            </summary>
        </member>
        <member name="P:GameCore.Leveling.UnitLeveling.ExperienceKillerFraction">
            <summary>
            Gets or sets the fraction of experience points awarded to the unit if the unit is the one that
            dealt the killing blow.
            </summary>
        </member>
        <member name="T:GameCore.Localization.LocalizedString">
            <summary>
            Represents a localized string that automatically resolves its value from the localization system using a key.
            </summary>
            <param name="key">The localization key used to lookup the string value.</param>
            <remarks>
            This class provides lazy loading of localized strings and automatic fallback to the key if the resource is not found.
            It supports implicit conversion from and to string for convenience.
            </remarks>
        </member>
        <member name="M:GameCore.Localization.LocalizedString.#ctor(System.String)">
            <summary>
            Represents a localized string that automatically resolves its value from the localization system using a key.
            </summary>
            <param name="key">The localization key used to lookup the string value.</param>
            <remarks>
            This class provides lazy loading of localized strings and automatic fallback to the key if the resource is not found.
            It supports implicit conversion from and to string for convenience.
            </remarks>
        </member>
        <member name="P:GameCore.Localization.LocalizedString.Key">
            <summary>
            Gets or sets the localization key used to lookup the string value.
            </summary>
        </member>
        <member name="P:GameCore.Localization.LocalizedString.Value">
            <summary>
            Gets the localized string value for the current key, or null if the resource is not found.
            </summary>
            <remarks>
            The value is lazily loaded from the <see cref="T:GameCore.Localization.LocalizationManager"/> when first accessed.
            If the resource cannot be found, <see cref="P:GameCore.Localization.LocalizedString.ResourceNotFound"/> will be set to true.
            </remarks>
        </member>
        <member name="P:GameCore.Localization.LocalizedString.ResourceNotFound">
            <summary>
            Gets a value indicating whether the localization resource for this key was not found.
            </summary>
        </member>
        <member name="M:GameCore.Localization.LocalizedString.ToString">
            <summary>
            Returns the localized string value, or the key if the value is not available.
            </summary>
            <returns>The localized value or the fallback key.</returns>
        </member>
        <member name="M:GameCore.Localization.LocalizedString.op_Implicit(GameCore.Localization.LocalizedString)~System.String">
            <summary>
            Implicitly converts a <see cref="T:GameCore.Localization.LocalizedString"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="localizedString">The localized string to convert.</param>
            <returns>The string representation of the localized string.</returns>
        </member>
        <member name="M:GameCore.Localization.LocalizedString.op_Implicit(System.String)~GameCore.Localization.LocalizedString">
            <summary>
            Implicitly converts a <see cref="T:System.String"/> key to a <see cref="T:GameCore.Localization.LocalizedString"/>.
            </summary>
            <param name="key">The localization key.</param>
            <returns>A new <see cref="T:GameCore.Localization.LocalizedString"/> instance with the specified key.</returns>
        </member>
        <member name="T:GameCore.ModelAnimation.Animation">
            <summary>
            Represents a runtime animation instance that wraps engine-level animation functionality
            and provides high-level control over animation playback, timing, and state management.
            </summary>
            <remarks>
            The Animation class serves as the primary interface for controlling individual animations
            in the game world. It bridges the gap between the low-level engine animation system
            (<see cref="T:EngineInterface.GoInterface.IViewAnimation"/>) and the high-level game logic, providing a clean API
            for animation management.
            
            Key features:
            - Priority-based animation management with automatic suppression
            - Smooth blending between animations with configurable timing
            - Real-time playback control (speed, looping, offset)
            - Event-driven state notifications
            - Automatic resource management and cleanup
            - Integration with the actor system for spatial coordination
            
            Animation instances are typically created through <see cref="!:IActorAnimationPlayable"/>
            interface methods rather than direct construction, ensuring proper integration with
            the actor lifecycle and animation management systems.
            </remarks>
            <example>
            <code>
            // Play an animation with custom parameters
            var animation = actor.PlayAnimation(walkAnimationLink, new AnimationPlayParam {
                Priority = 50,
                Speed = 1.2f,
                IsLooping = true,
                BlendIn = TimeSpan.FromSeconds(0.25f)
            });
            
            // Monitor animation state
            animation.StateChanged += (state) => {
                if (state == AnimationStateEvent.Finished) {
                    // Animation completed
                }
            };
            
            // Control playback
            animation.Speed = 0.8f;
            animation.Stop(TimeSpan.FromSeconds(0.5f));
            </code>
            </example>
        </member>
        <member name="M:GameCore.ModelAnimation.Animation.GetOrCreateEngineAnimation(EngineInterface.GoInterface.IViewAnimation)">
            <summary>
            Retrieves an existing Animation instance for the given IViewAnimation, or creates one if it does not exist.
            This is intended for engine/internal use when an Animation is created by the engine without a link.
            For normal usage, prefer the <see cref="T:GameCore.ModelAnimation.AnimationSequence"/> or <see cref="T:GameCore.ModelAnimation.Animation"/> constructors.
            </summary>
            <param name="viewAnimation">The engine-side animation object.</param>
            <returns>
            The corresponding Animation instance.
            Null if the actor associated with the viewAnimation does not exist.
            </returns>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.AnimationResource">
            <summary>
            Gets the animation resource file that this animation instance is playing.
            </summary>
            <value>The animation resource file path as a <see cref="T:GameCore.ResourceType.Animation"/>.</value>
            <remarks>
            This property provides access to the original animation resource that was used to create
            this animation instance. It can be used for debugging, logging, or to identify which
            animation file is currently being played.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.IsValid">
            <summary>
            Gets a value indicating whether this animation instance is valid and ready for use.
            </summary>
            <value>True if the animation is valid and the underlying view animation is active; otherwise, false.</value>
            <remarks>
            An animation is considered valid when both the base object validity checks pass and
            the underlying engine animation is in a valid state (Phase >= 0). Invalid animations
            should not be used for playback control and may indicate the animation has been
            destroyed or encountered an error.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.IsActivePlaying">
            <summary>
            Gets a value indicating whether this animation is currently actively playing.
            </summary>
            <value>True if the animation is in the active playing state; otherwise, false.</value>
            <remarks>
            This property returns true only when the animation is in the current actor's active
            animation list and is not suppressed by higher priority animations and not paused.
            An animation can exist but not be actively playing if it has been suppressed by
            a higher priority animation or if it has been paused.
            
            Use this property to check if an animation is actually contributing to the visual
            appearance of the actor, as opposed to just existing in the animation system.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.Priority">
            <summary>
            Gets or sets the priority of this animation instance.
            </summary>
            <value>The priority value, where higher numbers indicate higher priority.</value>
            <remarks>
            Animation priority determines which animation is visible when multiple animations
            are playing on the same actor. Higher priority animations will suppress lower
            priority animations, causing them to be paused until the higher priority animation
            completes or is stopped.
            
            Priority can be changed at runtime to dynamically adjust animation precedence.
            This is useful for implementing dynamic animation systems where the importance
            of animations can change based on game state.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.LogicLayer">
            <summary>
            Gets the logic layer that this animation belongs to.
            </summary>
            <value>The <see cref="T:EngineInterface.Enum.AnimationLogicLayer"/> that categorizes this animation.</value>
            <remarks>
            Logic layers provide a way to categorize animations and control their interactions.
            Animations on different logic layers can play simultaneously without interfering
            with each other, while animations on the same layer compete based on priority.
            
            This property is read-only and is set when the animation is created.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.Duration">
            <summary>
            Gets the total duration of this animation.
            </summary>
            <value>The total duration as a <see cref="T:System.TimeSpan"/>.</value>
            <remarks>
            This represents the total length of the animation from start to finish.
            For looping animations, this is the duration of one complete loop.
            The duration is determined by the animation resource file and cannot be changed at runtime.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.IsLooping">
            <summary>
            Gets or sets a value indicating whether this animation should loop continuously.
            </summary>
            <value>True if the animation should loop; otherwise, false.</value>
            <remarks>
            When set to true, the animation will automatically restart from the beginning
            when it reaches the end, creating a continuous loop. When set to false, the
            animation will play once and then stop.
            
            This property can be changed at runtime to dynamically control looping behavior.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.IsSuppressed">
            <summary>
            Gets a value indicating whether this animation is currently suppressed by a higher priority animation.
            </summary>
            <value>True if the animation is suppressed; otherwise, false.</value>
            <remarks>
            A suppressed animation is paused and not contributing to the actor's visual appearance
            due to a higher priority animation being active on the same logic layer. The animation
            will automatically resume when the higher priority animation finishes or is stopped.
            
            This property is read-only and reflects the current state of the animation system.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.ShouldPauseOnSuppressed">
            <summary>
            Gets or sets a value indicating whether this animation should pause when suppressed.
            </summary>
            <value>True if the animation should pause when suppressed; otherwise, false.</value>
            <remarks>
            When set to true, the animation will pause its timeline when suppressed by a higher
            priority animation, resuming from the same point when it becomes active again.
            When set to false, the animation continues to advance its timeline even when suppressed,
            which may result in missing portions of the animation when it becomes active again.
            
            This setting is useful for animations that need to maintain timing synchronization
            with other systems even when not visible.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.PlayingOffset">
            <summary>
            Gets or sets the current playback time offset within the animation.
            </summary>
            <value>The time offset from the beginning of the animation as a <see cref="T:System.TimeSpan"/>.</value>
            <remarks>
            This property allows you to jump to specific time points in the animation timeline.
            The value represents the elapsed time from the start of the animation, so setting
            it to TimeSpan.FromSeconds(2.5) will jump to 2.5 seconds into the animation.
            
            Setting this property will immediately jump the animation to the specified time offset,
            which can be useful for synchronizing animations, implementing scrubbing functionality,
            or creating specific timing effects.
            
            The offset should not exceed the animation's total duration. Values beyond the
            duration may cause unexpected behavior or be clamped to the animation's length.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.Speed">
            <summary>
            Gets or sets the playback speed multiplier for this animation.
            </summary>
            <value>The speed multiplier, where 1.0 is normal speed, 0.5 is half speed, and 2.0 is double speed.</value>
            <remarks>
            This property allows you to dynamically control the playback speed of the animation.
            Values less than 1.0 slow down the animation, while values greater than 1.0 speed it up.
            A value of 0.0 will effectively pause the animation.
            
            Speed changes take effect immediately and can be used to create effects like slow motion,
            fast-forward, or to synchronize animations with dynamic game timing.
            
            Note: If you want to pause the animation while preserving the ability to resume at the same speed,
            use the <see cref="P:GameCore.ModelAnimation.Animation.Paused"/> property instead of setting Speed to 0.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Animation.EngineAnimationType">
            <summary>
            Gets the engine-specific animation type for this animation instance.
            </summary>
            <value>The <see cref="P:GameCore.ModelAnimation.Animation.EngineAnimationType"/> that categorizes this animation at the engine level.</value>
            <remarks>
            This property provides access to the engine-level animation type, which is used internally
            by the animation system for optimization and behavior control. This is primarily useful
            for debugging and advanced animation system development.
            </remarks>
        </member>
        <member name="M:GameCore.ModelAnimation.Animation.FadeBlendWeight(System.Single,System.TimeSpan)">
            <summary>
            Gradually fades the blend weight of this animation to a target value over a specified duration.
            </summary>
            <param name="targetWeight">The target blend weight to fade to, typically between 0.0 and 1.0.</param>
            <param name="fadeTime">The duration over which the fade should occur.</param>
            <returns>True if the fade was successfully initiated; otherwise, false.</returns>
            <remarks>
            Blend weight fading allows for smooth transitions in animation visibility without completely
            stopping the animation. This is useful for creating dynamic blending effects where animations
            need to gradually appear or disappear while maintaining their timeline position.
            
            A target weight of 0.0 will make the animation completely invisible, while 1.0 will make it
            fully visible. Values between 0.0 and 1.0 create partial blending effects.
            
            The fade operates independently of the animation's priority system, allowing for complex
            blending scenarios where multiple animations contribute to the final appearance.
            </remarks>
        </member>
        <member name="M:GameCore.ModelAnimation.Animation.Stop(System.Nullable{System.TimeSpan})">
            <summary>
            Stops the animation with an optional fade-out transition.
            </summary>
            <param name="fadeOutTime">The duration over which the animation should fade out before stopping. If null, uses the default fade time of 0.15 seconds.</param>
            <returns>True if the stop was successfully initiated; otherwise, false.</returns>
            <remarks>
            This method gracefully terminates the animation, optionally providing a smooth fade-out
            transition to avoid abrupt visual changes. The fade-out allows the animation to blend
            smoothly to its final state or to other animations that may become active.
            
            Once stopped, the animation cannot be restarted - a new animation instance must be created
            to play the same animation again. The animation resources will be automatically cleaned up
            when the stop process completes.
            
            If other animations were suppressed by this animation, they will automatically resume
            when this animation stops, creating a smooth transition in the animation system.
            </remarks>
        </member>
        <member name="E:GameCore.ModelAnimation.Animation.StateChanged">
            <summary>
            Occurs when the animation state changes, providing notifications for key animation events.
            </summary>
            <remarks>
            This event is fired when significant state changes occur in the animation lifecycle,
            such as when the animation starts, finishes, or is removed from the system.
            
            The event provides <see cref="T:EngineInterface.Enum.AnimationStateEvent"/> values that indicate the specific
            type of state change that occurred:
            - <see cref="F:EngineInterface.Enum.AnimationStateEvent.Surfaced"/>: Animation became active (started playing or resumed from suppression)
            - <see cref="F:EngineInterface.Enum.AnimationStateEvent.Suppressed"/>: Animation was suppressed by a higher priority animation
            - <see cref="F:EngineInterface.Enum.AnimationStateEvent.Completed"/>: Animation finished playing normally
            - <see cref="F:EngineInterface.Enum.AnimationStateEvent.Removed"/>: Animation was removed from the system
            
            This event is essential for implementing animation-driven game logic, such as triggering
            effects when animations complete, chaining animations together, or cleaning up resources
            when animations are removed.
            </remarks>
        </member>
        <member name="E:GameCore.ModelAnimation.Animation.TimelineEventTriggered">
            <summary>
            Occurs when a timeline event marker is triggered during animation playback.
            </summary>
            <remarks>
            This event is fired when the animation timeline reaches predefined event markers that are
            defined in the <see cref="P:GameCore.ResourceType.Data.GameDataModel.Events"/> data. These markers allow developers to synchronize game
            logic with specific moments in the animation, such as footstep sounds, weapon impacts,
            or particle effects.
            
            Timeline events have a duration and can trigger twice during playback:
            - At the start of the event duration (when the boolean parameter is true)
            - At the end of the event duration (when the boolean parameter is false)
            
            The event provides two parameters:
            - <paramref name="eventName"/>: The name/identifier of the timeline event as defined in the animation
            - <paramref name="isStart"/>: True if this is the start of the event duration, false if it's the end
            
            Timeline events are frame-accurate and will trigger at the exact moments specified in the animation,
            taking into account the current playback speed and time offset. This ensures precise synchronization
            between animation and gameplay elements.
            
            This event is particularly useful for:
            - Playing sound effects with proper start/stop timing
            - Triggering particle effects that need specific durations
            - Implementing frame-perfect gameplay mechanics with duration-based logic
            - Synchronizing UI animations with character actions that have timing windows
            </remarks>
            <example>
            <code>
            animation.TimelineEventTriggered += (eventName, isStart) => {
                switch (eventName.ToString()) {
                    case "footstep":
                        if (isStart) PlayFootstepSound();
                        break;
                    case "shield_active":
                        if (isStart) EnableShieldEffect();
                        else DisableShieldEffect();
                        break;
                    case "vulnerability_window":
                        SetVulnerabilityState(isStart);
                        break;
                }
            };
            </code>
            </example>
        </member>
        <member name="T:GameCore.ModelAnimation.AnimationBracket">
            <summary>
            Represents a bracket animation controller that manages lifecycle-based animations
            following the Birth → Stand → Death pattern commonly used for temporary effects and actors.
            </summary>
            <remarks>
            AnimationBracket provides a specialized animation controller for managing three-stage
            animation sequences that follow a predictable lifecycle pattern. This pattern is commonly
            used for:
            - Temporary visual effects that appear, persist, and disappear
            - Enemy spawn sequences with birth, idle, and death animations
            - Environmental objects with activation, active, and deactivation states
            - UI elements with show, display, and hide transitions
            
            The bracket system automatically manages the transitions between stages and can be
            configured to either loop the stand animation indefinitely or play through all
            stages once (one-shot mode).
            
            Key features:
            - Automatic stage progression with configurable timing
            - Support for both looping and one-shot playback modes
            - Optional actor destruction when the death animation completes
            - Integration with the priority-based animation system
            - Ability to skip the birth animation for immediate activation
            </remarks>
            <example>
            <code>
            // Create a bracket animation for a magical effect
            var bracketData = new GameDataAnimationBracket {
                BirthStandDeathAnimation = new BirthStandDeathAnimation {
                    BirthAnimation = "magic_appear",
                    StandAnimation = "magic_loop",
                    DeathAnimation = "magic_vanish"
                },
                ForceOneShot = false,     // Birth → Stand (loop) → Death
                KillOnFinish = true       // Destroy actor when death completes
            };
            
            var bracket = actor.PlayAnimationBracket(bracketData.CachePlayParam);
            
            // Manually stop the bracket (triggers death animation)
            bracket.Stop();
            </code>
            </example>
        </member>
        <member name="M:GameCore.ModelAnimation.AnimationBracket.Stop(System.Boolean)">
            <summary>
            Stops the bracket animation sequence, optionally skipping the death animation.
            </summary>
            <param name="skipDeath">If true, the death animation will be skipped and the bracket will stop immediately. If false, the death animation will play before stopping if the bracket is currently playing stand animation.</param>
            <returns>True if the stop was successfully initiated; otherwise, false.</returns>
            <remarks>
            This method triggers the termination of the bracket animation sequence. By default,
            it will transition to the death animation stage and play it to completion before
            stopping. If skipDeath is true, the sequence will stop immediately without playing
            the death animation.
            
            If the bracket is configured with KillOnFinish set to true, the associated actor
            will be destroyed when the death animation completes (or immediately if skipDeath is true).
            
            This method is typically called when the bracket animation needs to be terminated
            prematurely, such as when the associated effect or actor is no longer needed.
            </remarks>
        </member>
        <member name="T:GameCore.ModelAnimation.AnimationSequence">
            <summary>
            Represents a runtime controller for animation sequences that orchestrates playback, manages timing,
            and coordinates events during complex animation sequences.
            </summary>
            <remarks>
            AnimationSequence serves as the runtime execution engine for <see cref="T:GameCore.ModelAnimation.Data.GameDataAnimationSequence"/>
            configurations, providing real-time control over multi-layered animation playback. It manages the
            coordination of multiple animation playbacks, actor spawning, and event triggering with precise timing.
            
            Key capabilities include:
            - Playback control with pause, resume, and stop functionality
            - Dynamic switching between different playbacks within the sequence
            - Event triggering at precise time offsets with contextual information
            - Automatic management of spawned actors and their lifecycles
            - Timeline synchronization across all sequence elements
            
            The sequence operates as a state machine that can be controlled during runtime, allowing for
            interactive sequences, conditional branching, and dynamic response to game events. This makes
            it suitable for cutscenes, complex ability animations, environmental sequences, and any scenario
            requiring precise coordination of multiple visual and gameplay elements.
            
            Events are fired through the <see cref="E:GameCore.ModelAnimation.AnimationSequence.EventTriggered"/> event, providing detailed context
            about timing, sequence state, and the specific event that occurred.
            </remarks>
            <example>
            <code>
            var sequence = new AnimationSequence(sequenceDataLink);
            
            // Subscribe to sequence events
            sequence.EventTriggered += (args) =>
            {
                if (args.EventKey == SequenceEventKey.ApplyDamage)
                {
                    ApplyDamage(args.Elapsed, args.PlaybackIndex);
                }
            };
            
            // Start the sequence
            sequence.Play(targetActor, triggerEvents: true);
            
            // Control playback as needed
            sequence.Pause();
            sequence.SwitchToPlayback(2);
            sequence.Resume();
            </code>
            </example>
        </member>
        <member name="M:GameCore.ModelAnimation.AnimationSequence.SwitchToPlayback(System.Nullable{System.Int32})">
            <summary>
            Switches to the specified playback within the animation sequence.
            </summary>
            <param name="playbackIndex">The zero-based index of the playback to switch to. If null, advances to the next playback in sequence.</param>
            <remarks>
            This method allows dynamic control over which playback configuration is currently active within
            the sequence. Each playback represents a different animation configuration with its own timing,
            blending, and duration settings as defined in the sequence data.
            
            When switching playbacks:
            - The current playback will blend out according to its blend settings
            - The target playback will blend in smoothly to avoid jarring transitions
            - Any spawned actors from the previous playback may be affected based on their lifecycle settings
            - Events associated with the new playback will be scheduled according to the new timeline
            
            If playbackIndex is null, the sequence will advance to the next playback in the list.
            If already at the last playback, the behavior depends on the sequence's loop settings.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when playbackIndex is negative or exceeds the available playbacks.</exception>
        </member>
        <member name="M:GameCore.ModelAnimation.AnimationSequence.Pause">
            <summary>
            Pauses the animation sequence, suspending all playback, timing, and event processing.
            </summary>
            <remarks>
            When paused, the sequence maintains its current state but stops all progression:
            - Animation playbacks are paused at their current frame
            - Event timers are suspended (events will not fire)
            - Spawned actors remain active but their sequence-controlled behaviors are paused
            - The sequence can be resumed from exactly the same point using <see cref="M:GameCore.ModelAnimation.AnimationSequence.Resume"/>
            
            This is useful for implementing pause functionality in games, waiting for external conditions,
            or creating interactive moments where the sequence waits for user input.
            
            Calling Pause() on an already paused sequence has no effect.
            </remarks>
        </member>
        <member name="M:GameCore.ModelAnimation.AnimationSequence.Resume">
            <summary>
            Resumes a paused animation sequence, continuing from where it was paused.
            </summary>
            <remarks>
            Resume restores the sequence to active playback state:
            - Animation playbacks continue from their paused frame
            - Event timers resume counting down from their suspended state
            - All sequence elements continue their progression as if no pause occurred
            - The timing remains consistent with the original sequence timeline
            
            This method only affects paused sequences. Calling Resume() on an already playing
            sequence has no effect.
            
            The sequence will fire any events that should have occurred during the pause period
            if their timing has been reached when resuming.
            </remarks>
        </member>
        <member name="M:GameCore.ModelAnimation.AnimationSequence.Stop">
            <summary>
            Stops the animation sequence completely, ending all playback and cleaning up resources.
            </summary>
            <remarks>
            Stop performs a complete shutdown of the sequence:
            - All animation playbacks are immediately stopped
            - Spawned actors are despawned according to their cleanup settings
            - Pending events are cancelled and will not fire
            - The sequence returns to its initial state
            - Resources are cleaned up to prevent memory leaks
            
            Unlike pause, stopping a sequence cannot be resumed - it must be restarted from the beginning
            with a new <see cref="!:Play"/> call. This is typically used when the sequence should be
            completely terminated, such as when switching to a different sequence or ending a cutscene.
            
            Calling Stop() on an already stopped sequence has no effect.
            </remarks>
        </member>
        <member name="E:GameCore.ModelAnimation.AnimationSequence.EventTriggered">
            <summary>
            Occurs when a sequence event is triggered, providing detailed context about the event and sequence state.
            </summary>
            <remarks>
            This event is fired whenever a <see cref="T:GameCore.ModelAnimation.Data.Struct.SequenceEvent"/> reaches its scheduled
            time offset within the animation sequence. The event provides comprehensive context through
            <see cref="T:GameCore.ModelAnimation.Struct.SequenceEventArgs"/>, including:
            
            - The sequence instance that triggered the event
            - The specific event key that was triggered
            - Timing information (elapsed time since sequence start)
            - The playback index that was active when the event fired
            
            Event handlers can use this information to:
            - Coordinate gameplay actions with animation timing
            - Trigger sound effects, particle systems, or other visual elements
            - Apply damage, healing, or other game mechanics at precise moments
            - Implement interactive elements or conditional sequence branching
            - Log or debug sequence behavior
            
            Events are fired in the order they are scheduled, and if a sequence event has
            <see cref="P:GameCore.ModelAnimation.Data.Struct.SequenceEvent.PauseSequence"/> set to true, the sequence
            will automatically pause after firing this event.
            </remarks>
        </member>
        <member name="T:GameCore.ModelAnimation.Data.GameDataAnimationBracket">
            <summary>
            Represents the configuration data for a bracket animation that manages lifecycle-based 
            animations following the Birth → Stand → Death pattern.
            </summary>
            <remarks>
            GameDataAnimationBracket provides configuration for three-stage animation sequences
            that follow a predictable lifecycle pattern. This is commonly used for:
            - Temporary visual effects that appear, persist, and disappear
            - Enemy or character spawn sequences
            - Environmental objects with activation, active, and deactivation states
            - UI elements with show, display, and hide transitions
            
            The bracket system provides automatic management of stage transitions and supports
            both looping and one-shot playback modes, making it ideal for effects that need
            predictable lifecycle management.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationBracket.BirthStandDeathAnimation">
            <summary>
            Gets or sets the birth, stand, and death animation configuration for this bracket.
            </summary>
            <value>The <see cref="P:GameCore.ModelAnimation.Data.GameDataAnimationBracket.BirthStandDeathAnimation"/> configuration containing the three animation stages.</value>
            <remarks>
            This property defines the three animation resources that will be used for each stage
            of the bracket animation lifecycle:
            - Birth: The initial animation played when the bracket starts
            - Stand: The looping animation played during the active phase
            - Death: The final animation played when the bracket ends
            
            If this property is null, the bracket animation will not have any animations to play.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationBracket.LogicLayer">
            <summary>
            Gets or sets the logic layer that this bracket animation will be played on.
            </summary>
            <value>The animation logic layer. Default is <see cref="F:EngineInterface.Enum.AnimationLogicLayer.Normal"/>.</value>
            <remarks>
            Logic layers provide a way to categorize animations and control their interactions.
            Bracket animations on different logic layers can play simultaneously without 
            interfering with each other, while animations on the same layer compete based on priority.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationBracket.Priority">
            <summary>
            Gets or sets the priority of this bracket animation.
            </summary>
            <value>The priority value, where higher numbers indicate higher priority. Default is 0.</value>
            <remarks>
            Animation priority determines which animation is visible when multiple animations
            are playing on the same actor and logic layer. Higher priority bracket animations
            will suppress lower priority animations, causing them to be paused until the
            higher priority animation completes or is stopped.
            
            The priority applies to all stages of the bracket animation (birth, stand, and death).
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationBracket.ForceOneShot">
            <summary>
            Gets or sets a value indicating whether the bracket should play all stages once (one-shot mode)
            or loop the stand animation indefinitely.
            </summary>
            <value>True for one-shot mode (Birth → Stand → Death); false for looping mode (Birth → Stand loop → Death on stop).</value>
            <remarks>
            When set to true, the bracket will play through all three stages sequentially:
            Birth animation → Stand animation (once) → Death animation, then stop.
            
            When set to false, the bracket will play the Birth animation once, then loop
            the Stand animation indefinitely until manually stopped, at which point the
            Death animation will play.
            
            One-shot mode is useful for effects with predetermined durations, while looping
            mode is ideal for effects that need to persist until external conditions change.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationBracket.KillOnFinish">
            <summary>
            Gets or sets a value indicating whether the associated actor should be destroyed
            when the bracket animation completes.
            </summary>
            <value>True to destroy the actor when the animation completes; otherwise, false.</value>
            <remarks>
            When set to true, the actor associated with this bracket animation will be
            automatically destroyed when the death animation completes. This is useful
            for temporary effects, spawned enemies, or other actors that should be cleaned
            up when their animation lifecycle ends.
            
            When set to false, the actor will remain in the scene after the animation
            completes, allowing it to be reused or controlled by other systems.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationBracket.SkipBirthAnimation">
            <summary>
            Gets or sets a value indicating whether the birth animation should be skipped.
            </summary>
            <value>True to skip the birth animation and start directly with the stand animation; otherwise, false.</value>
            <remarks>
            When set to true, the bracket will skip the birth animation and immediately
            begin playing the stand animation. This is useful when you want the effect
            to appear instantly without any spawn/appear animation.
            
            This setting is particularly useful for effects that need to be synchronized
            with other systems or when the birth animation is not needed for the desired
            visual effect.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationBracket.CachePlayParam">
            <summary>
            Gets the cached animation bracket play parameters constructed from this configuration.
            </summary>
            <value>The cached <see cref="T:EngineInterface.BaseType.AnimationBracketPlayParam"/> instance.</value>
            <remarks>
            This property provides a cached version of the bracket animation parameters that can be
            used directly with the animation system without needing to construct new parameter
            objects each time. The cache is lazily initialized and reused for performance.
            
            The cached parameters include all the configuration settings from this bracket,
            including the birth/stand/death animation names, priority, logic layer, and behavioral flags.
            
            TODO: The cache should be invalidated and rebuilt when animation parameters change.
            Currently, changes to the configuration properties will not automatically update
            the cached parameters.
            </remarks>
        </member>
        <member name="T:GameCore.ModelAnimation.Data.GameDataAnimationSequence">
            <summary>
            Represents a comprehensive animation sequence configuration that orchestrates multiple animation playbacks,
            actor creations, and event triggers over time to create complex, synchronized animation experiences.
            </summary>
            <remarks>
            GameDataAnimationSequence serves as a high-level animation composition tool that allows you to:
            - Orchestrate multiple animation playbacks with precise timing and blending
            - Spawn and manage temporary actors during specific moments in the sequence
            - Trigger events at designated time offsets for game logic integration
            
            This class is particularly useful for creating cutscenes, complex ability animations, environmental
            sequences, or any scenario where multiple visual and gameplay elements need to be synchronized
            with precise timing control.
            
            The sequence execution follows this pattern:
            1. Animation playbacks are initiated according to their individual timing configurations
            2. Sequence actors are created at their specified spawn offsets and remain active for their configured durations
            3. Sequence events are triggered at their designated time offsets
            4. All elements are coordinated to create a cohesive, synchronized experience
            </remarks>
            <example>
            <code>
            var complexSequence = new GameDataAnimationSequence
            {
                Playbacks = [
                    new AnimationPlayback { AnimationRaw = "character_cast_start", PlaybackDuration = TimeSpan.FromSeconds(1) },
                    new AnimationPlayback { AnimationRaw = "character_cast_loop", PlaybackDuration = TimeSpan.FromSeconds(2), IsLooping = true }
                ],
                SequenceActors = [
                    new SequenceActorSpawn { Actor = magicCircleActor, SpawnOffset = TimeSpan.FromSeconds(0.5), Duration = TimeSpan.FromSeconds(2.0) }
                ],
                SequenceEvents = [
                    new SequenceEvent { EventKey = SequenceEventKey.StartMagicEffect, Offset = TimeSpan.FromSeconds(0.8) }
                ]
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSequence.Playbacks">
            <summary>
            Gets or sets the collection of animation playbacks that will be executed during the sequence.
            </summary>
            <value>A list of <see cref="T:GameCore.ResourceType.Data.Struct.AnimationPlayback"/> configurations that define how animations are played within the sequence.</value>
            <remarks>
            The playbacks in this collection are processed according to the sequential order. 
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSequence.SequenceActors">
            <summary>
            Gets or sets the collection of actors that will be dynamically created and managed during the animation sequence.
            </summary>
            <value>A list of <see cref="T:GameCore.ModelAnimation.Data.Struct.SequenceActorSpawn"/> configurations that define when and how actors are spawned during the sequence.</value>
            <remarks>
            Sequence actors provide a way to dynamically spawn temporary visual or gameplay elements that are
            synchronized with the animation timeline. These actors are automatically created at their specified
            <see cref="P:GameCore.ModelAnimation.Data.Struct.SequenceActorSpawn.SpawnOffset"/> and remain active for their specified <see cref="P:GameCore.ModelAnimation.Data.Struct.SequenceActorSpawn.Duration"/>.
            
            All sequence actors are automatically attached to the parent actor that is playing the sequence,
            ensuring proper spatial relationships and lifecycle management. This is ideal for effects like:
            - Particle systems that should appear during specific moments
            - Temporary visual elements like magic circles or weapon trails
            - Supporting actors that enhance the main animation sequence
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSequence.SequenceEvents">
            <summary>
            Gets or sets the collection of events that will be triggered at specific time offsets during the animation sequence.
            </summary>
            <value>A list of <see cref="T:GameCore.ModelAnimation.Data.Struct.SequenceEvent"/> configurations that define when and what events are triggered during the sequence.</value>
            <remarks>
            Sequence events provide integration points between the animation system and game logic, allowing
            the sequence to communicate with other systems at precise moments. Events are triggered based on
            their <see cref="P:GameCore.ModelAnimation.Data.Struct.SequenceEvent.Offset"/> relative to the sequence start time.
            
            Events can optionally pause the sequence execution using <see cref="P:GameCore.ModelAnimation.Data.Struct.SequenceEvent.PauseSequence"/>,
            which is useful for creating interactive moments or waiting for external conditions before continuing.
            </remarks>
        </member>
        <member name="T:GameCore.ModelAnimation.Data.GameDataAnimationSimple">
            <summary>
            Represents the configuration data for a simple animation that can be played on game actors.
            </summary>
            <remarks>
            GameDataAnimationSimple provides all the necessary configuration parameters for playing
            a single animation with specific timing, priority, and blending characteristics. This
            class serves as the data definition that is used to create <see cref="T:GameCore.ModelAnimation.Animation"/>
            instances at runtime.
            
            The configuration includes:
            - Animation resource file reference
            - Playback parameters (speed, looping, timing)
            - Priority and layer settings for animation conflict resolution
            - Blending parameters for smooth transitions
            - Body part targeting for partial animation support
            
            This class is typically used in game data files and can be referenced by actors
            or other systems that need to play animations with consistent parameters.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.File">
            <summary>
            Gets or sets the animation resource file that will be played.
            </summary>
            <value>The animation resource file reference.</value>
            <remarks>
            This property specifies the actual animation file that will be loaded and played
            when this animation configuration is used. The file should be a valid animation
            resource that has been imported into the game's resource system.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.LogicLayer">
            <summary>
            Gets or sets the logic layer that this animation will be played on.
            </summary>
            <value>The animation logic layer. Default is <see cref="F:EngineInterface.Enum.AnimationLogicLayer.Normal"/>.</value>
            <remarks>
            Logic layers provide a way to categorize animations and control their interactions.
            Animations on different logic layers can play simultaneously without interfering
            with each other, while animations on the same layer compete based on priority.
            
            Common layer usage:
            - Normal: Standard gameplay animations
            - Additive: Overlay animations that blend with other animations
            - Override: High-priority animations that override others
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.Priority">
            <summary>
            Gets or sets the priority of this animation.
            </summary>
            <value>The priority value, where higher numbers indicate higher priority. Default is 0.</value>
            <remarks>
            Animation priority determines which animation is visible when multiple animations
            are playing on the same actor and logic layer. Higher priority animations will
            suppress lower priority animations, causing them to be paused until the higher
            priority animation completes or is stopped.
            
            Priority values are typically organized as follows:
            - 0-50: Idle and ambient animations
            - 51-100: Movement animations
            - 101-200: Action animations
            - 201+: Critical or override animations
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.BodyPart">
            <summary>
            Gets or sets the body part that this animation affects.
            </summary>
            <value>The body part specification. Default is <see cref="F:EngineInterface.Enum.AnimationBodyPart.FullBody"/>.</value>
            <remarks>
            Body part specification allows for partial animation support where different
            parts of the character can be animated independently. This enables complex
            animation blending scenarios such as:
            - Upper body combat animations while lower body continues walking
            - Facial expressions independent of body movement
            - Separate arm animations for dual-wielding characters
            
            FullBody animations will affect the entire character model, while specific
            body part animations will only affect their designated portions.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.Speed">
            <summary>
            Gets or sets the playback speed multiplier for this animation.
            </summary>
            <value>The speed multiplier, where 1.0 is normal speed. Default is 1.0.</value>
            <remarks>
            This property controls the playback speed of the animation. Values less than 1.0
            slow down the animation, while values greater than 1.0 speed it up. The speed
            affects the entire animation timeline proportionally.
            
            Common speed values:
            - 0.5: Half speed (slow motion effect)
            - 1.0: Normal speed
            - 1.5: 50% faster
            - 2.0: Double speed
            
            Speed can be changed at runtime through the Animation instance after playback begins.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.BlendIn">
            <summary>
            Gets or sets the blend-in time for smooth transitions when this animation becomes active.
            </summary>
            <value>The blend-in duration. Default is 0.15 seconds.</value>
            <remarks>
            The blend-in time determines how smoothly this animation transitions in when it becomes
            the active animation. This occurs in several scenarios:
            - When this animation starts playing and needs to blend from a previous animation
            - When this animation resumes after being suppressed by a higher priority animation
            - When this animation's priority is dynamically changed, causing it to become active
            
            During the blend-in period, the animation system will smoothly interpolate between
            the previous animation state and this animation, creating a natural transition
            without abrupt changes.
            
            Setting this to zero will cause immediate switching with no transition period.
            Longer blend times create smoother transitions but may delay the visual impact
            of the new animation.
            </remarks>
            <example>
            A typical use case: If a character has a sleeping animation and a standing animation,
            but no specific transition animation between them, you can set a longer blend-in time
            (like 2 seconds) for the sleeping animation. This will cause the character to smoothly
            transition from standing to lying down over 2 seconds, effectively creating a
            low-cost transition animation.
            </example>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.StartOffset">
            <summary>
            Gets or sets the time offset from the beginning of the animation where playback should start.
            </summary>
            <value>The start offset duration. Default is zero (start from beginning).</value>
            <remarks>
            This property allows you to skip the initial portion of an animation and start
            playback from a specific point in the timeline. This is useful for:
            - Skipping slow wind-up portions of animations
            - Starting animations at their most impactful moments
            - Synchronizing animations with external events
            - Creating variations of the same animation with different starting points
            
            The offset is measured from the beginning of the animation, so an offset of
            1 second will skip the first second of the animation and begin playback from
            the 1-second mark.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.IsLooping">
            <summary>
            Gets or sets a value indicating whether this animation should loop continuously.
            </summary>
            <value>True if the animation should loop; otherwise, false. Default is false.</value>
            <remarks>
            When set to true, the animation will automatically restart from the beginning
            when it reaches the end, creating a continuous loop. This is commonly used for:
            - Idle animations that should repeat indefinitely
            - Environmental animations like flowing water or spinning objects
            - Background animations that provide continuous movement
            
            When set to false, the animation will play once and then stop, which is
            appropriate for:
            - One-time actions like attacks or spell casting
            - Transition animations between states
            - Cutscene animations with specific timing requirements
            
            The looping behavior can be changed at runtime through the Animation instance.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.GameDataAnimationSimple.CachePlayParam">
            <summary>
            Gets the cached animation play parameters constructed from this configuration.
            </summary>
            <value>The cached <see cref="T:EngineInterface.BaseType.AnimationPlayParam"/> instance.</value>
            <remarks>
            This property provides a cached version of the animation parameters that can be
            used directly with the animation system without needing to construct new parameter
            objects each time. The cache is lazily initialized and reused for performance.
            
            TODO: The cache should be invalidated and rebuilt when animation parameters change.
            Currently, changes to the configuration properties will not automatically update
            the cached parameters.
            </remarks>
        </member>
        <member name="T:GameCore.ModelAnimation.Data.Struct.SequenceActorSpawn">
            <summary>
            Represents a configuration for spawning and managing a temporary actor during an animation sequence,
            defining what actor to spawn, when to spawn it, and how long it should exist.
            </summary>
            <remarks>
            SequenceActorSpawn provides precise temporal control over actor lifecycle within animation sequences.
            This enables the creation of synchronized visual effects, temporary objects, and supporting elements
            that enhance the main animation with perfect timing coordination.
            
            The spawned actor will be automatically attached to the parent actor playing the sequence,
            ensuring proper spatial relationships and automatic cleanup when the sequence completes.
            
            Common use cases include:
            - Particle effects that appear during specific animation moments
            - Temporary visual elements like magic circles, auras, or weapon trails
            - Supporting actors that provide context or enhancement to the main animation
            - Environmental effects synchronized with character actions
            </remarks>
            <example>
            <code>
            var magicEffect = new SequenceActorSpawn
            {
                Actor = magicCircleData,           // What to spawn
                SpawnOffset = TimeSpan.FromSeconds(1.2),  // When to spawn (1.2s into sequence)
                Duration = TimeSpan.FromSeconds(2.5)      // How long to show (2.5 seconds total)
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.Struct.SequenceActorSpawn.Actor">
            <summary>
            Gets or sets the actor configuration that will be spawned during the animation sequence.
            </summary>
            <value>A game data link to the <see cref="T:GameCore.ActorSystem.Data.GameDataActor"/> that defines the actor to be spawned.</value>
            <remarks>
            This property references the actor definition that will be instantiated and attached to the
            parent actor playing the sequence. The spawned actor will inherit spatial positioning from
            the parent and will be automatically managed throughout its lifecycle.
            
            The actor can be any valid game actor including visual effects, temporary objects, UI elements,
            or complex nested actor hierarchies that enhance the animation sequence.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.Struct.SequenceActorSpawn.SpawnOffset">
            <summary>
            Gets or sets the time offset from the animation sequence start when this actor should be spawned.
            </summary>
            <value>The time span representing when the actor spawning should occur relative to the sequence beginning. Default is zero (spawn immediately).</value>
            <remarks>
            This offset allows precise synchronization of actor spawning with specific moments in the animation
            sequence. A value of zero means the actor spawns immediately when the sequence starts, while positive
            values delay the spawn until that time offset is reached.
            
            The timing is calculated from the sequence start time, not from any individual animation playback
            within the sequence, ensuring consistent timing regardless of animation complexity.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.Struct.SequenceActorSpawn.Duration">
            <summary>
            Gets or sets how long the spawned actor should remain active and visible in the sequence.
            </summary>
            <value>The time span representing the total lifetime of the spawned actor. Default is zero (instantaneous).</value>
            <remarks>
            This duration controls the total lifespan of the spawned actor from its spawn time. The actor
            will be automatically despawned (destroyed) when this duration expires, calculated from the
            <see cref="P:GameCore.ModelAnimation.Data.Struct.SequenceActorSpawn.SpawnOffset"/> time.
            
            For example, if SpawnOffset is 2 seconds and Duration is 3 seconds, the actor will:
            - Spawn at 2 seconds into the sequence
            - Remain active for 3 seconds 
            - Be automatically despawned at 5 seconds into the sequence
            
            A duration of zero creates an instantaneous effect that spawns and immediately despawns,
            which can be useful for one-time triggers or very brief visual effects.
            </remarks>
        </member>
        <member name="T:GameCore.ModelAnimation.Data.Struct.SequenceEvent">
            <summary>
            Represents a timed event that will be triggered at a specific moment during an animation sequence,
            providing integration points between the animation system and game logic.
            </summary>
            <remarks>
            SequenceEvent enables precise synchronization between visual animations and gameplay mechanics
            by allowing events to be triggered at exact time offsets within an animation sequence.
            This creates opportunities for perfect timing coordination between animations and game systems.
            
            Events can optionally pause the sequence execution, which is useful for creating interactive
            moments, waiting for external conditions, or ensuring critical timing dependencies are met
            before the sequence continues.
            
            Common use cases include:
            - Triggering sound effects at specific animation moments
            - Applying damage or healing at precise timing during ability animations
            - Signaling animation phase completions to other game systems
            - Creating synchronization points for multiplayer or networked scenarios
            - Triggering particle effects or environmental changes
            - Notifying UI systems of animation milestones
            </remarks>
            <example>
            <code>
            var damageEvent = new SequenceEvent
            {
                EventKey = SequenceEventKey.ApplyDamage,    // What event to trigger
                Offset = TimeSpan.FromSeconds(1.8),         // When to trigger (1.8s into sequence)
                PauseSequence = false                       // Don't pause sequence execution
            };
            
            var interactiveEvent = new SequenceEvent
            {
                EventKey = SequenceEventKey.WaitForPlayerInput,
                Offset = TimeSpan.FromSeconds(2.5),
                PauseSequence = true                        // Pause until external condition met
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.Struct.SequenceEvent.EventKey">
            <summary>
            Gets or sets the event key that identifies which event will be triggered when this sequence event activates.
            </summary>
            <value>A <see cref="T:GameCore.ModelAnimation.Enum.SequenceEventKey"/> that specifies which event should be triggered by the animation system.</value>
            <remarks>
            This event key serves as the strongly-typed identifier that game systems will use to respond to the triggered event.
            Using an enum-based key system provides better type safety, IntelliSense support, and prevents typos
            compared to string-based event names.
            
            Event keys are used by event aggregators, message systems, or direct event handlers
            to determine what action should be taken when the event is triggered at the specified timing.
            The enum-based approach ensures compile-time validation of event types.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.Struct.SequenceEvent.Offset">
            <summary>
            Gets or sets the time offset from the animation sequence start when this event should be triggered.
            </summary>
            <value>The time span representing when the event should be triggered relative to the sequence beginning. Default is zero (trigger immediately).</value>
            <remarks>
            This offset provides precise timing control for event triggering within the animation sequence.
            A value of zero means the event triggers immediately when the sequence starts, while positive
            values delay the event trigger until that time offset is reached.
            
            The timing is calculated from the sequence start time, ensuring consistent event timing
            regardless of the complexity or number of animation playbacks within the sequence.
            This allows for reliable synchronization between visual animations and gameplay events.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Data.Struct.SequenceEvent.PauseSequence">
            <summary>
            Gets or sets a value indicating whether the animation sequence should pause execution when this event is triggered.
            </summary>
            <value><c>true</c> if the sequence should pause when this event triggers; otherwise, <c>false</c>. Default is <c>false</c>.</value>
            <remarks>
            When set to <c>true</c>, this property causes the entire animation sequence to pause execution
            when the event is triggered, allowing for interactive moments or external condition dependencies.
            The sequence will remain paused until explicitly resumed by external game logic.
            
            This feature is particularly useful for:
            - Creating interactive cutscenes that wait for player input
            - Synchronizing with external systems that may have variable timing
            - Implementing conditional animation flows based on game state
            - Ensuring critical events are properly processed before animation continues
            
            When <c>false</c> (default), the event is triggered and the sequence continues normal execution
            without interruption, suitable for fire-and-forget events like sound effects or damage application.
            </remarks>
        </member>
        <member name="T:GameCore.ModelAnimation.Enum.BracketStage">
            <summary>
            Specifies the stages of a bracket animation lifecycle.
            </summary>
            <remarks>
            BracketStage represents the different phases that a bracket animation goes through
            during its lifecycle. Each stage corresponds to a specific animation that is played
            during that phase of the bracket's execution.
            </remarks>
        </member>
        <member name="F:GameCore.ModelAnimation.Enum.BracketStage.Stopped">
            <summary>
            Represents a state where the operation has been stopped.
            </summary>
            <remarks>This value is typically used to indicate that the animation is no longer running on the actor, basically destroyed.</remarks>
        </member>
        <member name="F:GameCore.ModelAnimation.Enum.BracketStage.None">
            <summary>
            No specific stage is active or the bracket is not running.
            </summary>
        </member>
        <member name="F:GameCore.ModelAnimation.Enum.BracketStage.Birth">
            <summary>
            The birth stage, where the initial spawn/appear animation is played.
            </summary>
            <remarks>
            This stage is typically used for spawn effects, appearance animations,
            or any initial visual effect that introduces the object to the scene.
            The birth animation is played once when the bracket starts (unless skipped).
            </remarks>
        </member>
        <member name="F:GameCore.ModelAnimation.Enum.BracketStage.Stand">
            <summary>
            The stand stage, where the main/idle animation is played.
            </summary>
            <remarks>
            This stage represents the active phase of the bracket animation.
            Depending on the configuration, the stand animation may loop indefinitely
            or play once before proceeding to the death stage. This is typically
            used for idle animations, sustained effects, or looping behaviors.
            </remarks>
        </member>
        <member name="F:GameCore.ModelAnimation.Enum.BracketStage.Death">
            <summary>
            The death stage, where the final despawn/disappear animation is played.
            </summary>
            <remarks>
            This stage is used for destruction effects, disappearance animations,
            or any final visual effect before the bracket completes. The death
            animation is played once when the bracket is stopped or completes its cycle.
            After the death animation, the bracket may destroy the associated actor
            if configured to do so.
            </remarks>
        </member>
        <member name="T:GameCore.ModelAnimation.IAnimationSwingController">
            <summary>
            Controller for animations that have the abstract concept of preswing, swing, and backswing stages.
            Typically used for ability casting and melee attacks.
            </summary>
        </member>
        <member name="M:GameCore.ModelAnimation.IAnimationSwingController.Stop(System.Nullable{System.TimeSpan})">
            <summary>
            Stops the current animation.
            </summary>
        </member>
        <member name="M:GameCore.ModelAnimation.IAnimationSwingController.Pause(System.Boolean)">
            <summary>
            Pauses or resumes the animation.
            </summary>
            <param name="on">True to pause, false to resume.</param>
        </member>
        <member name="M:GameCore.ModelAnimation.IAnimationSwingController.Swing">
            <summary>
            Switches the animation to the swing stage from the preswing stage.
            </summary>
        </member>
        <member name="M:GameCore.ModelAnimation.IAnimationSwingController.Backswing">
            <summary>
            Switches the animation to the backswing stage from the swing stage.
            </summary>
        </member>
        <member name="T:GameCore.ModelAnimation.Struct.SequenceEventArgs">
            <summary>
            Provides data for animation sequence events, containing information about the event context,
            timing, and the sequence state when the event was triggered.
            </summary>
            <remarks>
            SequenceEventArgs is passed to event handlers when animation sequence events are triggered,
            providing comprehensive context about the event occurrence. This includes the sequence that
            triggered the event, the specific event type, timing information, and the current playback state.
            
            This information enables event handlers to:
            - Identify which sequence triggered the event
            - Determine the specific type of event that occurred
            - Access timing information for synchronization purposes
            - Know which playback within the sequence was active when the event fired
            - Make decisions based on the current sequence state
            
            The class is immutable by design to ensure event data integrity and prevent accidental
            modifications during event handling.
            </remarks>
            <param name="sequence">The animation sequence that triggered the event.</param>
            <param name="eventKey">The specific event key that was triggered.</param>
            <param name="elapsed">The time elapsed since the sequence started when the event was triggered.</param>
            <param name="playbackIndex">The index of the playback that was active when the event was triggered.</param>
        </member>
        <member name="M:GameCore.ModelAnimation.Struct.SequenceEventArgs.#ctor(GameCore.ModelAnimation.AnimationSequence,GameCore.ModelAnimation.Enum.SequenceEventKey,System.TimeSpan,System.Int32,GameCore.ModelAnimation.Animation)">
            <summary>
            Provides data for animation sequence events, containing information about the event context,
            timing, and the sequence state when the event was triggered.
            </summary>
            <remarks>
            SequenceEventArgs is passed to event handlers when animation sequence events are triggered,
            providing comprehensive context about the event occurrence. This includes the sequence that
            triggered the event, the specific event type, timing information, and the current playback state.
            
            This information enables event handlers to:
            - Identify which sequence triggered the event
            - Determine the specific type of event that occurred
            - Access timing information for synchronization purposes
            - Know which playback within the sequence was active when the event fired
            - Make decisions based on the current sequence state
            
            The class is immutable by design to ensure event data integrity and prevent accidental
            modifications during event handling.
            </remarks>
            <param name="sequence">The animation sequence that triggered the event.</param>
            <param name="eventKey">The specific event key that was triggered.</param>
            <param name="elapsed">The time elapsed since the sequence started when the event was triggered.</param>
            <param name="playbackIndex">The index of the playback that was active when the event was triggered.</param>
        </member>
        <member name="P:GameCore.ModelAnimation.Struct.SequenceEventArgs.Sequence">
            <summary>
            Gets the animation sequence that triggered this event.
            </summary>
            <value>The <see cref="T:GameCore.ModelAnimation.AnimationSequence"/> instance that was playing when the event occurred.</value>
            <remarks>
            This property provides access to the sequence that generated the event, allowing event handlers
            to access sequence-specific data, configuration, or state information. The sequence reference
            can be used to query additional information about the animation or to control sequence playback
            in response to the event.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Struct.SequenceEventArgs.EventKey">
            <summary>
            Gets the event key that identifies the type of event that was triggered.
            </summary>
            <value>A <see cref="T:GameCore.ModelAnimation.Enum.SequenceEventKey"/> value that specifies which event was triggered.</value>
            <remarks>
            This strongly-typed event key allows event handlers to determine exactly which type of event
            occurred and respond accordingly. The enum-based approach provides compile-time type safety
            and prevents errors that could occur with string-based event identification.
            
            Event handlers typically use this key in switch statements or conditional logic to execute
            the appropriate response for different event types.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Struct.SequenceEventArgs.Elapsed">
            <summary>
            Gets the time elapsed since the sequence started when this event was triggered.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the total time from sequence start to event trigger.</value>
            <remarks>
            This timing information is crucial for synchronization and can be used by event handlers to:
            - Coordinate with other time-based systems
            - Calculate relative timing for effects or actions
            - Determine the exact moment in the sequence timeline when the event occurred
            - Implement time-sensitive logic based on sequence progression
            
            The elapsed time is measured from the sequence start time, providing a consistent reference
            point regardless of sequence complexity or playback modifications.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Struct.SequenceEventArgs.PlaybackIndex">
            <summary>
            Gets the index of the playback that was active when this event was triggered.
            </summary>
            <value>The zero-based index of the playback in the sequence's playback list.</value>
            <remarks>
            This index corresponds to the position of the active playback in the sequence's
            <see cref="P:GameCore.ModelAnimation.Data.GameDataAnimationSequence.Playbacks"/> collection.
            
            The playback index is useful for:
            - Identifying which specific animation was playing when the event occurred
            - Applying playback-specific logic or effects
            - Coordinating events with particular animation phases
            - Debugging and logging sequence behavior
            
            Note that multiple playbacks may be active simultaneously in complex sequences,
            but this index represents the primary or triggering playback for this specific event.
            </remarks>
        </member>
        <member name="P:GameCore.ModelAnimation.Struct.SequenceEventArgs.Animation">
            <summary>
            Gets the playback animation instance that was active when this event was triggered.
            </summary>
            <value>The <see cref="P:GameCore.ModelAnimation.Struct.SequenceEventArgs.Animation"/> instance that was playing when the event occurred.</value>
            <remarks>
            This property provides access to the animation that was active when the event occurred, allowing event handlers to access animation-specific data or state information.
            </remarks>
        </member>
        <member name="T:GameCore.ResourceType.Data.Enum.ShadowType">
            <summary>
            定义阴影渲染的类型，控制游戏对象的阴影生成方式
            </summary>
            <remarks>
            阴影类型决定了游戏对象如何产生和显示阴影效果。不同的阴影类型在性能和视觉质量之间提供了不同的平衡，
            允许开发者根据游戏需求和设备性能选择合适的阴影实现方式。
            </remarks>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.ShadowType.FakeShadow">
            <summary>
            假阴影 - 使用预制的平面阴影贴图，性能开销最小
            </summary>
            <remarks>
            使用简单的平面投影或预制阴影贴图来模拟阴影效果。
            这种方式性能开销很小，但视觉效果相对简单，适用于低端设备或大量对象的场景。
            </remarks>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.ShadowType.DeviceDependentShadow">
            <summary>
            设备依赖阴影 - 根据设备性能自动选择阴影实现方式
            </summary>
            <remarks>
            根据设备的渲染能力自动选择阴影类型。如果设备支持动态阴影，将使用动态阴影；
            否则降级为平面阴影。这种方式提供了最佳的性能与质量平衡，适应不同设备的能力。
            </remarks>
        </member>
        <member name="T:GameCore.ResourceType.Data.Enum.SliceMode">
            <summary>
            Defines the mode for specifying animation slice duration.
            </summary>
            <remarks>
            SliceMode determines how the animation slice end point is calculated:
            - Duration: Uses start offset and duration length for precise time-based slicing
            - EndOffset: Uses start offset and absolute end offset for position-based slicing
            - EndOffsetFromEnd: Uses start offset and offset from animation end for relative slicing
            This provides flexibility in animation content selection and timing control.
            </remarks>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SliceMode.Duration">
            <summary>
            Specify start offset and duration length.
            </summary>
            <remarks>
            Uses StartOffset and SliceDuration to define the animation slice.
            The slice runs from StartOffset for the specified SliceDuration.
            This is the most straightforward way to specify a time-based slice.
            </remarks>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SliceMode.EndOffset">
            <summary>
            Specify start offset and end offset.
            </summary>
            <remarks>
            Uses StartOffset and EndOffset to define the animation slice.
            The slice runs from StartOffset to EndOffset within the original animation.
            This allows for absolute positioning within the animation timeline.
            </remarks>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SliceMode.EndOffsetFromEnd">
            <summary>
            Specify start offset and end offset from the end of the original animation.
            </summary>
            <remarks>
            Uses StartOffset and EndOffsetFromEnd to define the animation slice.
            The slice runs from StartOffset to (animation_end - EndOffsetFromEnd).
            This is useful when you want to exclude a specific amount of time from the animation end.
            </remarks>
        </member>
        <member name="T:GameCore.ResourceType.Data.Enum.SoundCategory">
            <summary>
            Defines categories for organizing and managing different types of sounds in the game.
            </summary>
            <remarks>
            This enum is used to classify sounds for purposes such as volume control, mixing,
            and resource management. Each category represents a different type of audio content.
            </remarks>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.UI">
            <summary>
            User interface sounds such as button clicks, menu navigation, and notifications.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Ambient">
            <summary>
            Background environmental sounds that create atmosphere.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Music">
            <summary>
            Background music and musical compositions.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Cutscene">
            <summary>
            Audio for cinematic sequences and story scenes.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Dialogue">
            <summary>
            Character speech and conversation audio.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Alert">
            <summary>
            Warning sounds and alert notifications.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Movement">
            <summary>
            Sounds related to character and object movement.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Foley">
            <summary>
            Sound effects for everyday actions and interactions.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Doodad">
            <summary>
            Environmental object and decoration sounds.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Combat">
            <summary>
            Battle, fighting, and combat-related audio effects.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Message">
            <summary>
            System messages and communication sounds.
            </summary>
        </member>
        <member name="F:GameCore.ResourceType.Data.Enum.SoundCategory.Voice">
            <summary>
            Character voice acting and vocal expressions.
            </summary>
        </member>
        <member name="P:GameCore.ResourceType.Data.GameDataModel.AssetLayerScale">
            <summary>
            Represents the scale of the asset layer, acting as an independent scaling factor separate from the script scale.
            This ensures that assets imported from different tools are scaled consistently, so the users don't need to adjust script scales manually based on the tool used in writing the gameplay script.
            </summary>
        </member>
        <member name="P:GameCore.ResourceType.Data.GameDataModel.ApplyAssetLayerScaleToChildren">
            <summary>
            Determines whether the asset layer scale should be applied to child elements, affecting the scaling behavior of nested components. By default, this should be set to false to adhere to the original design principle of the Asset Layer Scale, which is intended to apply only to the asset itself.
            </summary>
        </member>
        <member name="P:GameCore.ResourceType.Data.GameDataModel.ForceOffScreenUpdate">
            <summary>
            Indicates whether to force an update when the object is off-screen. Useful for ensuring updates occur even when
            not visible. Or when the object is expected to animate into view from an off-screen position.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GameCore.ResourceType.Data.GameDataModel.Radius" -->
        <member name="P:GameCore.ResourceType.Data.GameDataModel.SimpleBoundingCylinder">
            <summary>
            Represents an optional simple bounding cylinder for simple ray-casting.
            </summary>
        </member>
        <member name="P:GameCore.ResourceType.Data.GameDataParticle.AssetLayerScale">
            <summary>
            Represents the scale of the asset layer, acting as an independent scaling factor separate from the script scale.
            This ensures that assets imported from different tools are scaled consistently, so the users don't need to adjust script scales manually based on the tool used in writing the gameplay script.
            </summary>
        </member>
        <member name="P:GameCore.ResourceType.Data.GameDataParticle.ApplyAssetLayerScaleToChildren">
            <summary>
            Determines whether the asset layer scale should be applied to child elements, affecting the scaling behavior of nested components. By default, this should be set to false to adhere to the original design principle of the Asset Layer Scale, which is intended to apply only to the asset itself.
            </summary>
        </member>
        <member name="P:GameCore.ResourceType.Data.GameDataSound.FadeTime">
            <summary>
            Normal sound usually has a fade time of 0.5 seconds, while music has a fade time of 2 seconds.
            </summary>
        </member>
        <member name="P:GameCore.ResourceType.Data.GameDataSound.Category">
            <summary>
            Represents the category of sound, which can be used to group or classify sounds for various purposes, such as muting or adjusting volume levels based on the category.
            </summary>
        </member>
        <member name="T:GameCore.ResourceType.Data.Struct.AnimationMapping">
            <summary>
            Represents a mapping relationship between a logical animation alias and an actual animation resource,
            enabling the use of meaningful names instead of direct file paths in animation systems.
            </summary>
            <remarks>
            AnimationMapping provides an abstraction layer for animation resources by allowing developers to:
            - Use logical names (aliases) like "walk", "attack", "idle" instead of file paths
            - Easily swap animation files without changing code that references the animations
            - Organize animations with consistent naming across different models and contexts
            - Support multiple aliases pointing to the same animation resource for reusability
            
            This mapping system is particularly useful in game development where animation files may be
            reorganized, renamed, or replaced during development, and where different models may use
            different animation files for the same logical action.
            </remarks>
            <example>
            <code>
            var walkMapping = new AnimationMapping
            {
                AnimationAlias = "walk",
                AnimationRaw = "character_walk_cycle_v2.fbx"
            };
            
            // Later in code, reference by alias instead of file path
            // PlayAnimation("walk") instead of PlayAnimation("character_walk_cycle_v2.fbx")
            </code>
            </example>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationMapping.AnimationAlias">
            <summary>
            Gets or sets the logical alias name used to reference this animation in code.
            </summary>
            <value>A meaningful name that represents the animation's purpose or action, such as "walk", "attack", or "idle".</value>
            <remarks>
            This alias serves as the public interface for the animation, allowing developers to use
            descriptive names instead of file paths. The alias should be consistent across different
            models that perform the same logical action, enabling code reuse and maintainability.
            
            Common naming conventions include:
            - Action-based: "walk", "run", "attack", "defend"
            - State-based: "idle", "casting", "stunned", "dead"
            - Context-specific: "intro", "victory", "defeat"
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationMapping.AnimationRaw">
            <summary>
            Gets or sets the actual animation resource that will be played when the alias is referenced.
            </summary>
            <value>The animation file or resource path that contains the actual animation data.</value>
            <remarks>
            This property points to the concrete animation resource (typically a file) that will be
            loaded and played when the corresponding alias is requested. The raw animation can be:
            - A file path to an animation file (e.g., "animations/character_walk.fbx")
            - A reference to an animation resource in the game's asset system
            - Any valid Animation resource identifier
            
            Multiple mappings can reference the same AnimationRaw, allowing for animation reuse
            across different aliases or contexts.
            </remarks>
        </member>
        <member name="T:GameCore.ResourceType.Data.Struct.AnimationPlayback">
            <summary>
            Represents a comprehensive animation playback configuration that controls how an animation is played back,
            including timing, scaling, looping, and blending behavior.
            </summary>
            <remarks>
            AnimationPlayback provides fine-grained control over animation playback by allowing you to:
            - Reference a source animation and apply time scaling
            - Define slice configuration using different modes (duration, end offset, or end offset from end)
            - Control looping behavior when playback duration exceeds content duration
            - Configure smooth blending transitions for seamless animation transitions
            This class is particularly useful for creating complex animation sequences, dynamic timing adjustments,
            and smooth animation blending in game scenarios.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.AnimationRaw">
            <summary>
            Gets or sets the source animation to be played back.
            </summary>
            <value>The animation resource that will be used as the source for playback.</value>
            <remarks>
            This property references the raw animation data that will be modified according to the
            other playback configuration properties in this class.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.Scale">
            <summary>
            Gets or sets the time scale multiplier applied to the original animation speed.
            </summary>
            <value>The speed multiplier where 1.0 is normal speed, values greater than 1.0 speed up playback, 
            and values less than 1.0 slow down playback. Default is 1.0.</value>
            <remarks>
            This scale factor affects the overall playback speed of the animation. For example:
            - 0.5 will play the animation at half speed
            - 2.0 will play the animation at double speed
            The scale is applied to the original animation timing before other duration calculations.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.Mode">
            <summary>
            Gets or sets the mode for specifying the animation slice.
            </summary>
            <value>The slice mode that determines how the slice end point is specified. Default is Duration.</value>
            <remarks>
            This mode determines which properties are used to define the animation slice:
            - Duration: Uses StartOffset and SliceDuration
            - EndOffset: Uses StartOffset and EndOffset
            - EndOffsetFromEnd: Uses StartOffset and EndOffsetFromEnd
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.StartOffset">
            <summary>
            Gets or sets the start offset for the animation playback, based on the original animation speed.
            </summary>
            <value>The time offset from the beginning of the source animation where playback should start.</value>
            <remarks>
            This offset allows you to start playback from any point within the source animation,
            effectively skipping the initial portion. The offset is calculated based on the original
            animation timing before any scaling is applied.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.SliceDuration">
            <summary>
            Gets or sets the duration of the animation content to be played, based on the original animation speed.
            Used when Mode is set to Duration.
            </summary>
            <value>The length of time from the source animation that should be included in this playback configuration.</value>
            <remarks>
            This duration defines how much of the source animation (starting from the StartOffset) will be
            considered for playback. It represents the "slice" of animation content before any scaling
            or playback duration modifications are applied.
            Only used when Mode is SliceMode.Duration.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.EndOffset">
            <summary>
            Gets or sets the end offset for the animation slice, based on the original animation speed.
            Used when Mode is set to EndOffset.
            </summary>
            <value>The time offset from the beginning of the source animation where the slice should end.</value>
            <remarks>
            This end offset defines the absolute end point of the animation slice within the source animation.
            The effective slice duration will be (EndOffset - StartOffset).
            Only used when Mode is SliceMode.EndOffset.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.EndOffsetFromEnd">
            <summary>
            Gets or sets the end offset from the end of the original animation, based on the original animation speed.
            Used when Mode is set to EndOffsetFromEnd.
            </summary>
            <value>The time offset from the end of the source animation where the slice should end.</value>
            <remarks>
            This end offset defines how much time before the end of the original animation the slice should stop.
            For example, if the original animation is 10 seconds and EndOffsetFromEnd is 2 seconds,
            the slice will end at 8 seconds from the start.
            Only used when Mode is SliceMode.EndOffsetFromEnd.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.IsLooping">
            <summary>
            Gets or sets a value indicating whether the animation should loop when the playback duration
            exceeds the slice duration.
            </summary>
            <value><c>true</c> if the animation should loop; otherwise, <c>false</c>. Default is <c>false</c>.</value>
            <remarks>
            When the PlaybackDuration is longer than the effective slice duration, this property controls the behavior:
            - If <c>true</c>, the animation will loop continuously until the PlaybackDuration is reached
            - If <c>false</c>, the animation will pause at the last frame until the PlaybackDuration is reached
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.PlaybackDuration">
            <summary>
            Gets or sets the actual playback duration of the animation at the scaled animation speed.
            </summary>
            <value>The total time that the animation playback should last, accounting for scaling and timing adjustments.</value>
            <remarks>
            This duration controls the total time the animation will play, independent of the source content duration.
            The behavior depends on the relationship between PlaybackDuration and the effective slice duration:
            - If PlaybackDuration is less than slice duration: animation stops early
            - If PlaybackDuration is greater than slice duration: animation loops (if IsLooping is true) or pauses at the last frame
            - If PlaybackDuration equals slice duration: animation plays exactly once through the slice content
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.BlendIn">
            <summary>
            Gets or sets the blend-in duration for smooth transitions when starting this animation.
            </summary>
            <value>The time span over which the animation will blend in from the previous animation state. Default is 0.15 seconds.</value>
            <remarks>
            This property controls how smoothly the animation transitions in when it starts playing.
            A longer blend-in duration creates a more gradual transition, while a shorter duration
            creates a more abrupt change. This is particularly useful for character animations
            where sudden transitions can look unnatural.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.AnimationPlayback.BlendOut">
            <summary>
            Gets or sets the blend-out duration for smooth transitions when ending this animation.
            </summary>
            <value>The time span over which the animation will blend out to the next animation state. Default is 0.15 seconds.</value>
            <remarks>
            This property controls how smoothly the animation transitions out when it finishes playing.
            A longer blend-out duration creates a more gradual transition to the next animation,
            while a shorter duration creates a more abrupt change. This helps create seamless
            animation sequences and prevents jarring transitions between different animations.
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.StatusBarPosition.RootZOffset">
            <summary>
            The StatusBar's position relative to the root bone.
            </summary>
        </member>
        <member name="P:GameCore.ResourceType.Data.Struct.StatusBarPosition.ScreenOffset">
            <summary>
            This is device-dependent, a offset in screen space.
            </summary>
        </member>
        <member name="T:GameCore.ResourceType.Icon">
            <summary>
            表示游戏中的图标资源，包装图标文件路径并提供类型转换功能
            </summary>
            <param name="path">图标文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的图标资源，通常用于 UI 元素、物品图标、技能图标等。
            支持与字符串类型的隐式转换，便于在不同的上下文中使用图标路径。
            图标通常是小尺寸的图像文件，用于在用户界面中提供视觉标识。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Icon.#ctor(EngineCommon.UTF8String)">
            <summary>
            表示游戏中的图标资源，包装图标文件路径并提供类型转换功能
            </summary>
            <param name="path">图标文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的图标资源，通常用于 UI 元素、物品图标、技能图标等。
            支持与字符串类型的隐式转换，便于在不同的上下文中使用图标路径。
            图标通常是小尺寸的图像文件，用于在用户界面中提供视觉标识。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Icon.Path">
            <summary>
            获取或设置图标文件的路径
            </summary>
            <remarks>
            使用 UTF8String 类型存储路径，提供更好的性能和内存效率。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Icon.FileName">
            <summary>
            获取或设置图标文件的名称
            </summary>
            <remarks>
            实现 <see cref="T:GameCore.ResourceType.IFile"/> 接口，返回文件路径作为文件名。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Icon.op_Implicit(EngineCommon.UTF8String)~GameCore.ResourceType.Icon">
            <summary>
            提供从 UTF8String 到 Icon 的隐式转换
            </summary>
            <param name="path">UTF8 格式的图标路径</param>
            <returns>新的 Icon 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Icon.op_Implicit(System.String)~GameCore.ResourceType.Icon">
            <summary>
            提供从字符串到 Icon 的隐式转换
            </summary>
            <param name="path">图标文件路径</param>
            <returns>新的 Icon 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Icon.op_Implicit(System.ReadOnlySpan{System.Byte})~GameCore.ResourceType.Icon">
            <summary>
            提供从字符串到 Icon 的隐式转换
            </summary>
            <param name="path">图标文件路径</param>
            <returns>新的 Icon 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Icon.op_Implicit(GameCore.ResourceType.Icon)~EngineCommon.UTF8String">
            <summary>
            提供从 Icon 到 UTF8String 的隐式转换
            </summary>
            <param name="icon">Icon 实例</param>
            <returns>图标的路径</returns>
        </member>
        <member name="T:GameCore.ResourceType.Material">
            <summary>
            表示游戏中的材质资源，包装材质文件路径并提供类型转换功能
            </summary>
            <param name="path">材质文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的材质资源，支持与字符串类型的隐式转换，
            便于在不同的上下文中使用材质路径。材质通常用于定义 3D 模型的外观和渲染属性。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Material.#ctor(EngineCommon.UTF8String)">
            <summary>
            表示游戏中的材质资源，包装材质文件路径并提供类型转换功能
            </summary>
            <param name="path">材质文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的材质资源，支持与字符串类型的隐式转换，
            便于在不同的上下文中使用材质路径。材质通常用于定义 3D 模型的外观和渲染属性。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Material.Path">
            <summary>
            获取或设置材质文件的路径
            </summary>
            <remarks>
            使用 UTF8String 类型存储路径，提供更好的性能和内存效率。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Material.FileName">
            <summary>
            获取或设置材质文件的名称
            </summary>
            <remarks>
            实现 <see cref="T:GameCore.ResourceType.IFile"/> 接口，返回文件路径作为文件名。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Material.op_Implicit(EngineCommon.UTF8String)~GameCore.ResourceType.Material">
            <summary>
            提供从 UTF8String 到 Material 的隐式转换
            </summary>
            <param name="path">UTF8 格式的材质路径</param>
            <returns>新的 Material 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Material.op_Implicit(System.ReadOnlySpan{System.Byte})~GameCore.ResourceType.Material">
            <summary>
            提供从字节跨度到 Material 的隐式转换
            </summary>
            <param name="path">表示路径的只读字节跨度</param>
            <returns>新的 Material 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Material.op_Implicit(System.String)~GameCore.ResourceType.Material">
            <summary>
            提供从字符串到 Material 的隐式转换
            </summary>
            <param name="path">材质文件路径</param>
            <returns>新的 Material 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Material.op_Implicit(GameCore.ResourceType.Material)~EngineCommon.UTF8String">
            <summary>
            提供从 Material 到 UTF8String 的隐式转换
            </summary>
            <param name="Material">Material 实例</param>
            <returns>材质的路径</returns>
        </member>
        <member name="T:GameCore.ResourceType.Model">
            <summary>
            表示游戏中的 3D 模型资源，包装模型文件路径并提供类型转换功能
            </summary>
            <param name="path">模型文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的 3D 模型资源，支持从多种字符串类型的隐式转换。
            模型资源通常包含几何体、材质引用和动画数据，用于在游戏世界中渲染 3D 对象。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Model.#ctor(EngineCommon.UTF8String)">
            <summary>
            表示游戏中的 3D 模型资源，包装模型文件路径并提供类型转换功能
            </summary>
            <param name="path">模型文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的 3D 模型资源，支持从多种字符串类型的隐式转换。
            模型资源通常包含几何体、材质引用和动画数据，用于在游戏世界中渲染 3D 对象。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Model.Path">
            <summary>
            获取或设置模型文件的路径
            </summary>
            <remarks>
            使用 UTF8String 类型存储路径，提供更好的性能和内存效率。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Model.FileName">
            <summary>
            获取或设置模型文件的名称
            </summary>
            <remarks>
            实现 <see cref="T:GameCore.ResourceType.IFile"/> 接口，返回文件路径作为文件名。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Model.op_Implicit(EngineCommon.UTF8String)~GameCore.ResourceType.Model">
            <summary>
            提供从 UTF8String 到 Model 的隐式转换
            </summary>
            <param name="path">UTF8 格式的模型路径</param>
            <returns>新的 Model 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Model.op_Implicit(System.ReadOnlySpan{System.Byte})~GameCore.ResourceType.Model">
            <summary>
            提供从字节跨度到 Model 的隐式转换
            </summary>
            <param name="path">表示路径的只读字节跨度</param>
            <returns>新的 Model 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Model.op_Implicit(System.String)~GameCore.ResourceType.Model">
            <summary>
            提供从字符串到 Model 的隐式转换
            </summary>
            <param name="path">模型文件路径</param>
            <returns>新的 Model 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Model.op_Implicit(GameCore.ResourceType.Model)~EngineCommon.UTF8String">
            <summary>
            提供从 Model 到 UTF8String 的隐式转换
            </summary>
            <param name="Model">Model 实例</param>
            <returns>模型的路径</returns>
        </member>
        <member name="T:GameCore.ResourceType.Sound">
            <summary>
            表示游戏中的音频资源，包装音频文件路径并提供类型转换功能
            </summary>
            <param name="path">音频文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的音频资源，包括音效、背景音乐和语音等。
            支持与字符串类型的隐式转换，便于在不同的上下文中使用音频路径。
            音频资源通常用于游戏的声音效果系统。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Sound.#ctor(EngineCommon.UTF8String)">
            <summary>
            表示游戏中的音频资源，包装音频文件路径并提供类型转换功能
            </summary>
            <param name="path">音频文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的音频资源，包括音效、背景音乐和语音等。
            支持与字符串类型的隐式转换，便于在不同的上下文中使用音频路径。
            音频资源通常用于游戏的声音效果系统。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Sound.Path">
            <summary>
            获取或设置音频文件的路径
            </summary>
            <remarks>
            使用 UTF8String 类型存储路径，提供更好的性能和内存效率。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Sound.FileName">
            <summary>
            获取或设置音频文件的名称
            </summary>
            <remarks>
            实现 <see cref="T:GameCore.ResourceType.IFile"/> 接口，返回文件路径作为文件名。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Sound.op_Implicit(EngineCommon.UTF8String)~GameCore.ResourceType.Sound">
            <summary>
            提供从 UTF8String 到 Sound 的隐式转换
            </summary>
            <param name="path">UTF8 格式的音频路径</param>
            <returns>新的 Sound 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Sound.op_Implicit(GameCore.ResourceType.Sound)~EngineCommon.UTF8String">
            <summary>
            提供从 Sound 到 UTF8String 的隐式转换
            </summary>
            <param name="sound">Sound 实例</param>
            <returns>音频的路径</returns>
        </member>
        <member name="T:GameCore.ResourceType.Texture">
            <summary>
            表示游戏中的纹理资源，包装纹理文件路径并提供类型转换功能
            </summary>
            <param name="path">纹理文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的纹理资源，包括贴图、精灵图、UI 图片等。
            支持与字符串类型的隐式转换，便于在不同的上下文中使用纹理路径。
            纹理资源是游戏渲染系统的重要组成部分，用于为 3D 模型和 2D 精灵提供视觉外观。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Texture.#ctor(EngineCommon.UTF8String)">
            <summary>
            表示游戏中的纹理资源，包装纹理文件路径并提供类型转换功能
            </summary>
            <param name="path">纹理文件的路径</param>
            <remarks>
            此结构体用于表示和管理游戏中的纹理资源，包括贴图、精灵图、UI 图片等。
            支持与字符串类型的隐式转换，便于在不同的上下文中使用纹理路径。
            纹理资源是游戏渲染系统的重要组成部分，用于为 3D 模型和 2D 精灵提供视觉外观。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Texture.Path">
            <summary>
            获取或设置纹理文件的路径
            </summary>
            <remarks>
            使用 UTF8String 类型存储路径，提供更好的性能和内存效率。
            </remarks>
        </member>
        <member name="P:GameCore.ResourceType.Texture.FileName">
            <summary>
            获取或设置纹理文件的名称
            </summary>
            <remarks>
            实现 <see cref="T:GameCore.ResourceType.IFile"/> 接口，返回文件路径作为文件名。
            </remarks>
        </member>
        <member name="M:GameCore.ResourceType.Texture.op_Implicit(EngineCommon.UTF8String)~GameCore.ResourceType.Texture">
            <summary>
            提供从 UTF8String 到 Texture 的隐式转换
            </summary>
            <param name="path">UTF8 格式的纹理路径</param>
            <returns>新的 Texture 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Texture.op_Implicit(System.String)~GameCore.ResourceType.Texture">
            <summary>
            提供从字符串到 Texture 的隐式转换
            </summary>
            <param name="path">纹理文件路径</param>
            <returns>新的 Texture 实例</returns>
        </member>
        <member name="M:GameCore.ResourceType.Texture.op_Implicit(GameCore.ResourceType.Texture)~EngineCommon.UTF8String">
            <summary>
            提供从 Texture 到 UTF8String 的隐式转换
            </summary>
            <param name="texture">Texture 实例</param>
            <returns>纹理的路径</returns>
        </member>
        <member name="P:GameCore.OrderSystem.Command.IsRequest">
            <summary>
            Request commands must have a player, and the player must be able to control the entity.
            The player also must be able to see the target if the target is an entity.
            The ability cannot be a hidden ability.
            </summary>
        </member>
        <member name="P:GameCore.OrderSystem.Command.IsAcquired">
            <summary>
            Acquired commands are auto-acquired commands like auto-casting and recasting.
            When orders queued after an acquired command, the acquired command will be removed, unless it is in uninterruptible state.
            Interrupting of acquired commands only consider the uninterruptible state, not the order stage or interrupting priority.
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandFlag.Queued">
            <summary>
            Queued command.
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandFlag.Preempt">
            <summary>
            Preempt the current command queue.
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandFlag.IsAcquired">
            <summary>
            Auto-acquired commands that are auto-casting or recasting commands.
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandFlag.IsRequest">
            <summary>
            Is request command from player client or AI.
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandFlag.IsUser">
            <summary>
            Is user request command from player client.
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandFlag.IsAI">
            <summary>
            Is AI request command from AI.
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.ECommandIndex.VectorMove">
            <summary>
            发起摇杆移动，会尝试打断其它的当前指令，指令目标需要是一个向量。
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.ECommandIndex.VectorMoveAdjust">
            <summary>
            发起摇杆移动，不会打断其它的当前指令，指令目标需要是一个向量。
            如果当前有其它指令在执行，只会更改摇杆移动的方向，并等待当前指令结束后继续摇杆移动。
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.ECommandIndex.VectorMoveStop">
            <summary>
            停止单位的摇杆移动，如果当前没有摇杆移动则忽略该指令。
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandIndex.VectorMove">
            <summary>
            发起摇杆移动，会尝试打断其它的当前指令，指令目标需要是一个向量。
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandIndex.VectorMoveAdjust">
            <summary>
            发起摇杆移动，不会打断其它的当前指令，指令目标需要是一个向量。
            如果当前有其它指令在执行，只会更改摇杆移动的方向，并等待当前指令结束后继续摇杆移动。
            </summary>
        </member>
        <member name="F:GameCore.OrderSystem.CommandIndex.VectorMoveStop">
            <summary>
            停止单位的摇杆移动，如果当前没有摇杆移动则忽略该指令。
            </summary>
        </member>
        <member name="T:GameCore.PhysicsSystem.Enum.CollisionType">
            <summary>
            物理碰撞类型
            </summary>
        </member>
        <member name="T:GameCore.PhysicsSystem.Enum.CollisionEventMode">
            <summary>
            物理碰撞事件类型
            </summary>
        </member>
        <member name="T:GameCore.PhysicsSystem.Struct.PhysicsAttributes">
            <summary>
            物理属性
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.CollisionType">
            <summary>
            碰撞类型
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.CollisionEventMode">
            <summary>
            碰撞事件类型
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.CollisionLayer">
            <summary>
            碰撞层级
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.Radius">
            <summary>
            碰撞半径
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.Height">
            <summary>
            碰撞高度
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.Position">
            <summary>
            碰撞基准位置
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.InitVelocity">
            <summary>
            初始速度
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.AngularFactor">
            <summary>
            角度旋转系数
            如果不希望碰撞会影响物体自旋转，可以将这个值设置为Vector3.Zero
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.Mass">
            <summary>
            惯性系数
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.Damping">
            <summary>
            阻尼系数
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.Friction">
            <summary>
            摩檫系数
            </summary>
        </member>
        <member name="P:GameCore.PhysicsSystem.Struct.PhysicsAttributes.Kinematic">
            <summary>
            Kinematic
            </summary>
        </member>
        <member name="T:GameCore.Platform.SDL.PointerButtons">
            <summary>
            Defines pointer button flags for the SDL platform, supporting bitwise combinations for multi-button input.
            </summary>
            <remarks>
            This enum represents mouse buttons and other pointer device buttons (such as touch screen) that can be pressed simultaneously.
            Multiple buttons can be combined using bitwise operations to represent complex input states.
            The buttons are numbered from 1 to 32, with additional special values for common operations.
            </remarks>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.None">
            <summary>
            No pointer buttons are pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button1">
            <summary>
            Pointer button 1 (When using mouse, it's typically the left mouse button).
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button2">
            <summary>
            Pointer button 2 (When using mouse, it's typically the middle mouse button or scroll wheel click).
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button3">
            <summary>
            Pointer button 3 (When using mouse, it's typically the right mouse button).
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button4">
            <summary>
            Pointer button 4.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button5">
            <summary>
            Pointer button 5.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button6">
            <summary>
            Pointer button 6.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button7">
            <summary>
            Pointer button 7.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button8">
            <summary>
            Pointer button 8.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button9">
            <summary>
            Pointer button 9.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button10">
            <summary>
            Pointer button 10.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button11">
            <summary>
            Pointer button 11.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button12">
            <summary>
            Pointer button 12.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button13">
            <summary>
            Pointer button 13.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button14">
            <summary>
            Pointer button 14.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button15">
            <summary>
            Pointer button 15.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button16">
            <summary>
            Pointer button 16.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button17">
            <summary>
            Pointer button 17.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button18">
            <summary>
            Pointer button 18.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button19">
            <summary>
            Pointer button 19.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button20">
            <summary>
            Pointer button 20.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button21">
            <summary>
            Pointer button 21.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button22">
            <summary>
            Pointer button 22.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button23">
            <summary>
            Pointer button 23.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button24">
            <summary>
            Pointer button 24.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button25">
            <summary>
            Pointer button 25.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button26">
            <summary>
            Pointer button 26.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button27">
            <summary>
            Pointer button 27.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button28">
            <summary>
            Pointer button 28.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button29">
            <summary>
            Pointer button 29.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button30">
            <summary>
            Pointer button 30.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button31">
            <summary>
            Pointer button 31.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.Button32">
            <summary>
            Pointer button 32.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.PointerButtons.All">
            <summary>
            All pointer buttons are pressed (bitwise combination of all button flags).
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Exclaim">
            <summary>
            !
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.QuoteDouble">
            <summary>
            "
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Hash">
            <summary>
            #
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Percent">
            <summary>
            %
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Dollar">
            <summary>
            $
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GameCore.Platform.SDL.VirtualKey.Ampersand" -->
        <member name="F:GameCore.Platform.SDL.VirtualKey.Quote">
            <summary>
            '
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.LeftParenthesis">
            <summary>
            (
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.RightParenthesis">
            <summary>
            )
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Asterisk">
            <summary>
            *
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Plus">
            <summary>
            +
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Comma">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Minus">
            <summary>
            -
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Period">
            <summary>
            .
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Slash">
            <summary>
            /
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Colon">
            <summary>
            :
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Semicolon">
            <summary>
            ;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GameCore.Platform.SDL.VirtualKey.Less" -->
        <member name="F:GameCore.Platform.SDL.VirtualKey.Equals">
            <summary>
            =
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Greater">
            <summary>
            >
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Question">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.At">
            <summary>
            @
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.LeftBracket">
            <summary>
            [
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Backslash">
            <summary>
            \
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.RightBracket">
            <summary>
            ]
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Caret">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Underscore">
            <summary>
            _
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.Backquote">
            <summary>
            `
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.NumPadDivide">
            <summary>
            Num /
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.NumPadMultiply">
            <summary>
            Num *
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.NumPadMinus">
            <summary>
            Num -
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.NumPadPlus">
            <summary>
            Num +
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.NumPadEnter">
            <summary>
            Num Enter
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.NumPadPeriod">
            <summary>
            Num .
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.NumPadEquals">
            <summary>
            Num =
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKey.NumPadComma">
            <summary>
            Num ,
            </summary>
        </member>
        <member name="T:GameCore.Platform.SDL.VirtualKeyModifiers">
            <summary>
            Defines keyboard modifier key flags for the SDL platform, supporting bitwise combinations.
            </summary>
            <remarks>
            This enum represents the various modifier keys that can be held down while pressing other keys,
            such as Shift, Ctrl, Alt, and Windows keys. Multiple modifiers can be combined using bitwise operations.
            The values correspond to SDL's native KMOD constants for cross-platform compatibility.
            </remarks>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.None">
            <summary>
            No modifier keys are pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.LeftShift">
            <summary>
            The left Shift key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.RightShift">
            <summary>
            The right Shift key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.LeftCtrl">
            <summary>
            The left Ctrl key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.RightCtrl">
            <summary>
            The right Ctrl key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.LeftAlt">
            <summary>
            The left Alt key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.RightAlt">
            <summary>
            The right Alt key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.LeftWindows">
            <summary>
            The left Windows/GUI key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.RightWindows">
            <summary>
            The right Windows/GUI key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.NumberKeyLock">
            <summary>
            The Num Lock key is active.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.CapitalLock">
            <summary>
            The Caps Lock key is active.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.Mode">
            <summary>
            The AltGr/Mode key is pressed.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.Scroll">
            <summary>
            The Scroll Lock key is active.
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.Ctrl">
            <summary>
            Either Ctrl key is pressed (combination of left and right Ctrl).
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.Shift">
            <summary>
            Either Shift key is pressed (combination of left and right Shift).
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.Alt">
            <summary>
            Either Alt key is pressed (combination of left and right Alt).
            </summary>
        </member>
        <member name="F:GameCore.Platform.SDL.VirtualKeyModifiers.Windows">
            <summary>
            Either Windows/GUI key is pressed (combination of left and right Windows keys).
            </summary>
        </member>
        <member name="T:GameCore.PlayerAndUsers.Enum.PlayerRelationShip">
            <summary>
            Defines the relationship types between players in the game.
            </summary>
            <remarks>
            This enum is used to determine how players interact with each other,
            affecting gameplay mechanics such as combat, visibility, and cooperation.
            </remarks>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerRelationShip.Enemy">
            <summary>
            Players are hostile to each other and can attack one another.
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerRelationShip.Neutral">
            <summary>
            Players have no special relationship - neither hostile nor friendly.
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerRelationShip.Ally">
            <summary>
            Players are allied and typically cannot harm each other directly.
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerRelationShip.Player">
            <summary>
            Represents the relationship a player has with themselves.
            </summary>
        </member>
        <member name="T:GameCore.PlayerAndUsers.Enum.PlayerStatus">
            <summary>
            Defines the connection and activity status of a player in the game.
            </summary>
            <remarks>
            This enum tracks the current state of a player's connection and participation in the game session.
            It helps manage player lifecycle and determine appropriate game behavior based on player availability.
            </remarks>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerStatus.Open">
            <summary>
            The player slot is available but no player has connected yet.
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerStatus.Connected">
            <summary>
            The player is actively connected and participating in the game.
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerStatus.Afk">
            <summary>
            The player is connected but currently away from keyboard (inactive).
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerStatus.Disconnected">
            <summary>
            The player has lost connection but may reconnect.
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerStatus.Left">
            <summary>
            The player has permanently left the game session.
            </summary>
        </member>
        <member name="T:GameCore.PlayerAndUsers.Enum.PlayerUnitRelationShip">
            <summary>
            Relationship between a player and a unit
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerUnitRelationShip.MainUnit">
            <summary>
            If the unit is the main unit of the player.
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Enum.PlayerUnitRelationShip.Player">
            <summary>
            If the unit owned by the player.
            </summary>
        </member>
        <member name="T:GameCore.PlayerAndUsers.Player">
            <summary>
            Represents a player in the game, managing team affiliation, main unit control, scene presence, and multiplayer functionality.
            </summary>
            <remarks>
            Player is a core entity in the game system that represents human players, AI controllers, and system players.
            It manages the relationship between the player and their controlled units, team membership, scene presence,
            and network communication. Each player has a unique identifier and is associated with a controller type
            (human user or AI). Players can own units, switch between scenes, and participate in team-based gameplay.
            The Player class integrates with the networking system for multiplayer scenarios and provides event-driven
            updates for client-side state synchronization. It also handles visibility and relationship calculations
            between different players based on team affiliations and neutral status.
            </remarks>
            <summary>
            Player类对UI属性的IPropertyOwner实现
            核心属性操作功能在GameCore中，客户端设置功能在TriggerEncapsulation中作为扩展方法
            </summary>
        </member>
        <member name="E:GameCore.PlayerAndUsers.Player.OnNeutralChanged">
            <summary>
            Occurs when the player's neutral status changes.
            </summary>
            <remarks>
            This event is fired on the client side when the player's neutral status is updated
            from server synchronization. Neutral players have different relationship rules.
            </remarks>
        </member>
        <member name="E:GameCore.PlayerAndUsers.Player.OnTeamChanged">
            <summary>
            Occurs when the player's team assignment changes.
            </summary>
            <remarks>
            This event is fired on the client side when the player is assigned to a different team.
            Team changes affect player relationships and targeting rules.
            </remarks>
        </member>
        <member name="E:GameCore.PlayerAndUsers.Player.OnMainUnitChanged">
            <summary>
            Occurs when the player's main unit changes.
            </summary>
            <remarks>
            This event is fired when the player's primary controlled unit is changed or removed.
            The main unit is typically the player's avatar or primary character.
            </remarks>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.OnNeutralChangedInternal(System.Boolean)">
            <summary>
            Handles neutral status change notifications from the engine.
            </summary>
            <param name="on">The new neutral status.</param>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.OnTeamChangedInternal(System.Int32)">
            <summary>
            Handles team change notifications from the engine.
            </summary>
            <param name="teamId">The ID of the new team.</param>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.OnMainUnitChangedInternal(System.Nullable{System.Int32})">
            <summary>
            Handles main unit change notifications from the engine.
            </summary>
            <param name="entityId">The entity ID of the new main unit, or null if removed.</param>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.ToString">
            <summary>
            Returns a string representation of this player including ID and team information.
            </summary>
            <returns>A formatted string describing this player.</returns>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.Scene">
            <summary>
            Gets the scene where this player is currently located.
            </summary>
            <value>The scene containing this player.</value>
            <remarks>
            The player's scene is determined by their underlying view player's scene assignment.
            This affects what entities the player can see and interact with.
            On the client side, this value is unreliable unless you are fetch the scene of the local player. 
            It may always return the default scene for other players, as you don't have this information of other players
            </remarks>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.MainUnit">
            <summary>
            Gets or sets the main unit controlled by this player.
            </summary>
            <value>The primary unit under this player's control, or null if no main unit is assigned.</value>
            <remarks>
            The main unit is typically the player's avatar or primary character. On the server,
            setting this property updates the underlying view player's main actor reference.
            On the client, this property is read-only and updated through network synchronization.
            </remarks>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.GetRelationShip(GameCore.PlayerAndUsers.Player)">
            <summary>
            Determines the relationship between this player and another player.
            </summary>
            <param name="other">The other player to determine relationship with.</param>
            <returns>The relationship type between the two players.</returns>
            <remarks>
            Relationships are determined based on team membership and neutral status.
            The hierarchy is: Self > Team Member (Ally) > Enemy > Neutral.
            Neutral players are considered neutral to everyone except themselves.
            </remarks>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.IsNeutral">
            <summary>
            Gets or sets a value indicating whether this player is neutral.
            </summary>
            <value>True if the player is neutral; otherwise, false.</value>
            <remarks>
            Neutral players are not considered enemies by other players and have special
            relationship rules. On the server, setting this property updates the underlying
            view player. On the client, this is synchronized from the server.
            </remarks>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.ControllerSetting">
            <summary>
            Gets the controller type setting from the player configuration.
            </summary>
            <value>The configured controller type for this player.</value>
            <remarks>
            This represents the controller setting from the player's configuration, which may differ
            from the actual controller type if overridden by game conditions.
            </remarks>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.Controller">
            <summary>
            Gets the actual controller type for this player.
            </summary>
            <value>The active controller type (human user or AI).</value>
            <remarks>
            This represents the actual controller managing this player, which determines
            how input and decisions are processed for the player's units and actions.
            </remarks>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.DefaultPlayer">
            <summary>
            Gets the default system player (Player 0).
            </summary>
            <value>The default player instance used for system operations.</value>
            <remarks>
            The default player is used for entities and operations that don't belong to
            a specific human player, such as neutral creatures or system-generated content.
            </remarks>
        </member>
        <member name="F:GameCore.PlayerAndUsers.Player._viewPlayer">
            <summary>
            Gets the underlying engine view player interface.
            </summary>
            <value>The view player that manages engine-level player operations.</value>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.#ctor(System.Int32)">
            <summary>
            Initializes a new player instance with the specified ID.
            </summary>
            <param name="id">The unique identifier for this player.</param>
            <remarks>
            This constructor sets up the player with engine integration, event handling,
            and appropriate initialization for server or client scenarios.
            </remarks>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.Team">
            <summary>
            Gets or sets the team that this player belongs to.
            </summary>
            <value>The team this player is a member of.</value>
            <remarks>
            Team membership affects player relationships, targeting rules, and shared objectives.
            On the server, setting this property updates the underlying view player and adds
            the player to the team. On the client, this is synchronized from the server.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the team to null on the server.</exception>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.Id">
            <summary>
            Gets the unique identifier for this player.
            </summary>
            <value>The player's unique ID used throughout the game system.</value>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.GetById(System.Int32)">
            <summary>
            Retrieves a player by their unique identifier.
            </summary>
            <param name="id">The unique identifier of the player to retrieve.</param>
            <returns>The player with the specified ID, or null if not found.</returns>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.GetOrCreateById(System.Int32)">
            <summary>
            Retrieves an existing player or creates a new one with the specified ID.
            </summary>
            <param name="id">The unique identifier of the player to retrieve or create.</param>
            <returns>The existing player or a newly created player with the specified ID.</returns>
            <remarks>
            This method is used internally for player management and should not be called directly
            by game code. Player creation is typically handled by the game's player management systems.
            </remarks>
        </member>
        <member name="P:GameCore.PlayerAndUsers.Player.LocalPlayer">
            <summary>
            Gets the local player instance for the current client.
            </summary>
            <value>The player representing the local client.</value>
            <exception cref="T:System.InvalidOperationException">Thrown when the local player ID is invalid.</exception>
            <remarks>
            This property provides access to the player instance representing the local client
            in multiplayer scenarios. It's only available on the client side.
            </remarks>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.CanControlTo(GameCore.EntitySystem.Entity,System.Boolean)">
            <summary>
            Determines whether this player can control the specified entity.
            </summary>
            <param name="entity">The entity to check control permissions for.</param>
            <param name="isRequest">Whether this is a control request that requires additional validation.</param>
            <returns>True if the player can control the entity; otherwise, false.</returns>
            <remarks>
            Control permissions are based on entity ownership and the entity's ability to receive commands.
            Control requests have additional validation requirements compared to simple ownership checks.
            </remarks>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.ActorsSynced">
            <summary>
            Determines whether all player actors are properly synchronized.
            </summary>
            <returns>True if synchronization is complete; otherwise, false.</returns>
            <remarks>
            This method checks if all players have completed their synchronization process.
            On the server, it checks if any players exist. On the client, it ensures all
            players have finished replication.
            </remarks>
        </member>
        <member name="M:GameCore.PlayerAndUsers.Player.GetUIProperty``1(GameCore.PlayerAndUsers.PropertyPlayerUI)">
            <summary>
            获取UI属性值
            </summary>
        </member>
        <member name="T:GameCore.PlayerAndUsers.EPropertyPlayerUI">
            <summary>
            客户端可设置的玩家UI属性枚举
            警告：这些属性可能被客户端修改，不应用于游戏逻辑判断
            仅用于UI状态、偏好设置等非安全关键数据
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.EPropertyPlayerUI.UIPanelCollapsed">
            <summary>
            UI面板折叠状态 - 示例属性
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.EPropertyPlayerUI.ChatChannelPreference">
            <summary>
            聊天频道设置
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.EPropertyPlayerUI.KeyBindingSettings">
            <summary>
            快捷键绑定设置
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.EPropertyPlayerUI.UILayoutConfig">
            <summary>
            界面布局配置
            </summary>
        </member>
        <member name="T:GameCore.PlayerAndUsers.User">
            <summary>
            Represents a user in the game system with identification and display information.
            </summary>
            <param name="userId">The unique identifier for this user.</param>
            <remarks>
            This class encapsulates user information including their unique ID and optional display name.
            It provides string representation functionality for debugging and display purposes.
            </remarks>
        </member>
        <member name="M:GameCore.PlayerAndUsers.User.#ctor(System.Int64)">
            <summary>
            Represents a user in the game system with identification and display information.
            </summary>
            <param name="userId">The unique identifier for this user.</param>
            <remarks>
            This class encapsulates user information including their unique ID and optional display name.
            It provides string representation functionality for debugging and display purposes.
            </remarks>
        </member>
        <member name="P:GameCore.PlayerAndUsers.User.Name">
            <summary>
            Gets or sets the display name for this user. Can be null if no name is set.
            </summary>
        </member>
        <member name="P:GameCore.PlayerAndUsers.User.UserId">
            <summary>
            Gets the unique identifier for this user.
            </summary>
        </member>
        <member name="M:GameCore.PlayerAndUsers.User.ToString">
            <summary>
            Returns a string representation of this user, including the name (if available) and user ID.
            </summary>
            <returns>A formatted string in the format "[Name] [User ID]" or just "[User ID]" if no name is set.</returns>
        </member>
        <member name="F:GameCore.PlayerAndUsers.PropertyPlayerUI.UIPanelCollapsed">
            <summary>
            UI面板折叠状态 - 示例属性
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.PropertyPlayerUI.ChatChannelPreference">
            <summary>
            聊天频道设置
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.PropertyPlayerUI.KeyBindingSettings">
            <summary>
            快捷键绑定设置
            </summary>
        </member>
        <member name="F:GameCore.PlayerAndUsers.PropertyPlayerUI.UILayoutConfig">
            <summary>
            界面布局配置
            </summary>
        </member>
        <member name="T:GameCore.Properties.CmdResultStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_AbilityNotFound">
            <summary>
              Looks up a localized string similar to Ability not found.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_AlreadyCancelled">
            <summary>
              Looks up a localized string similar to Already cancelled.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_AlreadyExecuted">
            <summary>
              Looks up a localized string similar to Already executed.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_AlreadyIssued">
            <summary>
              Looks up a localized string similar to Already issued.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_AlreadyQueued">
            <summary>
              Looks up a localized string similar to Already queued.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_AlreadyToggled">
            <summary>
              Looks up a localized string similar to Already toggled.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotControlThatAbility">
            <summary>
              Looks up a localized string similar to Cannot control that ability.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotControlThatItem">
            <summary>
              Looks up a localized string similar to Cannot control that item.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotControlThatSlot">
            <summary>
              Looks up a localized string similar to Cannot control that slot.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotControlThatUnit">
            <summary>
              Looks up a localized string similar to Cannot control that unit.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotDropThatItem">
            <summary>
              Looks up a localized string similar to Cannot drop that item.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotFindCaster">
            <summary>
              Looks up a localized string similar to Cannot find caster.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotIssueThatOrder">
            <summary>
              Looks up a localized string similar to Cannot issue that order.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotMove">
            <summary>
              Looks up a localized string similar to Cannot move.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotMoveToTarget">
            <summary>
              Looks up a localized string similar to Cannot move to target.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotMoveWhileDead">
            <summary>
              Looks up a localized string similar to Cannot move while dead.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotPlaceThere">
            <summary>
              Looks up a localized string similar to Cannot place there.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotSeeTarget">
            <summary>
              Looks up a localized string similar to Cannot see target.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotTakeThatItem">
            <summary>
              Looks up a localized string similar to Cannot take that item.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotTargetCertainUnit">
            <summary>
              Looks up a localized string similar to Cannot target certain unit.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotTargetThat">
            <summary>
              Looks up a localized string similar to Cannot target that.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotTurn">
            <summary>
              Looks up a localized string similar to Cannot turn.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotTurnToTarget">
            <summary>
              Looks up a localized string similar to Cannot turn to target.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotTurnWhenSpeedIsZero">
            <summary>
              Looks up a localized string similar to Cannot turn when speed is zero.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotTurnWhileDead">
            <summary>
              Looks up a localized string similar to Cannot turn while dead.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotUseDisabledAbility">
            <summary>
              Looks up a localized string similar to Cannot use disabled ability.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CannotUseHiddenAbility">
            <summary>
              Looks up a localized string similar to Cannot use hidden ability.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CanOnlyTargetUnitWithInventory">
            <summary>
              Looks up a localized string similar to Can only target unit with inventory.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CasterCannotUseAbility">
            <summary>
              Looks up a localized string similar to Caster cannot use ability.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CasterIsDead">
            <summary>
              Looks up a localized string similar to Caster is dead.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_CasterIsRemoved">
            <summary>
              Looks up a localized string similar to Caster is removed.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_FailedToAddBuff">
            <summary>
              Looks up a localized string similar to Failed to add buff.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidAbilityType">
            <summary>
              Looks up a localized string similar to Invalid ability type.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidBuffType">
            <summary>
              Looks up a localized string similar to Invalid buff type.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidCommandData">
            <summary>
              Looks up a localized string similar to Invalid command data.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidCountData">
            <summary>
              Looks up a localized string similar to Invalid count data.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidFacingData">
            <summary>
              Looks up a localized string similar to Invalid facing data.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidItemType">
            <summary>
              Looks up a localized string similar to Invalid item type.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidLaunchLocationData">
            <summary>
              Looks up a localized string similar to Invalid launch location data.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidMissileUnit">
            <summary>
              Looks up a localized string similar to Invalid missile unit.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidMoverData">
            <summary>
              Looks up a localized string similar to Invalid mover data.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidPlayer">
            <summary>
              Looks up a localized string similar to Invalid player.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidRange">
            <summary>
              Looks up a localized string similar to Invalid range.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidSetData">
            <summary>
              Looks up a localized string similar to Invalid set data.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidTarget">
            <summary>
              Looks up a localized string similar to Invalid target.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidTargetData">
            <summary>
              Looks up a localized string similar to Invalid target data.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidUnitType">
            <summary>
              Looks up a localized string similar to Invalid unit type.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InvalidVectorMoveTarget">
            <summary>
              Looks up a localized string similar to Invalid vector move target.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_InventoryIsFull">
            <summary>
              Looks up a localized string similar to Inventory is full.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_IsDisabled">
            <summary>
              Looks up a localized string similar to Is disabled.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_IsInCooldown">
            <summary>
              Looks up a localized string similar to Is in cooldown.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_ItemDoesNotHaveAbility">
            <summary>
              Looks up a localized string similar to Item does not have ability.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_ItemIsNotUseable">
            <summary>
              Looks up a localized string similar to Item is not usable.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_LaunchSiteUnitIsRemoved">
            <summary>
              Looks up a localized string similar to Launch site unit is removed.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_MovementSuppressed">
            <summary>
              Looks up a localized string similar to Movement suppressed.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_MustTargetCertainUnit">
            <summary>
              Looks up a localized string similar to Must target certain unit.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_MustTargetEntity">
            <summary>
              Looks up a localized string similar to Must target entity.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_MustTargetItem">
            <summary>
              Looks up a localized string similar to Must target item.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_MustTargetUnit">
            <summary>
              Looks up a localized string similar to Must target unit.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NoComponentToHandleOrder">
            <summary>
              Looks up a localized string similar to No component to handle order.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NoIntermediateUnit">
            <summary>
              Looks up a localized string similar to No intermediate unit.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NoOrderQueue">
            <summary>
              Looks up a localized string similar to No order queue.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NotEnoughCharges">
            <summary>
              Looks up a localized string similar to Not enough charges.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NotEnoughChildrenToExecute">
            <summary>
              Looks up a localized string similar to Not enough children to execute.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NotEnoughResource">
            <summary>
              Looks up a localized string similar to Not enough resource.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NotEnoughRoomToPlace">
            <summary>
              Looks up a localized string similar to Not enough room to place.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NotEnoughTarget">
            <summary>
              Looks up a localized string similar to Not enough targets.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NothingToExecute">
            <summary>
              Looks up a localized string similar to Nothing to execute.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NoTriggerAbility">
            <summary>
              Looks up a localized string similar to No trigger ability.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NotStarted">
            <summary>
              Looks up a localized string similar to Not started.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NotSupported">
            <summary>
              Looks up a localized string similar to Not supported.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_NoValidAttackAbility">
            <summary>
              Looks up a localized string similar to No valid attack ability.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_RequestRequiresPlayer">
            <summary>
              Looks up a localized string similar to Invalid request, player is required when issuing request commands.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_TargetIsDead">
            <summary>
              Looks up a localized string similar to Target is dead.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_TargetIsInAnotherScene">
            <summary>
              Looks up a localized string similar to Target is in another scene.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_TargetIsOutOfRange">
            <summary>
              Looks up a localized string similar to Target is out of range.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_TargetIsRemoved">
            <summary>
              Looks up a localized string similar to Target is removed.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_TargetIsTooClose">
            <summary>
              Looks up a localized string similar to Target is too close.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_TargetSceneIsNotLoaded">
            <summary>
              Looks up a localized string similar to Target scene is not loaded.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_TooMuchResource">
            <summary>
              Looks up a localized string similar to Too much resource.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_TurningSuppressed">
            <summary>
              Looks up a localized string similar to Turning suppressed.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdError_UnableToAddBuff">
            <summary>
              Looks up a localized string similar to Unable to add buff.
            </summary>
        </member>
        <member name="P:GameCore.Properties.CmdResultStrings.Description_GameCore_BaseType_ECmdResult_Ok">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="T:GameCore.Properties.EditorRuntime">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GameCore.Properties.EditorRuntime.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GameCore.Properties.EditorRuntime.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GameCore.Properties.EditorRuntime.GameDataInvalidUnitType">
            <summary>
              Looks up a localized string similar to Unit type is not specified correctly.
            </summary>
        </member>
        <member name="T:GameCore.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GameCore.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GameCore.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GameCore.ProtocolClientTransient.ProtoClientEventKey.Modifiers">
            <summary>
            The virtual key modifiers, such as Shift, Ctrl, or Alt, that were pressed when the event occurred.
            </summary>
        </member>
        <member name="P:GameCore.ProtocolClientTransient.ProtoClientEventKey.PointerButtons">
            <summary>
            The pointer buttons that were pressed when the event occurred. For mouse events, this indicates which mouse buttons were pressed. For finger events, differentiate between fingers by using the touching ID.
            </summary>
        </member>
        <member name="P:GameCore.ProtocolClientTransient.ProtoClientEventKey.Key">
            <summary>
            The virtual key that triggered the event.
            </summary>
        </member>
        <member name="P:GameCore.ProtocolClientTransient.ProtoClientEventKey.IsRepeat">
            <summary>
            Indicates whether the event was triggered by a key long press.
            </summary>
        </member>
        <member name="T:GameCore.ProtocolServerTransient.IProtocolServerTransient">
            <summary>
            定义服务器瞬态协议的基础接口，用于处理临时性的服务器到客户端消息
            </summary>
            <remarks>
            瞬态协议用于传输不需要持久化的临时数据，如视觉效果、音效触发、临时状态变化等。
            这些消息通常具有即时性，不需要重传或状态同步。
            </remarks>
        </member>
        <member name="M:GameCore.ProtocolServerTransient.IProtocolServerTransient.Handle(System.Int32,System.ReadOnlySpan{System.Byte})">
            <summary>
            处理接收到的瞬态协议消息
            </summary>
            <param name="TypeHash">消息类型的哈希值</param>
            <param name="bytes">消息的字节数据</param>
            <returns>如果成功处理消息则返回 <c>true</c>；否则返回 <c>false</c></returns>
            <remarks>
            此方法查找对应类型的处理器并执行消息处理逻辑。
            </remarks>
        </member>
        <member name="M:GameCore.ProtocolServerTransient.IProtocolServerTransient.Handle">
            <summary>
            处理特定的协议消息
            </summary>
            <remarks>
            派生类需要实现此方法来定义具体的消息处理逻辑。
            </remarks>
        </member>
        <member name="T:GameCore.ProtocolServerTransient.IProtocolServerTransient`1">
            <summary>
            定义泛型服务器瞬态协议接口，提供类型安全的消息处理功能
            </summary>
            <typeparam name="TSelf">实现此接口的具体协议类型</typeparam>
            <remarks>
            此接口结合了字节序列化、协议处理和游戏类注册功能，为瞬态消息提供完整的处理框架。
            实现类型必须是非托管类型以确保高效的序列化性能。
            </remarks>
        </member>
        <member name="P:GameCore.ProtocolServerTransient.IProtocolServerTransient`1.TypeHash">
            <summary>
            获取协议类型的哈希值
            </summary>
            <remarks>
            用于在消息处理器字典中标识和查找特定的协议类型。
            </remarks>
        </member>
        <member name="M:GameCore.ProtocolServerTransient.IProtocolServerTransient`1.GameCore#BaseInterface#IGameClass#OnRegisterGameClass">
            <summary>
            注册游戏类时的回调方法
            </summary>
            <remarks>
            在客户端注册消息处理器，建立类型哈希到处理方法的映射。
            </remarks>
        </member>
        <member name="M:GameCore.ProtocolServerTransient.IProtocolServerTransient`1.Handle(System.ReadOnlySpan{System.Byte})">
            <summary>
            处理从字节数据反序列化的协议消息
            </summary>
            <param name="bytes">包含协议数据的字节跨度</param>
            <remarks>
            此方法负责反序列化字节数据并调用具体的消息处理逻辑。
            </remarks>
        </member>
        <member name="T:GameCore.ProtocolServerTransient.ProtoCmdResultNotify">
            <summary>
            表示命令结果通知的瞬态协议消息，用于向客户端传递命令执行结果
            </summary>
            <param name="cmdResult">命令执行的结果</param>
            <remarks>
            此协议消息用于在服务器执行命令后向客户端发送执行结果的通知。
            客户端接收到此消息后会触发相应的游戏事件，允许 UI 和其他系统响应命令结果。
            这是游戏中命令反馈机制的重要组成部分。
            </remarks>
        </member>
        <member name="M:GameCore.ProtocolServerTransient.ProtoCmdResultNotify.#ctor(GameCore.BaseType.CmdResult)">
            <summary>
            表示命令结果通知的瞬态协议消息，用于向客户端传递命令执行结果
            </summary>
            <param name="cmdResult">命令执行的结果</param>
            <remarks>
            此协议消息用于在服务器执行命令后向客户端发送执行结果的通知。
            客户端接收到此消息后会触发相应的游戏事件，允许 UI 和其他系统响应命令结果。
            这是游戏中命令反馈机制的重要组成部分。
            </remarks>
        </member>
        <member name="P:GameCore.ProtocolServerTransient.ProtoCmdResultNotify.CmdResult">
            <summary>
            获取或设置命令执行的结果
            </summary>
            <remarks>
            使用可扩展枚举包装的命令结果，支持动态添加新的结果类型。
            结果包含成功、失败以及各种具体的错误信息。
            </remarks>
        </member>
        <member name="M:GameCore.ProtocolServerTransient.ProtoCmdResultNotify.Handle">
            <summary>
            处理接收到的命令结果通知消息
            </summary>
            <remarks>
            在客户端处理此协议消息，触发 <see cref="T:GameCore.Event.EventGameCmdResultNotify"/> 事件。
            这允许游戏的各个系统响应命令执行结果，如显示错误信息、更新 UI 状态等。
            </remarks>
        </member>
        <member name="M:GameCore.Protocol.IBytesReplicable`1.ToBytes(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            May cause allocation. Use AsBytes() for performance.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="P:GameCore.SceneSystem.Data.GameDataScene.HostedSceneTag">
            <summary>
            The scene asset file identifier for the scene in the engine, multiple scenes can share the same asset if needed.
            The scene asset file should be unique in each project and case-insensitive to avoid conflicts.
            Scene asset files are generated by the Terrain Editor and not be able to created by the code.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.GameDataScene.Size">
            <summary>
            The size of the scene in world units.
            The size must be a multiple of 128 to ensure proper alignment and rendering.
            The size must be the same as the scene asset file size in the engine.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.GameDataScene.DefaultCamera">
            <summary>
            Gets or sets the default camera used in the game for this scene.
            When the scene is loaded on the client, this camera will be used to render the scene.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedItem.TriggerGetterInstance">
            <summary>
            The instance of the item placed in the scene.
            Ignore cloned scenes.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedPlayerObject.TriggerGetter">
            <summary>
            触发编辑器只要获取了一次就为 true，不再重置。
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedRegionCircle.Center">
            <summary>
            Gets the center point of the circle.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedRegionCircle.Radius">
            <summary>
            Gets the radius of the circle.
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedRegionRectangle.Size">
            <summary>
            Gets the size of the rectangle as a <see cref="T:System.Numerics.Vector2"/> (X: width, Y: height).
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Data.Struct.PlacedUnit.TriggerGetterInstance">
            <summary>
            The instance of the unit placed in the scene.
            Ignore cloned scenes.
            </summary>
        </member>
        <member name="T:GameCore.SceneSystem.HostedSceneTag">
            <summary>
            框架和引擎交互时用于标识场景的结构体。
            </summary>
        </member>
        <member name="F:GameCore.SceneSystem.HostedSceneTag.SceneTag">
            <summary>
            场景在引擎中的唯一标识符，每个场景都应该有一个唯一的标识符。
            但不同场景可以共享相同的场景素材文件（通过<see cref="P:GameCore.SceneSystem.HostedSceneTag.AssetTemplate"/>字段）。
            </summary>
        </member>
        <member name="F:GameCore.SceneSystem.HostedSceneTag.assetTemplate">
            <summary>
            场景素材文件的标识符，通常是一个字符串，表示场景在引擎中的素材文件路径。
            若不填，则使用<see cref="F:GameCore.SceneSystem.HostedSceneTag.SceneTag"/>作为素材文件标识符。"/>。
            多个场景可以共享相同的素材文件。此时它们的<see cref="F:GameCore.SceneSystem.HostedSceneTag.SceneTag"/>应该不同，但<see cref="P:GameCore.SceneSystem.HostedSceneTag.AssetTemplate"/>相同。
            </summary>
        </member>
        <member name="M:GameCore.SceneSystem.HostedSceneTag.#ctor(EngineCommon.UTF8String,EngineCommon.UTF8String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.SceneSystem.HostedSceneTag"/> class with the specified scene tag and asset
            template.
            </summary>
            <param name="sceneTag">The unique identifier for the scene, represented as a UTF-8 string. This value cannot be null.</param>
            <param name="assetTemplate">The template associated with the scene, represented as a UTF-8 string. This value cannot be null.</param>
        </member>
        <member name="T:GameCore.SceneSystem.Scene">
            <summary>
            Represents a game scene that contains entities, effects, and provides spatial operations for game world management.
            </summary>
            <remarks>
            Scene is a fundamental container for all game objects within a defined game world area. It manages entity lifecycle,
            spatial queries, pathfinding, and scene loading/unloading operations. Each scene has a unique identifier and can be
            loaded or unloaded dynamically based on game needs. Scenes support advanced spatial operations like circular,
            rectangular, and cone-based searches for entities, making them essential for AI, combat, and interaction systems.
            The scene system integrates with the engine's view layer for rendering and physics, while providing game-logic
            abstractions for entity management and spatial relationships.
            </remarks>
        </member>
        <member name="E:GameCore.SceneSystem.Scene.OnLoadStart">
            <summary>
            Occurs when the scene starts loading.
            </summary>
            <remarks>
            This event is fired at the beginning of the scene loading process, before any entities
            or placed objects are created. It's useful for systems that need to prepare for scene content.
            </remarks>
        </member>
        <member name="E:GameCore.SceneSystem.Scene.OnLoadEnd">
            <summary>
            Occurs when the scene finishes loading.
            </summary>
            <remarks>
            This event is fired after the scene and all its content have been fully loaded and initialized.
            It indicates that the scene is ready for gameplay and all placed objects are available.
            </remarks>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.IsLogicScene">
            <summary>
            Indicates whether this scene is a logic scene, which means it is created with the asset of another template scene
            </summary>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Size">
            <summary>
            Gets the size dimensions of this scene.
            </summary>
            <value>A Vector2 representing the width and height of the scene in world units.</value>
            <remarks>
            The scene size determines the valid coordinate space for entities and operations within the scene.
            Size is cached for performance and retrieved from either the game data configuration or the view scene.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.#ctor(EngineInterface.GoInterface.IViewScene,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new scene instance with the specified view scene and name.
            </summary>
            <param name="scene">The engine view scene that backs this game scene.</param>
            <param name="nameSpan">The name of the scene as a byte span.</param>
            <remarks>
            This constructor creates a scene from a name, generating a hash-based sync ID for network synchronization.
            On the server, it sets up load event handlers for proper scene lifecycle management.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Scene_OnLoadStart">
            <summary>
            Handles the scene load start event on the client side.
            </summary>
            <remarks>
            This method is called by the client replication system when a scene begins loading.
            It fires appropriate events to notify client systems of the loading process.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Scene_OnLoadEnd">
            <summary>
            Handles the scene load end event on the client side.
            </summary>
            <remarks>
            This method is called by the client replication system when a scene finishes loading.
            It fires appropriate events to notify client systems that the scene is ready.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.#ctor(EngineInterface.GoInterface.IViewScene,System.Int32,System.String)">
            <summary>
            Initializes a new scene instance with the specified view scene, sync ID, and name.
            </summary>
            <param name="scene">The engine view scene that backs this game scene.</param>
            <param name="syncId">The synchronization identifier for this scene.</param>
            <param name="name">The name of the scene.</param>
            <remarks>
            This constructor is used for client-side scene replication where the sync ID and name
            are provided from server synchronization data.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.#ctor(EngineInterface.GoInterface.IViewScene,GameData.IGameLink{GameCore.SceneSystem.Data.GameDataScene})">
            <summary>
            Initializes a new scene instance from a game data link.
            </summary>
            <param name="scene">The engine view scene that backs this game scene.</param>
            <param name="link">The game data link containing scene configuration.</param>
            <remarks>
            This constructor creates a scene from game data configuration, using the hosted scene tag
            to generate a consistent sync ID for network synchronization.
            </remarks>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Link">
            <summary>
            Gets the game data link that defines this scene's configuration.
            </summary>
            <value>The game data link for this scene, or null if the scene was created without data.</value>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Cache">
            <summary>
            Gets the cached game data configuration for this scene.
            </summary>
            <value>The scene configuration data, or null if no data link is available.</value>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.ViewScene">
            <summary>
            Gets the engine view scene that backs this game scene.
            </summary>
            <value>The view scene interface for engine operations.</value>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Get(System.ReadOnlySpan{System.Byte})">
            <summary>
            Retrieves a scene by its name.
            </summary>
            <param name="sceneName">The name of the scene as a byte span.</param>
            <returns>The scene with the specified name, or null if not found.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetOrCreate(System.ReadOnlySpan{System.Byte})">
            <summary>
            Retrieves an existing scene or creates a new one with the specified name.
            </summary>
            <param name="sceneName">The name of the scene as a byte span.</param>
            <returns>The existing scene or a newly created scene with the specified name.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Get(System.Int32)">
            <summary>
            Retrieves a scene by its hash identifier.
            </summary>
            <param name="sceneHash">The hash identifier of the scene.</param>
            <returns>The scene with the specified hash, or null if not found.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetOrCreate(System.Int32,System.String)">
            <summary>
            Retrieves an existing scene or creates a new one with the specified hash and name.
            </summary>
            <param name="sceneHash">The hash identifier of the scene.</param>
            <param name="name">The optional name for the scene if it needs to be created.</param>
            <returns>The existing scene or a newly created scene with the specified parameters.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.Get(GameData.IGameLink{GameCore.SceneSystem.Data.GameDataScene})">
            <summary>
            Retrieves a scene by its game data link.
            </summary>
            <param name="link">The game data link for the scene.</param>
            <returns>The scene associated with the data link, or null if not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the link has invalid data.</exception>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetOrCreate(GameData.IGameLink{GameCore.SceneSystem.Data.GameDataScene})">
            <summary>
            Retrieves an existing scene or creates a new one from the specified game data link.
            </summary>
            <param name="link">The game data link for the scene.</param>
            <returns>The existing scene or a newly created scene from the data link.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the link has invalid data.</exception>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.SyncId">
            <summary>
            Gets the unique synchronization identifier for this scene.
            </summary>
            <value>The sync ID used for network synchronization and scene identification.</value>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.Name">
            <summary>
            Gets the name of this scene.
            </summary>
            <value>The scene name, or the friendly name from the data link if no explicit name is set.</value>
        </member>
        <member name="P:GameCore.SceneSystem.Scene.SyncIdType">
            <summary>
            Gets the synchronization ID type for scenes.
            </summary>
            <value>The sync ID type indicating this is a scene object.</value>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.ToString">
            <summary>
            Returns a string representation of this scene.
            </summary>
            <returns>The scene name or sync ID as a string.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.AddEntity(GameCore.EntitySystem.Entity)">
            <summary>
            Adds an entity to this scene's entity collection.
            </summary>
            <param name="entity">The entity to add to the scene.</param>
            <returns>True if the entity was successfully added; otherwise, false.</returns>
            <remarks>
            This method is used internally to register entities with the scene when they are created
            or moved into the scene. Entities must be properly registered to participate in scene operations.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.RemoveEntity(GameCore.EntitySystem.Entity)">
            <summary>
            Removes an entity from this scene's entity collection.
            </summary>
            <param name="entity">The entity to remove from the scene.</param>
            <returns>True if the entity was successfully removed; otherwise, false.</returns>
            <remarks>
            This method is used internally to unregister entities from the scene when they are destroyed
            or moved to a different scene. Removed entities will no longer participate in scene operations.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetEntities(System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Gets all entities in this scene, optionally filtered by a predicate.
            </summary>
            <param name="filter">An optional filter function to apply to entities.</param>
            <returns>An enumerable collection of entities that match the filter criteria.</returns>
            <remarks>
            This method provides access to all entities in the scene with optional filtering.
            It's useful for systems that need to process specific types of entities or entities
            meeting certain criteria without spatial constraints.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetMorphs``1(System.Func{GameCore.EntitySystem.Entity,``0})">
            <summary>
            Gets entities in this scene transformed through a morph function, filtering out null results.
            </summary>
            <typeparam name="TMorph">The type of the transformed result.</typeparam>
            <param name="morph">A function that transforms entities to the desired type or returns null.</param>
            <returns>An enumerable collection of successfully transformed entities.</returns>
            <remarks>
            This method is useful for type-safe entity processing where you want to extract specific
            types or aspects of entities. For example, getting all units, or all entities with a
            specific component type.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.AddEffectPersist(GameCore.Execution.EffectPersist)">
            <summary>
            Adds an effect persist to the scene's collection for lifecycle management.
            </summary>
            <param name="effectPersist">The effect persist to add to the scene.</param>
            <returns>True if the effect was added; false if the target is an entity (handled elsewhere).</returns>
            <remarks>
            This method is currently only used to store EffectPersists that are not attached to any entity.
            This ensures that standalone effects are properly stopped when the scene is unloaded.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.RemoveEffectPersist(GameCore.Execution.EffectPersist)">
            <summary>
            Removes an effect persist from the scene's collection.
            </summary>
            <param name="effectPersist">The effect persist to remove from the scene.</param>
            <returns>True if the effect was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchCircle(GameCore.SceneSystem.ScenePoint,System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Searches for entities within a circular area around a center point.
            </summary>
            <param name="center">The center point of the search circle.</param>
            <param name="radius">The radius of the search circle.</param>
            <param name="filter">An optional filter to apply to found entities.</param>
            <returns>An enumerable collection of entities within the search area, or null if no entities are found.</returns>
            <remarks>
            This method performs efficient spatial queries using the engine's optimized search algorithms.
            It's commonly used for area-of-effect abilities, proximity detection, and AI awareness systems.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchCircle``1(GameCore.SceneSystem.ScenePoint,System.Single,System.Func{GameCore.EntitySystem.Entity,``0})">
            <inheritdoc cref="M:GameCore.SceneSystem.Scene.SearchCircle(GameCore.SceneSystem.ScenePoint,System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})"/>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchRectangle(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Searches for entities within a rectangular area.
            </summary>
            <param name="position">The center position of the rectangle.</param>
            <param name="facing">The facing direction that determines rectangle orientation.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="filter">An optional filter to apply to found entities.</param>
            <returns>An enumerable collection of entities within the search area, or null if no entities are found.</returns>
            <remarks>
            Rectangle searches are useful for directional effects like breath weapons, beam attacks,
            or area selection tools. The rectangle is oriented based on the facing direction.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchRectangle``1(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,System.Single,System.Func{GameCore.EntitySystem.Entity,``0})">
            <inheritdoc cref="M:GameCore.SceneSystem.Scene.SearchRectangle(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})"/>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchCone(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,GameCore.BaseType.Angle,System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Searches for entities within a cone-shaped area.
            </summary>
            <param name="position">The apex position of the cone.</param>
            <param name="facing">The central direction of the cone.</param>
            <param name="radius">The maximum distance from the apex.</param>
            <param name="centralAngle">The total angle of the cone spread.</param>
            <param name="filter">An optional filter to apply to found entities.</param>
            <returns>An enumerable collection of entities within the search area, or null if no entities are found.</returns>
            <remarks>
            Cone searches are perfect for implementing vision cones, spell effects with directional spread,
            or weapon attacks with angular coverage. The cone extends from the position in the facing direction.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.SearchCone``1(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,GameCore.BaseType.Angle,System.Func{GameCore.EntitySystem.Entity,``0})">
            <inheritdoc cref="M:GameCore.SceneSystem.Scene.SearchCone(GameCore.SceneSystem.ScenePoint,GameCore.BaseType.Angle,System.Single,GameCore.BaseType.Angle,System.Func{GameCore.EntitySystem.Entity,System.Boolean})"/>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetPlacedUnit(System.Int32)">
            <summary>
            Retrieves a placed unit configuration by its placement identifier.
            </summary>
            <param name="placeId">The unique identifier of the placed unit.</param>
            <returns>The placed unit configuration, or null if not found.</returns>
            <remarks>
            Placed units are predefined entity configurations stored in the scene data that can be
            instantiated at specific locations. This method accesses the placement definitions.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.Scene.GetPlacedItem(System.Int32)">
            <summary>
            Retrieves a placed item configuration by its placement identifier.
            </summary>
            <param name="placeId">The unique identifier of the placed item.</param>
            <returns>The placed item configuration, or null if not found.</returns>
            <remarks>
            Placed items are predefined item configurations stored in the scene data that can be
            instantiated at specific locations. This method accesses the placement definitions.
            </remarks>
        </member>
        <member name="T:GameCore.SceneSystem.ScenePoint">
            <summary>
            Represents a three-dimensional point within a specific game scene, implementing targeting and positioning interfaces.
            </summary>
            <remarks>
            ScenePoint is a fundamental structure for representing positions in the game world. It combines 3D coordinates
            with a scene reference, ensuring that all position operations are scene-aware. The structure implements ITarget
            to participate in the targeting system and provides comprehensive spatial operations including distance calculations,
            angle computations, and coordinate transformations. ScenePoint supports pathfinding integration on the server side
            and ground height queries on the client side. It serves as the primary position representation throughout the
            game systems for entities, effects, and spatial queries.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(System.Numerics.Vector2,GameCore.SceneSystem.Scene)">
            <summary>
            Initializes a new ScenePoint with the specified 2D coordinates and scene.
            </summary>
            <param name="point">The 2D position in the scene.</param>
            <param name="scene">The scene that contains this point.</param>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(System.Numerics.Vector3,GameCore.SceneSystem.Scene)">
            <summary>
            Initializes a new ScenePoint with the specified 3D coordinates and scene.
            </summary>
            <param name="point">The 3D position in the scene. Format: Vector3(x, y, z) where XY is ground position and Z is height.</param>
            <param name="scene">The scene that contains this point.</param>
            <remarks>
            ⚠️ Coordinate System: This framework uses Z-axis as height axis.
            - X and Y represent ground plane coordinates
            - Z represents height/elevation (jumping axis)
            The Z coordinate is extracted and stored separately while X and Y are used for the 2D vector.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(System.Single,System.Single,GameCore.SceneSystem.Scene)">
            <summary>
            Initializes a new ScenePoint with the specified X, Y coordinates and scene.
            </summary>
            <param name="x">The X coordinate in the scene.</param>
            <param name="y">The Y coordinate in the scene.</param>
            <param name="scene">The scene that contains this point.</param>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.#ctor(EngineInterface.GoInterface.IScenePoint)">
            <summary>
            Initializes a new ScenePoint by copying from another scene point interface.
            </summary>
            <param name="scenePoint">The scene point to copy from.</param>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.X">
            <summary>
            Gets the X coordinate of this point.
            </summary>
            <value>The X coordinate in world units.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Y">
            <summary>
            Gets the Y coordinate of this point.
            </summary>
            <value>The Y coordinate in world units.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Z">
            <summary>
            Gets or sets the Z coordinate (height) of this point.
            </summary>
            <value>The Z coordinate in world units. This represents the height/elevation above the ground plane (XY).</value>
            <remarks>
            ⚠️ Important: Z-axis is the height axis in this framework. Use this for jumping, flying, falling, and vertical positioning.
            </remarks>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Vector">
            <summary>
            Gets the 2D vector representation of this point.
            </summary>
            <value>A Vector2 containing the X and Y coordinates.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Vector3">
            <summary>
            Gets the 3D vector representation of this point.
            </summary>
            <value>A Vector3 containing the X, Y, and Z coordinates.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#BaseInterface#ITarget#Position">
            <summary>
            Gets this scene point as a target position.
            </summary>
            <value>This instance as an ITarget position.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#BaseInterface#ITarget#IsValid">
            <summary>
            Gets a value indicating whether this scene point is always valid.
            </summary>
            <value>Always returns true as scene points are inherently valid.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.GameCore#BaseInterface#ITarget#CanChangePosition">
            <summary>
            Gets a value indicating whether this scene point's position can be changed.
            </summary>
            <value>Always returns false as scene points are immutable position references.</value>
        </member>
        <member name="F:GameCore.SceneSystem.ScenePoint.Scene">
            <summary>
            Gets the scene that contains this point.
            </summary>
            <value>The scene reference for this point.</value>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.Constrained">
            <summary>
            Gets a constrained version of this point that is clamped within the scene boundaries.
            </summary>
            <value>A new ScenePoint with coordinates clamped to valid scene bounds.</value>
            <remarks>
            This property ensures that the coordinates are within the valid range of the scene,
            preventing out-of-bounds positions. The X and Y coordinates are clamped to [0, Size-1].
            </remarks>
        </member>
        <member name="P:GameCore.SceneSystem.ScenePoint.ApproachableTarget">
            <summary>
            Gets the approachable target interface for this scene point.
            </summary>
            <value>This instance as an approachable target for pathfinding.</value>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.op_Addition(GameCore.SceneSystem.ScenePoint,System.Nullable{GameCore.SceneSystem.ScenePoint})">
            <summary>
            Adds two scene points together, combining their coordinates.
            </summary>
            <param name="x">The first scene point.</param>
            <param name="y">The second scene point, or null.</param>
            <returns>A new scene point with combined coordinates.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the scene points are in different scenes.</exception>
            <remarks>
            If y is null, returns x unchanged. Otherwise, both points must be in the same scene.
            The resulting point has the sum of coordinates and Z values.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.GetGroundHeight">
            <summary>
            Gets the ground height at this scene point's X and Y coordinates.
            </summary>
            <returns>The ground height at this position.</returns>
            <remarks>
            This method queries the client-side terrain system to determine the ground height
            at the specified coordinates. It's useful for positioning objects on terrain surfaces
            and for visual effects that need to align with the ground.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Distance(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Calculates the 3D distance to another scene point.
            </summary>
            <param name="otherPoint">The other scene point to calculate distance to.</param>
            <returns>The 3D distance between points, or float.MaxValue if in different scenes.</returns>
            <remarks>
            This method calculates the Euclidean distance in 3D space including the Z coordinate.
            Points in different scenes are considered infinitely far apart.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Distance2D(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Calculates the 2D distance to another scene point (ignoring Z coordinate).
            </summary>
            <param name="otherPoint">The other scene point to calculate distance to.</param>
            <returns>The 2D distance between points, or null if in different scenes.</returns>
            <remarks>
            This method calculates the Euclidean distance using only X and Y coordinates,
            which is useful for ground-based movement and area calculations.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Distance2DSquared(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Calculates the squared 2D distance to another scene point for performance optimization.
            </summary>
            <param name="otherPoint">The other scene point to calculate distance to.</param>
            <returns>The squared 2D distance between points, or null if in different scenes.</returns>
            <remarks>
            Squared distance is computationally cheaper as it avoids the square root operation.
            This is useful for distance comparisons where the actual distance value isn't needed.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Offset(System.Numerics.Vector2)">
            <summary>
            Creates a new scene point offset by the specified 2D vector.
            </summary>
            <param name="offset">The 2D offset to apply.</param>
            <returns>A new scene point with the applied offset.</returns>
            <remarks>
            This method creates a new instance with modified X and Y coordinates.
            The Z coordinate and scene reference remain unchanged.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Offset(System.Single,System.Single)">
            <summary>
            Creates a new scene point offset by the specified X and Y amounts.
            </summary>
            <param name="x">The X offset to apply.</param>
            <param name="y">The Y offset to apply.</param>
            <returns>A new scene point with the applied offset.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Lerp(GameCore.SceneSystem.ScenePoint,System.Single)">
            <summary>
            Creates a new scene point interpolated between this point and a target point.
            </summary>
            <param name="target">The target scene point to interpolate towards.</param>
            <param name="amount">The interpolation factor between 0.0 and 1.0.</param>
            <returns>A new scene point at the interpolated position.</returns>
            <remarks>
            Linear interpolation creates smooth movement between two points. An amount of 0.0
            returns this point, 1.0 returns the target, and 0.5 returns the midpoint.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.PolarTo(GameCore.BaseType.Angle,System.Double)">
            <summary>
            Creates a new scene point at the specified angle and distance from this point.
            </summary>
            <param name="angle">The angle to move in.</param>
            <param name="distance">The distance to move.</param>
            <returns>A new scene point at the calculated position.</returns>
            <remarks>
            This method uses polar coordinates to calculate a new position relative to this point.
            If distance is zero, returns this point unchanged. The calculation is performed in 2D space.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.PolarToRadian(System.Double,System.Double)">
            <summary>
            Creates a new scene point at the specified radian angle and distance from this point.
            </summary>
            <param name="radian">The angle in radians to move in.</param>
            <param name="distance">The distance to move.</param>
            <returns>A new scene point at the calculated position.</returns>
            <remarks>
            This method performs the polar coordinate calculation using radian angle representation
            for precise mathematical operations. It's used internally by the Angle-based method.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.AngleTo(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Calculates the angle from this point to the target point.
            </summary>
            <param name="target">The target scene point to calculate angle to.</param>
            <returns>The angle to the target, or null if points are identical or in different scenes.</returns>
            <remarks>
            The angle is calculated using the arctangent of the Y and X coordinate differences.
            If the points are at the same position, no meaningful angle can be calculated.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.ToString">
            <summary>
            Returns a string representation of this scene point.
            </summary>
            <returns>A formatted string containing coordinates and scene information.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.SameScene(GameCore.BaseInterface.ITarget)">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.CanBeSeen(GameCore.EntitySystem.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.op_Addition(GameCore.SceneSystem.ScenePoint,System.Numerics.Vector2)">
            <summary>
            Adds a 2D vector offset to a scene point.
            </summary>
            <param name="point">The scene point to offset.</param>
            <param name="offset">The 2D offset vector to add.</param>
            <returns>A new scene point with the applied offset.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.op_Equality(GameCore.SceneSystem.ScenePoint,GameCore.SceneSystem.ScenePoint)">
            <summary>
            Compares two scene points for equality.
            </summary>
            <param name="left">The first scene point to compare.</param>
            <param name="right">The second scene point to compare.</param>
            <returns>True if the scene points are equal; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.op_Inequality(GameCore.SceneSystem.ScenePoint,GameCore.SceneSystem.ScenePoint)">
            <summary>
            Compares two scene points for inequality.
            </summary>
            <param name="left">The first scene point to compare.</param>
            <param name="right">The second scene point to compare.</param>
            <returns>True if the scene points are not equal; otherwise, false.</returns>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.SearchInRange(System.Single,System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Searches for entities within the specified range of this scene point.
            </summary>
            <param name="range">The search radius around this point.</param>
            <param name="filter">An optional filter to apply to found entities.</param>
            <returns>An enumerable of entities within range, or null if the scene is invalid or no entities are found.</returns>
            <remarks>
            This method provides a convenient way to perform circular area searches centered on this point.
            It delegates to the scene's search functionality with proper error handling.
            </remarks>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePoint.SearchInRange``1(System.Single,System.Func{GameCore.EntitySystem.Entity,``0})">
            <summary>
            Searches for entities within the specified range and transforms them using a morph function.
            </summary>
            <typeparam name="TMorph">The type of the transformation result.</typeparam>
            <param name="range">The search radius around this point.</param>
            <param name="morph">A function that transforms entities to the desired type or returns null.</param>
            <returns>An enumerable of transformed entities within range, or null if the scene is invalid or no entities are found.</returns>
            <remarks>
            This method combines spatial searching with type transformation, providing a convenient
            way to find and process specific types of entities within a given area.
            </remarks>
        </member>
        <member name="T:GameCore.SceneSystem.ScenePointContext">
            <summary>
            Represents a context for a scene point, including the scene point itself and a flag indicating whether to use the
            ground's Z coordinate.
            </summary>
        </member>
        <member name="M:GameCore.SceneSystem.ScenePointContext.#ctor(GameCore.SceneSystem.ScenePoint,System.Boolean)">
            <summary>
            Represents a context for a scene point, including the scene point itself and a flag indicating whether to use the
            ground's Z coordinate.
            </summary>
        </member>
        <member name="T:GameCore.ScopeData">
            <summary>
            Provides centralized access to game data links for various game systems and configurations.
            </summary>
            <remarks>
            This class acts as a registry for common game data references, organizing them into logical categories
            such as damage types, unit properties, game modes, and actor data. It implements <see cref="T:GameCore.BaseInterface.IGameClass"/>
            to participate in the game initialization process.
            </remarks>
        </member>
        <member name="T:GameCore.ScopeData.DamageType">
            <summary>
            Contains game data links for different types of damage that can be dealt in the game.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.DamageType.Physical">
            <summary>
            Physical damage type - typically reduced by armor.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.DamageType.Magical">
            <summary>
            Magical damage type - typically reduced by magic resistance.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.DamageType.Pure">
            <summary>
            Pure damage type - bypasses armor and magic resistance.
            </summary>
        </member>
        <member name="T:GameCore.ScopeData.UnitProperty">
            <summary>
            Contains game data links for unit properties that define characteristics and capabilities of game units.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.LifeMax">
            <summary>
            Maximum health points of a unit.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.ManaMax">
            <summary>
            Maximum mana points of a unit.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.Sight">
            <summary>
            Vision range of a unit.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.Armor">
            <summary>
            Physical damage reduction capability.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.MagicResistance">
            <summary>
            Magical damage reduction capability.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.MoveSpeed">
            <summary>
            Movement speed of the unit.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.ShrubSight">
            <summary>
            Vision range through shrubs and obstacles.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.Height">
            <summary>
            Physical height of the unit.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.SightBlockRadius">
            <summary>
            Radius around the unit that blocks sight.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.TurningSpeed">
            <summary>
            Speed at which the unit can rotate.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.AttackRange">
            <summary>
            Maximum distance from which the unit can attack.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.AttackDamage">
            <summary>
            The damage of the unit's attack.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.InventoryPickUpRange">
            <summary>
            Range within which the unit can pick up items.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.LevelMax">
            <summary>
            Maximum level the unit can reach.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.UnitProperty.ExperienceDistributionMultiplier">
            <summary>
            Multiplier for experience distribution calculations.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.AI.Default">
            <summary>
            Default AI for units. It just randomly cast abilities on nearby enemies.
            </summary>
        </member>
        <member name="T:GameCore.ScopeData.ActorScope">
            <summary>
            Id cannot conflict with Unit
            </summary>
        </member>
        <member name="T:GameCore.ScopeData.GameMode">
            <summary>
            Contains game data links for game mode configurations.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.GameMode.Default">
            <summary>
            The default game mode configuration.
            </summary>
        </member>
        <member name="T:GameCore.ScopeData.Gameplay">
            <summary>
            Contains game data links for gameplay settings and rules.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.Gameplay.Default">
            <summary>
            The default gameplay configuration.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.ItemQuality.Poor">
            <summary>
            垃圾品质
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.ItemQuality.Common">
            <summary>
            普通品质
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.ItemQuality.Uncommon">
            <summary>
            优秀品质
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.ItemQuality.Rare">
            <summary>
            精良品质
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.ItemQuality.Epic">
            <summary>
            史诗品质
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.ItemQuality.Legendary">
            <summary>
            传说品质
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.ItemQuality.Mythic">
            <summary>
            神话品质
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.PhysicalDamage">
            <summary>
            物理伤害
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.CriticalPhysicalDamage">
            <summary>
            物理暴击伤害
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.PhysicalAccumulated">
            <summary>
            物理伤害累计
            </summary>
            <remarks>
            通常用于短时间内多次造成伤害时，显示累计伤害
            </remarks>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.MagicDamage">
            <summary>
            魔法伤害
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.CriticalMagicDamage">
            <summary>
            魔法暴击伤害
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.MagicAccumulated">
            <summary>
            魔法伤害累计
            </summary>
            <remarks>
            通常用于短时间内多次造成伤害时，显示累计伤害
            </remarks>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.PureDamage">
            <summary>
            真实伤害
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.DamageReceived">
            <summary>
            受到伤害
            </summary>
            <remarks>
            通常显示于受到伤害方的客户端，以区分于造成伤害的漂浮文本
            </remarks>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.Heal">
            <summary>
            治疗
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.ManaSpent">
            <summary>
            法力消耗
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.Gold">
            <summary>
            金币
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.Exp">
            <summary>
            经验
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.FloatingText.Missed">
            <summary>
            未命中
            </summary>
        </member>
        <member name="T:GameCore.ScopeData.PlayerSettings">
            <summary>
            Contains game data links for player-specific settings and configurations.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.PlayerSettings.Default">
            <summary>
            The default player settings configuration.
            </summary>
        </member>
        <member name="T:GameCore.ScopeData.Rule">
            <summary>
            Contains game data links for game rules and mechanics.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.Rule.DefaultExperienceGrant">
            <summary>
            Default rules for experience point distribution.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.Rule.DefaultDisplayInfo">
            <summary>
            Default rules for display information and UI presentation.
            </summary>
        </member>
        <member name="T:GameCore.ScopeData.Actor">
            <summary>
            Contains game data links for actor system configurations.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.Actor.ScopeStaticSiteTransient">
            <summary>
            Static site actor for transient scope operations.
            </summary>
        </member>
        <member name="F:GameCore.ScopeData.Actor.ScopeStaticSitePersist">
            <summary>
            Static site actor for persistent scope operations.
            </summary>
        </member>
        <member name="M:GameCore.ScopeData.OnRegisterGameClass">
            <summary>
            Called during game class registration phase to initialize scope data.
            </summary>
        </member>
        <member name="T:GameCore.ScopeScript">
            <summary>
            Provides access to recently created game objects for scripting and debugging purposes.
            </summary>
            <remarks>
            This class maintains references to the most recently created instances of various game object types.
            It is primarily used in debugging scenarios, script execution contexts, and situations where
            immediate access to newly created objects is needed without explicit reference passing.
            The references are updated automatically by the creation systems and should be used promptly
            as they may be overwritten by subsequent object creation.
            </remarks>
        </member>
        <member name="P:GameCore.ScopeScript.LastCreatedUnit">
            <summary>
            Gets or sets the most recently created unit in the game.
            </summary>
            <value>The last created unit instance, or <c>null</c> if no unit has been created yet.</value>
            <remarks>
            This property is automatically updated whenever a new unit is created through the game's
            unit creation systems. It provides convenient access for scripts and debugging tools that
            need to reference the most recent unit without maintaining explicit references.
            </remarks>
        </member>
        <member name="P:GameCore.ScopeScript.LastCreatedActor">
            <summary>
            Gets or sets the most recently created actor in the game.
            </summary>
            <value>The last created actor instance, or <c>null</c> if no actor has been created yet.</value>
            <remarks>
            This property is automatically updated whenever a new actor is created through the game's
            actor creation systems. Actors represent visual and interactive elements in the game world,
            and this reference is useful for immediate manipulation or attachment operations.
            </remarks>
        </member>
        <member name="P:GameCore.ScopeScript.LastCreatedItem">
            <summary>
            Gets or sets the most recently created item in the game.
            </summary>
            <value>The last created item instance, or <c>null</c> if no item has been created yet.</value>
            <remarks>
            This property is automatically updated whenever a new item is created through the game's
            item creation systems. Items represent collectible objects, equipment, and other inventory
            entities in the game world.
            </remarks>
        </member>
        <member name="T:GameCore.Shape.AIShapeComposer">
            <summary>
            AI助手专用的形状组合工具，提供预定义的复杂对象组合模板
            </summary>
            <remarks>
            这个组合器为AI助手提供了快速创建复杂对象的能力，通过组合多个基本形状
            来构建角色、建筑、载具等复杂物体。每个组合都有清晰的语义含义，
            便于AI理解和使用。
            </remarks>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateSimpleCharacter(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建简单的人形角色（头+身体）
            </summary>
            <param name="position">角色位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>角色部件列表（[0]=身体, [1]=头部）</returns>
            <example>
            <code>
            // AI示例：创建玩家角色
            var player = AIShapeComposer.CreateSimpleCharacter(spawnPoint, playerScope);
            var body = player[0];  // 身体
            var head = player[1];  // 头部
            </code>
            </example>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateRobotCharacter(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建机器人角色（更加几何化）
            </summary>
            <param name="position">机器人位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>机器人部件列表（[0]=身体, [1]=头部, [2]=左臂, [3]=右臂）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateSimpleHouse(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建简单房屋（墙+屋顶）
            </summary>
            <param name="position">房屋位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>建筑部件列表（[0]=墙壁, [1]=屋顶）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateCastleTower(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建城堡塔楼
            </summary>
            <param name="position">塔楼位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>塔楼部件列表（[0]=基座, [1]=塔身, [2]=塔顶）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateSimpleCar(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建简单汽车
            </summary>
            <param name="position">汽车位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>汽车部件列表（[0]=车身, [1-4]=轮子）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateSimpleSpaceship(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建简单飞船
            </summary>
            <param name="position">飞船位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>飞船部件列表（[0]=船身, [1]=尾翼, [2]=引擎）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateSimpleTree(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建简单树木
            </summary>
            <param name="position">树木位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>树木部件列表（[0]=树干, [1]=树冠）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateStreetLight(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建路灯
            </summary>
            <param name="position">路灯位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>路灯部件列表（[0]=灯柱, [1]=灯泡）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateSimpleTurret(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建简单炮塔
            </summary>
            <param name="position">炮塔位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>炮塔部件列表（[0]=基座, [1]=炮管）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateCollectibleAltar(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope,System.Single)">
            <summary>
            创建收集品祭坛
            </summary>
            <param name="position">祭坛位置</param>
            <param name="scope">作用域</param>
            <param name="scale">整体缩放</param>
            <returns>祭坛部件列表（[0]=基座, [1]=收集品）</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateForest(GameCore.SceneSystem.ScenePoint,System.Single,System.Int32,GameCore.ActorSystem.IActorScope)">
            <summary>
            创建对象森林（随机分布的树木）
            </summary>
            <param name="centerPosition">森林中心位置</param>
            <param name="radius">森林半径</param>
            <param name="treeCount">树木数量</param>
            <param name="scope">作用域</param>
            <returns>所有树木的部件列表</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeComposer.CreateCityBlock(GameCore.SceneSystem.ScenePoint,System.ValueTuple{System.Int32,System.Int32},System.Single,GameCore.ActorSystem.IActorScope)">
            <summary>
            创建城市街区（房屋+路灯）
            </summary>
            <param name="centerPosition">街区中心位置</param>
            <param name="gridSize">街区网格大小</param>
            <param name="spacing">建筑间距</param>
            <param name="scope">作用域</param>
            <returns>所有建筑的部件列表</returns>
        </member>
        <member name="T:GameCore.Shape.AIShapeFactory">
            <summary>
            AI助手专用的3D形状创建工厂，提供简单易用的API来快速创建基本形状
            </summary>
            <remarks>
            这个工厂类是为AI助手设计的，提供了语义化、直观的API来创建3D形状。
            AI可以通过简单的方法调用快速搭建游戏原型，而无需深入了解复杂的底层系统。
            支持智能默认颜色、自动尺寸调整和灵活的自定义选项。
            </remarks>
        </member>
        <member name="P:GameCore.Shape.AIShapeFactory.DefaultColorMode">
            <summary>
            默认的形状颜色模式
            </summary>
        </member>
        <member name="P:GameCore.Shape.AIShapeFactory.DefaultColorTheme">
            <summary>
            默认的颜色主题
            </summary>
        </member>
        <member name="P:GameCore.Shape.AIShapeFactory.EnableAutoTint">
            <summary>
            是否启用自动染色设置（推荐用于AI快速原型）
            </summary>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateShape(GameCore.Shape.Data.PrimitiveShape,GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope)">
            <summary>
            创建基本形状Actor（最简单的API）
            </summary>
            <param name="shape">要创建的形状类型</param>
            <param name="position">世界位置，使用Vector3(x, y, z)格式，其中XY为地面坐标，Z为高度</param>
            <param name="scope">Actor作用域，null表示无作用域</param>
            <returns>创建的形状Actor</returns>
            <remarks>
            ⚠️ 坐标系统重要提醒：
            - X轴：水平方向（左右）
            - Y轴：水平方向（前后）
            - Z轴：高度方向（上下，跳跃轴）
            - XY平面：地面
            </remarks>
            <example>
            <code>
            // AI示例：在地面创建球体
            var groundBall = AIShapeFactory.CreateShape(PrimitiveShape.Sphere, 
                new ScenePoint(new Vector3(100, 200, 0), scene));
            
            // AI示例：在空中创建跳跃角色
            var jumpingCharacter = AIShapeFactory.CreateShape(PrimitiveShape.Capsule, 
                new ScenePoint(new Vector3(100, 200, 50), scene), playerScope);
            </code>
            </example>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateShape(GameCore.Shape.Data.PrimitiveShape,GameCore.SceneSystem.ScenePoint,GameCore.Shape.Data.ShapeColorMode,GameCore.ActorSystem.IActorScope)">
            <summary>
            创建指定颜色模式的形状
            </summary>
            <param name="shape">要创建的形状类型</param>
            <param name="position">世界位置</param>
            <param name="colorMode">颜色模式</param>
            <param name="scope">Actor作用域</param>
            <returns>创建的形状Actor</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateShape(GameCore.Shape.Data.PrimitiveShape,GameCore.SceneSystem.ScenePoint,System.Numerics.Vector3,GameCore.ActorSystem.IActorScope)">
            <summary>
            创建带缩放的形状
            </summary>
            <param name="shape">要创建的形状类型</param>
            <param name="position">世界位置</param>
            <param name="scale">缩放系数</param>
            <param name="scope">Actor作用域</param>
            <returns>创建的形状Actor</returns>
            <example>
            <code>
            // AI示例：创建一个巨大的立方体建筑
            var building = AIShapeFactory.CreateShape(
                PrimitiveShape.Cube, 
                buildingPosition, 
                new Vector3(3f, 3f, 2f)); // 3倍宽高，2倍高度
            </code>
            </example>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateColoredShape(GameCore.Shape.Data.PrimitiveShape,GameCore.SceneSystem.ScenePoint,GameCore.Drawing.HdrColor,GameCore.ActorSystem.IActorScope)">
            <summary>
            创建自定义颜色的形状
            </summary>
            <param name="shape">要创建的形状类型</param>
            <param name="position">世界位置</param>
            <param name="color">自定义颜色</param>
            <param name="scope">Actor作用域</param>
            <returns>创建的形状Actor</returns>
            <example>
            <code>
            // AI示例：创建一个金色的收集品
            var collectible = AIShapeFactory.CreateColoredShape(
                PrimitiveShape.Sphere, 
                itemPosition, 
                new HdrColor(Color.Gold));
            </code>
            </example>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateThemedShape(GameCore.Shape.Data.PrimitiveShape,GameCore.SceneSystem.ScenePoint,GameCore.Shape.Data.ShapeColorTheme,GameCore.ActorSystem.IActorScope)">
            <summary>
            创建指定主题的形状
            </summary>
            <param name="shape">要创建的形状类型</param>
            <param name="position">世界位置</param>
            <param name="theme">颜色主题</param>
            <param name="scope">Actor作用域</param>
            <returns>创建的形状Actor</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreatePlayer(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope)">
            <summary>
            快速创建玩家角色（蓝色胶囊）
            </summary>
            <param name="position">出生位置。注意：使用Vector3(x, y, z)，其中XY为地面位置，Z为高度</param>
            <param name="scope">角色作用域</param>
            <returns>角色Actor</returns>
            <remarks>
            坐标系统提醒：WasiCore使用Z轴作为高度轴，XY平面为地面。
            示例：new ScenePoint(new Vector3(100, 200, 0), scene) 表示在地面位置(100,200)创建角色。
            </remarks>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateEnemy(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope)">
            <summary>
            快速创建敌人（红色球体）
            </summary>
            <param name="position">敌人位置</param>
            <param name="scope">敌人作用域</param>
            <returns>敌人Actor</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateObstacle(GameCore.SceneSystem.ScenePoint,System.Nullable{System.Numerics.Vector3},GameCore.ActorSystem.IActorScope)">
            <summary>
            快速创建障碍物（灰色立方体）
            </summary>
            <param name="position">障碍物位置</param>
            <param name="scale">障碍物大小</param>
            <param name="scope">作用域</param>
            <returns>障碍物Actor</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateCollectible(GameCore.SceneSystem.ScenePoint,GameCore.ActorSystem.IActorScope)">
            <summary>
            快速创建收集品（黄色圆锥）
            </summary>
            <param name="position">收集品位置</param>
            <param name="scope">作用域</param>
            <returns>收集品Actor</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreatePlatform(GameCore.SceneSystem.ScenePoint,System.Nullable{System.Numerics.Vector3},GameCore.ActorSystem.IActorScope)">
            <summary>
            快速创建平台（棕色平面）
            </summary>
            <param name="position">平台位置。Z坐标决定平台高度</param>
            <param name="scale">平台大小。格式：Vector3(宽度, 深度, 厚度)，注意Z为厚度</param>
            <param name="scope">作用域</param>
            <returns>平台Actor</returns>
            <remarks>
            坐标提醒：平台位置的Z值决定其在空间中的高度。
            缩放提醒：scale.X和scale.Y控制平台在地面的大小，scale.Z控制厚度。
            </remarks>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateShapes(GameCore.Shape.Data.PrimitiveShape,System.Collections.Generic.IEnumerable{GameCore.SceneSystem.ScenePoint},GameCore.ActorSystem.IActorScope)">
            <summary>
            批量创建相同形状的Actor
            </summary>
            <param name="shape">形状类型</param>
            <param name="positions">位置列表</param>
            <param name="scope">作用域</param>
            <returns>创建的Actor列表</returns>
            <example>
            <code>
            // AI示例：创建一排障碍物
            var obstaclePositions = GenerateLinePositions(start, end, count: 5);
            var obstacles = AIShapeFactory.CreateShapes(
                PrimitiveShape.Cube, 
                obstaclePositions);
            </code>
            </example>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateShapeGrid(GameCore.Shape.Data.PrimitiveShape,GameCore.SceneSystem.ScenePoint,System.ValueTuple{System.Int32,System.Int32},System.Single,GameCore.ActorSystem.IActorScope)">
            <summary>
            在网格位置创建形状阵列
            </summary>
            <param name="shape">形状类型</param>
            <param name="centerPosition">网格中心位置</param>
            <param name="gridSize">网格大小（宽x高）</param>
            <param name="spacing">网格间距</param>
            <param name="scope">作用域</param>
            <returns>创建的Actor列表</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.CreateShapeInternal(GameCore.Shape.Data.PrimitiveShape,GameCore.Shape.Data.ShapeColorMode,GameCore.Shape.Data.ShapeColorTheme,GameCore.ActorSystem.IActorScope)">
            <summary>
            内部形状创建实现
            </summary>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.GetShapeActorLink(GameCore.Shape.Data.PrimitiveShape,GameCore.Shape.Data.ShapeColorTheme)">
            <summary>
            获取形状的Actor数据链接
            </summary>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.ApplyShapeColor(GameCore.ActorSystem.ActorModel,GameCore.Shape.Data.PrimitiveShape,GameCore.Shape.Data.ShapeColorMode,GameCore.Shape.Data.ShapeColorTheme)">
            <summary>
            应用形状颜色
            </summary>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.GetShapeUsageHint(GameCore.Shape.Data.PrimitiveShape)">
            <summary>
            获取形状的推荐用途描述
            </summary>
            <param name="shape">形状类型</param>
            <returns>用途描述字符串</returns>
        </member>
        <member name="M:GameCore.Shape.AIShapeFactory.GetAllShapeHints">
            <summary>
            列出所有可用的形状和其用途
            </summary>
            <returns>形状用途映射</returns>
        </member>
        <member name="T:GameCore.Shape.AIUnitShapeFactory">
            <summary>
            AI友好的单位形状工厂，用于为游戏单位附着基本几何形状
            </summary>
            <remarks>
            这个工厂专门处理单位（Unit）与基本形状的结合，提供简单的API让AI助手
            能够快速为单位添加临时的视觉表现。支持形状切换、组合和动态调整。
            </remarks>
        </member>
        <member name="M:GameCore.Shape.AIUnitShapeFactory.AttachShapeToUnit(GameCore.EntitySystem.Unit,GameCore.Shape.Data.PrimitiveShape,System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Vector3},System.Nullable{GameCore.Shape.Data.ShapeColorMode},System.Nullable{GameCore.Shape.Data.ShapeColorTheme},System.Object)">
            <summary>
            为单位附着单个基本形状
            </summary>
            <param name="unit">目标单位</param>
            <param name="shape">要附着的形状</param>
            <param name="offset">相对于单位原点的偏移</param>
            <param name="scale">形状缩放（null使用默认值）</param>
            <param name="colorMode">颜色模式（null使用默认值）</param>
            <param name="theme">颜色主题（null使用默认值）</param>
            <param name="tag">标识符，用于后续管理（null使用默认值）</param>
            <returns>创建的形状Actor</returns>
        </member>
        <member name="M:GameCore.Shape.AIUnitShapeFactory.AttachCompositeShapeToUnit(GameCore.EntitySystem.Unit,GameCore.Shape.ShapeConfig[])">
            <summary>
            为单位附着复合形状（多个形状组合）
            </summary>
            <param name="unit">目标单位</param>
            <param name="shapeConfig">形状配置列表</param>
            <returns>创建的所有形状Actor列表</returns>
        </member>
        <member name="M:GameCore.Shape.AIUnitShapeFactory.AttachUnitTemplate(GameCore.EntitySystem.Unit,GameCore.Shape.UnitShapeTemplate,System.Single)">
            <summary>
            使用预定义的单位形状模板
            </summary>
            <param name="unit">目标单位</param>
            <param name="template">形状模板</param>
            <param name="scale">整体缩放</param>
            <returns>创建的形状Actor列表</returns>
        </member>
        <member name="M:GameCore.Shape.AIUnitShapeFactory.ClearUnitShapes(GameCore.EntitySystem.Unit)">
            <summary>
            移除单位上的所有附着形状
            </summary>
            <param name="unit">目标单位</param>
        </member>
        <member name="M:GameCore.Shape.AIUnitShapeFactory.ApplyShapeColor(GameCore.ActorSystem.ActorModel,GameCore.Shape.Data.PrimitiveShape,GameCore.Shape.Data.ShapeColorMode,GameCore.Shape.Data.ShapeColorTheme)">
            <summary>
            为形状Actor应用颜色（使用TintColor机制）
            </summary>
            <param name="actor">目标形状Actor</param>
            <param name="shape">形状类型</param>
            <param name="colorMode">颜色模式</param>
            <param name="theme">颜色主题</param>
        </member>
        <member name="M:GameCore.Shape.AIUnitShapeFactory.SetShapeColor(GameCore.ActorSystem.ActorModel,GameCore.Drawing.HdrColor,System.String)">
            <summary>
            为形状Actor设置自定义颜色（使用TintColor机制）
            </summary>
            <param name="actor">目标形状Actor</param>
            <param name="color">自定义颜色</param>
            <param name="tag">标识符</param>
        </member>
        <member name="M:GameCore.Shape.AIUnitShapeFactory.ClearShapeColor(GameCore.ActorSystem.ActorModel,System.String)">
            <summary>
            清除形状Actor的颜色染色
            </summary>
            <param name="actor">目标形状Actor</param>
            <param name="tag">要清除的标识符，null表示清除所有</param>
        </member>
        <member name="T:GameCore.Shape.ShapeConfig">
            <summary>
            形状配置结构，用于复合形状创建
            </summary>
        </member>
        <member name="T:GameCore.Shape.UnitShapeTemplate">
            <summary>
            预定义的单位形状模板
            </summary>
        </member>
        <member name="F:GameCore.Shape.UnitShapeTemplate.SimpleCharacter">
            <summary>简单角色（胶囊身体+球体头部）</summary>
        </member>
        <member name="F:GameCore.Shape.UnitShapeTemplate.FlyingOrb">
            <summary>飞行球体（单个球体）</summary>
        </member>
        <member name="F:GameCore.Shape.UnitShapeTemplate.Vehicle">
            <summary>载具（立方体）</summary>
        </member>
        <member name="F:GameCore.Shape.UnitShapeTemplate.Tower">
            <summary>塔楼（圆柱体）</summary>
        </member>
        <member name="T:GameCore.Shape.Data.PrimitiveColorScheme">
            <summary>
            基本形状的智能颜色方案管理器，为AI助手提供语义化的默认颜色
            </summary>
            <remarks>
            该类基于认知心理学和游戏设计惯例，为不同形状分配直观的默认颜色。
            支持多种主题，可以根据项目需求切换不同的配色方案。
            </remarks>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveColorScheme.CurrentTheme">
            <summary>
            当前使用的颜色主题
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveColorScheme.StandardColors">
            <summary>
            标准主题 - 基于通用认知和文化习惯
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveColorScheme.GamingColors">
            <summary>
            游戏主题 - 基于游戏设计惯例
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveColorScheme.EducationalColors">
            <summary>
            教育主题 - 明亮且易于区分的颜色
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveColorScheme.NaturalColors">
            <summary>
            自然主题 - 基于自然元素的颜色
            </summary>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveColorScheme.GetDefaultColor(GameCore.Shape.Data.PrimitiveShape)">
            <summary>
            获取指定形状在当前主题下的默认颜色
            </summary>
            <param name="shape">要获取颜色的形状</param>
            <returns>该形状的默认HDR颜色</returns>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveColorScheme.GetColor(GameCore.Shape.Data.PrimitiveShape,GameCore.Shape.Data.ShapeColorTheme)">
            <summary>
            获取指定主题下的形状颜色
            </summary>
            <param name="shape">要获取颜色的形状</param>
            <param name="theme">指定的颜色主题</param>
            <returns>该形状在指定主题下的HDR颜色</returns>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveColorScheme.GenerateRandomColor">
            <summary>
            生成随机颜色（用于调试模式）
            </summary>
            <returns>随机的HDR颜色</returns>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveColorScheme.GetAllShapeColors">
            <summary>
            获取所有可用的形状及其当前主题下的颜色
            </summary>
            <returns>形状到颜色的映射字典</returns>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveColorScheme.GetShapeDescription(GameCore.Shape.Data.PrimitiveShape)">
            <summary>
            获取形状的语义化描述（包含颜色信息）
            </summary>
            <param name="shape">要描述的形状</param>
            <returns>包含颜色和用途的描述字符串</returns>
        </member>
        <member name="T:GameCore.Shape.Data.PrimitiveShape">
            <summary>
            定义可用的基本3D形状类型，适用于AI助手快速游戏原型开发
            </summary>
            <remarks>
            所有形状都基于标准尺寸：圆形底面直径100（半径50），方形底面边长100。
            这个枚举为AI助手提供语义化的形状选择，便于快速识别和使用。
            </remarks>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Sphere">
            <summary>
            球体 - 直径100（半径50），原点在球心
            <para>适用场景：球类、星球、泡泡、弹珠、敌人</para>
            <para>默认颜色：红色</para>
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Cube">
            <summary>
            立方体 - 边长100，原点在底面中心
            <para>适用场景：箱子、建筑块、方形障碍物、容器</para>
            <para>默认颜色：橙色</para>
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Cylinder">
            <summary>
            圆柱体 - 底面直径100（半径50），高度100，原点在底面圆心
            <para>适用场景：柱子、管道、炮筒、圆形建筑</para>
            <para>默认颜色：灰色</para>
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Plane">
            <summary>
            平面 - 边长100的正方形，原点在几何中心
            <para>适用场景：地面、墙壁、平台、水面</para>
            <para>默认颜色：棕色</para>
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Cone">
            <summary>
            圆锥 - 底面直径100（半径50），高度100，原点在底面圆心
            <para>适用场景：箭头指示、山峰、帽子、警示标志</para>
            <para>默认颜色：黄色</para>
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Capsule">
            <summary>
            胶囊 - 直径100（半径50），总高度200，原点在底端圆心
            <para>适用场景：角色身体、子弹、药丸、玩家</para>
            <para>默认颜色：蓝色</para>
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Pyramid">
            <summary>
            方形金字塔 - 底面边长100，高度100，原点在底面中心
            <para>适用场景：古代建筑、堆积物、尖顶建筑</para>
            <para>默认颜色：沙黄色</para>
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Torus">
            <summary>
            环形（甜甜圈） - 外径100，高度40，原点在几何中心
            <para>适用场景：甜甜圈、轮胎、环状装饰</para>
            <para>默认颜色：紫色</para>
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShape.Wedge">
            <summary>
            楔形 - 底面边长100，高度100，原点在底面后端中心
            <para>适用场景：坡道、楔子、斜面</para>
            <para>默认颜色：绿色</para>
            </summary>
        </member>
        <member name="T:GameCore.Shape.Data.ShapeColorMode">
            <summary>
            形状颜色模式，决定基本形状的默认着色方案
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.ShapeColorMode.SmartDefaults">
            <summary>
            智能默认颜色 - AI友好，每种形状有不同的语义化默认色
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.ShapeColorMode.PureWhite">
            <summary>
            纯白色 - 适合需要自定义材质的场景
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.ShapeColorMode.RandomColors">
            <summary>
            随机颜色 - 便于调试时区分不同实例
            </summary>
        </member>
        <member name="T:GameCore.Shape.Data.ShapeColorTheme">
            <summary>
            预定义的形状颜色主题
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.ShapeColorTheme.Standard">
            <summary>
            标准主题 - 基于通用认知的颜色
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.ShapeColorTheme.Gaming">
            <summary>
            游戏主题 - 基于游戏惯例的颜色
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.ShapeColorTheme.Educational">
            <summary>
            教育主题 - 明亮且易于区分的颜色
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.ShapeColorTheme.Natural">
            <summary>
            自然主题 - 基于自然元素的颜色
            </summary>
        </member>
        <member name="T:GameCore.Shape.Data.PrimitiveShapeConfig">
            <summary>
            基本几何形状配置数据（用于GameData序列化）
            </summary>
            <remarks>
            这个配置类用于在GameDataUnit中定义单位的基本几何形状。
            当单位在客户端创建时，会根据这些配置自动生成相应的形状表现。
            </remarks>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.Shape">
            <summary>
            形状类型
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.Offset">
            <summary>
            相对于单位原点的偏移位置
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.Scale">
            <summary>
            形状的缩放比例
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.Rotation">
            <summary>
            形状的旋转角度（欧拉角，度数）
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.ColorMode">
            <summary>
            颜色模式
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.ColorTheme">
            <summary>
            颜色主题
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.CustomColor">
            <summary>
            自定义颜色（如果设置，将覆盖颜色模式）
            </summary>
            <remarks>
            当此字段不为null时，将忽略ColorMode和ColorTheme设置，
            直接使用指定的自定义颜色。
            </remarks>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.AttachToRoot">
            <summary>
            是否附着到根单位
            </summary>
            <remarks>
            true：附着到单位本身的原点
            false：附着到前一个创建的形状（用于复合形状）
            </remarks>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.Tag">
            <summary>
            形状标识符，用于后续管理和引用
            </summary>
            <remarks>
            可以用于后续通过代码动态修改或移除特定的形状。
            如果为空，将自动生成一个基于形状类型的标识符。
            </remarks>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.Priority">
            <summary>
            形状优先级（数值越大越后创建，影响附着顺序）
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeConfig.EnableCollision">
            <summary>
            是否启用碰撞检测
            </summary>
            <remarks>
            注意：基本形状通常只用于视觉表现，不建议启用碰撞。
            单位的碰撞应该由其他系统管理。
            </remarks>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeConfig.ToRuntimeConfig">
            <summary>
            创建运行时ShapeConfig（仅客户端可用）
            </summary>
            <returns>用于AIUnitShapeFactory的运行时配置</returns>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeConfig.IsValid">
            <summary>
            验证配置的有效性
            </summary>
            <returns>配置是否有效</returns>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeConfig.GetEffectiveTag(System.Int32)">
            <summary>
            获取有效的标识符
            </summary>
            <param name="index">形状索引，用于生成默认标识符</param>
            <returns>形状标识符</returns>
        </member>
        <member name="T:GameCore.Shape.Data.PrimitiveShapeRegistry">
            <summary>
            基本形状的数据注册系统，负责在游戏初始化时创建所有基本形状的GameData
            </summary>
            <remarks>
            该系统使用框架的IGameClass自动注册机制，在游戏启动时自动创建所有基本形状的
            GameDataModel和GameDataActorModel数据。支持多种颜色主题和尺寸配置。
            </remarks>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShapeRegistry.STANDARD_RADIUS">
            <summary>
            基本形状的标准半径（对应直径100的圆形）
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShapeRegistry.STANDARD_SIZE">
            <summary>
            基本形状的标准边长（方形底面）
            </summary>
        </member>
        <member name="F:GameCore.Shape.Data.PrimitiveShapeRegistry.STANDARD_HEIGHT">
            <summary>
            基本形状的标准高度
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeRegistry.ModelLinks">
            <summary>
            形状模型数据的链接映射
            </summary>
        </member>
        <member name="P:GameCore.Shape.Data.PrimitiveShapeRegistry.ActorLinks">
            <summary>
            形状Actor数据的链接映射（按颜色主题分组）
            </summary>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeRegistry.CreateAllShapeData">
            <summary>
            创建所有基本形状的数据
            </summary>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeRegistry.CreateShapeModels">
            <summary>
            创建所有形状的模型数据
            </summary>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeRegistry.CreateShapeModel(GameCore.Shape.Data.PrimitiveShape)">
            <summary>
            创建单个形状的模型数据
            </summary>
            <param name="shape">要创建的形状类型</param>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeRegistry.CreateShapeActors">
            <summary>
            创建所有主题下的形状Actor数据
            </summary>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeRegistry.CreateShapeActor(GameCore.Shape.Data.PrimitiveShape,GameCore.Shape.Data.ShapeColorTheme)">
            <summary>
            创建单个形状在指定主题下的Actor数据
            </summary>
            <param name="shape">形状类型</param>
            <param name="theme">颜色主题</param>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeRegistry.GetShapeAssetPath(GameCore.Shape.Data.PrimitiveShape)">
            <summary>
            获取形状的资源路径
            </summary>
            <param name="shape">形状类型</param>
            <returns>模型资源路径</returns>
        </member>
        <member name="M:GameCore.Shape.Data.PrimitiveShapeRegistry.GetShapeGeometryInfo(GameCore.Shape.Data.PrimitiveShape)">
            <summary>
            获取形状的几何信息
            </summary>
            <param name="shape">形状类型</param>
            <returns>包含尺寸和碰撞信息的结构</returns>
        </member>
        <member name="T:GameCore.Shape.Data.ShapeGeometryInfo">
            <summary>
            形状几何信息结构
            </summary>
        </member>
        <member name="T:GameCore.Shape.Region">
            <summary>
            Abstract base class representing a geometric region within a scene.
            Provides a common interface for region types (such as circles and rectangles) to define spatial properties,
            containment logic, and entity queries within the region.
            </summary>
        </member>
        <member name="P:GameCore.Shape.Region.Position">
            <summary>
            Gets the position of the region, typically representing its origin or anchor point.
            </summary>
        </member>
        <member name="P:GameCore.Shape.Region.Center">
            <summary>
            Gets the center point of the region.
            </summary>
        </member>
        <member name="M:GameCore.Shape.Region.Contains(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Determines whether the specified point is contained within the region.
            </summary>
            <param name="point">The point to check for containment.</param>
            <returns><c>true</c> if the point is within the region; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GameCore.Shape.Region.Contains(GameCore.EntitySystem.Entity)">
            <summary>
            Determines whether the specified entity is contained within the region.
            </summary>
            <param name="entity">The entity to check for containment.</param>
            <returns><c>true</c> if the entity is within the region; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GameCore.Shape.Region.FilterEntities(System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Returns all entities within the region that satisfy the specified condition.
            </summary>
            <param name="condition">A predicate to filter entities; if <c>null</c>, all entities within the region are returned.</param>
            <returns>An enumerable of entities within the region that match the condition, or <c>null</c> if none found.</returns>
        </member>
        <member name="M:GameCore.Shape.Region.FilterEntities``1(System.Func{GameCore.EntitySystem.Entity,``0})">
            <summary>
            Returns all entities within the region that can be transformed to the specified type and satisfy the given condition.
            </summary>
            <typeparam name="TMorph">
            The target type to which entities are transformed. Only entities for which the <paramref name="condition"/> returns a non-null value are included.
            </typeparam>
            <param name="condition">
            A transformation function that takes an <see cref="T:GameCore.EntitySystem.Entity"/> and returns a <typeparamref name="TMorph"/> instance or <c>null</c>.
            If <c>null</c> is returned, the entity is excluded from the result.
            </param>
            <returns>
            An enumerable of <typeparamref name="TMorph"/> instances representing entities within the region that match the transformation condition,
            or <c>null</c> if none are found.
            </returns>
        </member>
        <member name="T:GameCore.Shape.RegionCircle">
            <summary>
            Represents a circular region in a scene, defined by a center point and a radius.
            Provides geometric properties and methods for containment checks and entity queries within the region.
            </summary>
        </member>
        <member name="M:GameCore.Shape.RegionCircle.#ctor(GameCore.SceneSystem.ScenePoint,System.Single)">
            <summary>
            Represents a circular region in a scene, defined by a center point and a radius.
            Provides geometric properties and methods for containment checks and entity queries within the region.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionCircle.Center">
            <summary>
            Gets the center point of the circle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionCircle.Position">
            <summary>
            Gets the position of the circle (same as the center).
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionCircle.Radius">
            <summary>
            Gets the radius of the circle.
            </summary>
        </member>
        <member name="M:GameCore.Shape.RegionCircle.Contains(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Determines whether the specified point is contained within the circle.
            </summary>
            <param name="point">The point to check for containment.</param>
            <returns><c>true</c> if the point is within the circle and in the same scene; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GameCore.Shape.RegionCircle.ToString">
            <summary>
            Returns a string representation of the circle region.
            </summary>
            <returns>A string describing the circle's position and radius.</returns>
        </member>
        <member name="P:GameCore.Shape.RegionCircle.Diameter">
            <summary>
            Gets the diameter of the circle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionCircle.Circumference">
            <summary>
            Gets the circumference of the circle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionCircle.Area">
            <summary>
            Gets the area of the circle.
            </summary>  
        </member>
        <member name="M:GameCore.Shape.RegionCircle.FilterEntities(System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Returns all entities within the circle that satisfy the specified condition.
            </summary>
            <param name="condition">A predicate to filter entities; if <c>null</c>, all entities within the circle are returned.</param>
            <returns>An enumerable of entities within the circle that match the condition, or <c>null</c> if none found.</returns>
        </member>
        <member name="M:GameCore.Shape.RegionCircle.FilterEntities``1(System.Func{GameCore.EntitySystem.Entity,``0})">
            <summary>
            Returns all entities within the circle that can be transformed to the specified type and satisfy the given condition.
            </summary>
            <typeparam name="TMorph">
            The target type to which entities are transformed. Only entities for which the <paramref name="condition"/> returns a non-null value are included.
            </typeparam>
            <param name="condition">
            A transformation function that takes an <see cref="T:GameCore.EntitySystem.Entity"/> and returns a <typeparamref name="TMorph"/> instance or <c>null</c>.
            If <c>null</c> is returned, the entity is excluded from the result.
            </param>
            <returns>
            An enumerable of <typeparamref name="TMorph"/> instances representing entities within the circle that match the transformation condition,
            or <c>null</c> if none are found.
            </returns>
        </member>
        <member name="T:GameCore.Shape.RegionRectangle">
            <summary>
            Represents a rectangular region in a scene, defined by a position and size.
            Provides geometric properties and methods for containment checks and entity queries within the region.
            </summary>
        </member>
        <member name="M:GameCore.Shape.RegionRectangle.#ctor(GameCore.SceneSystem.ScenePoint,System.Numerics.Vector2)">
            <summary>
            Represents a rectangular region in a scene, defined by a position and size.
            Provides geometric properties and methods for containment checks and entity queries within the region.
            </summary>
        </member>
        <member name="M:GameCore.Shape.RegionRectangle.#ctor(GameCore.SceneSystem.ScenePoint,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.Shape.RegionRectangle"/> class with the specified position, width, and height.
            </summary>
            <param name="position">The position of the rectangle (top-left corner).</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.Position">
            <summary>
            Gets the position of the rectangle (top-left corner).
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.Size">
            <summary>
            Gets the size of the rectangle as a <see cref="T:System.Numerics.Vector2"/> (X: width, Y: height).
            </summary>
        </member>
        <member name="M:GameCore.Shape.RegionRectangle.Contains(GameCore.SceneSystem.ScenePoint)">
            <summary>
            Determines whether the specified point is contained within the rectangle.
            </summary>
            <param name="point">The point to check for containment.</param>
            <returns><c>true</c> if the point is within the rectangle and in the same scene; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GameCore.Shape.RegionRectangle.ToString">
            <summary>
            Returns a string representation of the rectangle region.
            </summary>
            <returns>A string describing the rectangle's position and size.</returns>
        </member>
        <member name="M:GameCore.Shape.RegionRectangle.Contains(GameCore.EntitySystem.Entity)">
            <summary>
            Determines whether the specified entity is contained within the rectangle.
            </summary>
            <param name="entity">The entity to check for containment.</param>
            <returns><c>true</c> if the entity is within the rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GameCore.Shape.RegionRectangle.FilterEntities(System.Func{GameCore.EntitySystem.Entity,System.Boolean})">
            <summary>
            Returns all entities within the rectangle that satisfy the specified condition.
            </summary>
            <param name="condition">A predicate to filter entities; if <c>null</c>, all entities within the rectangle are returned.</param>
            <returns>An enumerable of entities within the rectangle that match the condition, or <c>null</c> if none found.</returns>
        </member>
        <member name="M:GameCore.Shape.RegionRectangle.FilterEntities``1(System.Func{GameCore.EntitySystem.Entity,``0})">
            <summary>
            Returns all entities within the rectangle that can be transformed to the specified type and satisfy the given condition.
            </summary>
            <typeparam name="TMorph">
            The target type to which entities are transformed. Only entities for which the <paramref name="condition"/> returns a non-null value are included.
            </typeparam>
            <param name="condition">
            A transformation function that takes an <see cref="T:GameCore.EntitySystem.Entity"/> and returns a <typeparamref name="TMorph"/> instance or <c>null</c>.
            If <c>null</c> is returned, the entity is excluded from the result.
            </param>
            <returns>
            An enumerable of <typeparamref name="TMorph"/> instances representing entities within the rectangle that match the transformation condition,
            or <c>null</c> if none are found.
            </returns>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.Height">
            <summary>
            Gets the height of the rectangle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.Width">
            <summary>
            Gets the width of the rectangle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.Center">
            <summary>
            Gets the center point of the rectangle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.TopLeft">
            <summary>
            Gets the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.TopRight">
            <summary>
            Gets the top-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.BottomLeft">
            <summary>
            Gets the bottom-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:GameCore.Shape.RegionRectangle.BottomRight">
            <summary>
            Gets the bottom-right corner of the rectangle.
            </summary>
        </member>
        <member name="T:GameCore.Standard.DoubleUtilities">
            <summary>
            DoubleUtil uses fixed eps to provide fuzzy comparison functionality for doubles.
            Note that FP noise is a big problem and using any of these compare 
            methods is not a complete solution, but rather the way to reduce 
            the probability of repeating unnecessary work.
            </summary>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.IsOne(System.Double)">
            <summary>
            IsOne - Returns whether or not the double is "close" to 1.  Same as AreClose(double, 1),
            but this is faster.
            </summary>
            <returns>
            bool - the result of the AreClose comparison.
            </returns>
            <param name="value"> The double to compare to 1. </param>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.IsZero(System.Double)">
            <summary>
            IsZero - Returns whether or not the double is "close" to 0.  Same as AreClose(double, 0),
            but this is faster.
            </summary>
            <returns>
            bool - the result of the AreClose comparison.
            </returns>
            <param name="value"> The double to compare to 0. </param>
        </member>
        <member name="F:GameCore.Standard.DoubleUtilities.Epsilon">
            <summary>
            Epsilon - more or less random, more or less small number.
            </summary>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.AreClose(System.Double,System.Double)">
            <summary>
            AreClose returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false. 
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the AreClose comparison.</returns>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.LessThan(System.Double,System.Double)">
            <summary>
            LessThan returns whether or not the first double is less than the second double.
            That is, whether or not the first is strictly less than *and* not within epsilon of
            the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the LessThan comparison.</returns>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.GreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the GreaterThan comparison.</returns>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.LessThanOrClose(System.Double,System.Double)">
            <summary>
            LessThanOrClose returns whether or not the first double is less than or close to
            the second double.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the LessThanOrClose comparison.</returns>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            GreaterThanOrClose returns whether or not the first double is greater than or close to
            the second double.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the GreaterThanOrClose comparison.</returns>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.IsFinite(System.Double)">
            <summary>
            Test to see if a double is a finite number (is not NaN or Infinity).
            </summary>
            <param name='value'>The value to test.</param>
            <returns>Whether or not the value is a finite number.</returns>
        </member>
        <member name="M:GameCore.Standard.DoubleUtilities.IsValidSize(System.Double)">
            <summary>
            Test to see if a double a valid size value (is finite and > 0).
            </summary>
            <param name='value'>The value to test.</param>
            <returns>Whether or not the value is a valid size value.</returns>
        </member>
        <member name="T:GameCore.Struct.AcquireSettings">
            <summary>
            Represents configuration settings for automatic ability acquisition and casting behavior.
            </summary>
            <remarks>
            AcquireSettings defines how abilities should behave when it comes to automatic casting,
            target acquisition, and recasting logic. This is commonly used for AI-controlled units
            or abilities that have automatic behavior patterns. The settings control when and how
            abilities are automatically triggered based on various conditions and filters.
            Note: This class is currently under development and some features may not be fully implemented.
            </remarks>
            <example>
            <code>
            var settings = new AcquireSettings
            {
                AutoCast = true,
                AutoCastOn = true,
                Recast = false,
                Enabled = true,
                TargetingFilters = new TargetFilterComplex { /* filter configuration */ }
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.AutoCast">
            <summary>
            Gets or sets a value indicating whether the ability can be automatically cast.
            </summary>
            <value>True if the ability supports automatic casting; otherwise, false.</value>
            <remarks>
            When enabled, this allows the ability to be cast automatically by AI systems or
            automatic behavior logic without direct player input. This is typically used for
            passive abilities or AI-controlled unit behaviors.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.AutoCastOn">
            <summary>
            Gets or sets a value indicating whether automatic casting is currently active.
            </summary>
            <value>True if automatic casting is currently enabled; otherwise, false.</value>
            <remarks>
            This setting controls whether the automatic casting feature is currently active.
            It can be toggled independently of the AutoCast capability, allowing players or
            systems to temporarily disable automatic behavior while preserving the configuration.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.Recast">
            <summary>
            Gets or sets a value indicating whether the ability should automatically recast when conditions are met.
            </summary>
            <value>True if the ability should recast automatically; otherwise, false.</value>
            <remarks>
            When enabled, the ability will automatically cast again after its previous casting completes,
            provided that valid targets and conditions are still available. This is useful for channeled
            abilities or abilities that should maintain continuous effect.
            Note: This feature is planned for implementation and may be used by client or AI systems.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.RecastUseAutoCast">
            <summary>
            Gets or sets a value indicating whether recasting should use the same logic as automatic casting.
            </summary>
            <value>True if recasting should follow AutoCast rules; otherwise, false.</value>
            <remarks>
            This setting determines whether the recasting behavior should follow the same targeting
            and condition logic as the initial automatic cast, or use different criteria.
            Note: This feature is not yet implemented.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether these acquire settings are enabled.
            </summary>
            <value>True if the acquire settings are active; otherwise, false.</value>
            <remarks>
            This serves as a master enable/disable switch for all automatic behavior defined
            in these settings. When disabled, none of the automatic casting or acquisition
            behaviors will function regardless of their individual settings.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.TargetingFilters">
            <summary>
            Gets or sets the complex targeting filters used to determine valid targets for automatic casting.
            </summary>
            <value>A collection of targeting filters that define which entities can be targeted.</value>
            <remarks>
            These filters are used by the automatic casting system to determine which entities
            are valid targets for the ability. The filters can include criteria such as enemy/ally
            status, unit types, health conditions, and other game-specific requirements.
            
            For unit-targeting abilities, the filters are used to determine which units can be targeted.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.SmartAcquire">
            <summary>
            Gets or sets a value indicating whether the ability should automatically acquire a target when none is provided.
            </summary>
            <value>True if the ability should automatically acquire targets; otherwise, false. Default is true.</value>
            <remarks>
            When enabled and the ability requires a target to be cast, the system will automatically
            search for and select a valid target within the specified range if no target was explicitly
            provided with the cast command. This feature works in conjunction with the targeting filters
            to ensure only appropriate targets are selected automatically.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.SmartAcquireRange">
            <summary>
            Gets or sets the range function used for automatic target acquisition.
            </summary>
            <value>
            A function that calculates the range within which to automatically acquire targets,
            or null to use the ability's default range.
            </value>
            <remarks>
            This property defines the search range for automatic target acquisition when casting
            abilities that require targets. When set to null, the ability's own casting range is used.
            This setting only takes effect when no explicit target is provided in the cast order
            and <see cref="P:GameCore.Struct.AcquireSettings.SmartAcquire"/> is enabled. The function allows for dynamic range
            calculation based on game state, unit properties, or other contextual factors.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.AcquireSettings.SmartAcquireSorting">
            <summary>
            Gets or sets the sorting comparers used for automatic target acquisition priority.
            </summary>
            <value>
            A list of comparison functions that define the priority order for target selection,
            or null to use default sorting behavior.
            </value>
            <remarks>
            This property defines custom sorting rules for automatic target acquisition. When multiple
            valid targets are found within the acquisition range, these comparers are applied in sequence
            to determine which target should be selected first. Each comparer in the list represents
            a sorting criterion (e.g., distance, health, threat level). This setting only takes effect
            when <see cref="P:GameCore.Struct.AcquireSettings.SmartAcquire"/> is enabled and no explicit target is provided.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.CooldownLocation">
            <summary>
            定义冷却时间的存储位置，决定冷却时间在哪个层级进行管理和共享
            </summary>
            <remarks>
            冷却位置决定了冷却时间的作用域和共享规则。不同的位置允许冷却时间在不同的层级上进行管理，
            从而实现各种复杂的冷却机制，如全局冷却、角色冷却、技能冷却等。
            </remarks>
        </member>
        <member name="F:GameCore.Struct.CooldownLocation.Self">
            <summary>
            自身冷却 - 仅影响当前对象
            </summary>
            <remarks>
            冷却时间仅对当前的技能、物品或能力实例有效，不会影响其他实例。
            </remarks>
        </member>
        <member name="F:GameCore.Struct.CooldownLocation.Item">
            <summary>
            物品冷却 - 技能的默认值，当没有物品时会回退到技能冷却
            </summary>
            <remarks>
            冷却时间与特定物品关联。这是技能的默认冷却位置，
            因为没有物品时会回退到技能冷却机制。
            </remarks>
        </member>
        <member name="F:GameCore.Struct.CooldownLocation.Ability">
            <summary>
            技能冷却 - 冷却时间与特定技能关联
            </summary>
            <remarks>
            同一技能上相同冷却数据链接的冷却实例共享同一个冷却时间。
            </remarks>
        </member>
        <member name="F:GameCore.Struct.CooldownLocation.Unit">
            <summary>
            单位冷却 - 冷却时间与特定单位关联
            </summary>
            <remarks>
            冷却时间在单位级别进行管理，同一单位上相同冷却数据链接的冷却实例共享同一个冷却时间。
            </remarks>
        </member>
        <member name="F:GameCore.Struct.CooldownLocation.Player">
            <summary>
            玩家冷却 - 冷却时间与特定玩家关联
            </summary>
            <remarks>
            冷却时间在玩家级别进行管理，同一玩家上相同冷却数据链接的冷却实例共享同一个冷却时间。
            </remarks>
        </member>
        <member name="F:GameCore.Struct.CooldownLocation.Game">
            <summary>
            游戏冷却 - 全局冷却时间
            </summary>
            <remarks>
            冷却时间在整个游戏范围内生效，整个游戏中相同冷却数据链接的冷却实例共享同一个冷却时间。
            </remarks>
        </member>
        <member name="T:GameCore.Struct.Cost">
            <summary>
            Represents the cost requirements for performing an action, including cooldowns, charges, vitals, and player resources.
            </summary>
            <remarks>
            The Cost class provides a comprehensive system for defining and managing resource requirements for game actions
            such as casting spells, using abilities, or performing other operations. It supports multiple types of costs
            including cooldown timers, charge systems, vital properties (like health and mana), and player-specific resources.
            The class includes validation methods to check if costs can be afforded and execution methods to actually
            spend the resources when an action is performed.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.Cost.Cooldown">
            <summary>
            Gets or sets the active cooldown requirement for this cost.
            </summary>
            <value>A game data link to a cooldown configuration, or <c>null</c> if no cooldown is required.</value>
            <remarks>
            Active cooldowns prevent actions from being performed until a specified time has elapsed.
            This is commonly used for abilities that have a recharge time between uses.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.Cost.Charge">
            <summary>
            Gets or sets the charge system requirement for this cost.
            </summary>
            <value>A game data link to a charge configuration, or <c>null</c> if no charges are required.</value>
            <remarks>
            Charge systems allow actions to be performed a limited number of times before requiring
            a recharge period. This is useful for abilities with multiple uses but limited availability.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.Cost.Vital">
            <summary>
            Gets or sets the vital property costs (such as health, mana, or energy) required for this action.
            </summary>
            <value>A dictionary mapping vital properties to their cost functions.</value>
            <remarks>
            Vital costs are typically used for abilities that consume health, mana, or other character resources.
            The cost functions allow for dynamic calculation based on the execution context, such as scaling
            with level or other modifiers.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.Cost.PlayerCost">
            <summary>
            Gets or sets the player-specific numeric costs required for this action.
            </summary>
            <value>A dictionary mapping player numeric properties to their cost functions.</value>
            <remarks>
            Player costs represent resources that belong to the player rather than individual units,
            such as gold, experience, or other shared resources. This feature is currently under development.
            </remarks>
        </member>
        <member name="M:GameCore.Struct.Cost.CooldownCheck(GameCore.CostSystem.ICostSpender)">
            <summary>
            Performs a cooldown and charge check for the specified cost spender.
            </summary>
            <param name="requester">The object requesting to spend costs, which manages cooldowns and charges.</param>
            <returns>A command result indicating whether the cooldown and charge requirements are satisfied.</returns>
            <remarks>
            This method validates that the requester can proceed based on cooldown timers and available charges.
            It does not check other cost types like vital or player resources.
            </remarks>
        </member>
        <member name="M:GameCore.Struct.Cost.CanAfford(GameCore.EntitySystem.Entity,GameCore.Interface.IExecutionContext,GameCore.CostSystem.ICostSpender,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified caster can afford this cost.
            </summary>
            <param name="caster">The entity attempting to pay the cost.</param>
            <param name="context">The execution context providing additional parameters for cost calculation.</param>
            <param name="requester">The object requesting to spend costs.</param>
            <param name="testOnly">If <c>true</c>, only tests affordability without caching results for spending; if <c>false</c>, caches results for efficient spending.</param>
            <param name="skipCooldownCheckInTest">If <c>true</c> and <paramref name="testOnly"/> is <c>true</c>, skips cooldown validation for performance.</param>
            <returns>A command result indicating whether the cost can be afforded.</returns>
            <remarks>
            This method performs comprehensive validation of all cost requirements including cooldowns, charges,
            vital properties, and player resources. When <paramref name="testOnly"/> is <c>false</c>, it caches
            the calculated costs for efficient spending later. The method validates that the caster has sufficient
            resources and that adding negative costs (healing effects) wouldn't exceed maximum values.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.EffectAngleExpression">
            <summary>
            表示效果角度表达式，用于计算和确定效果的方向角度
            </summary>
            <remarks>
            EffectAngleExpression 类提供了灵活的角度计算机制，支持多种角度确定方法，
            包括使用实体朝向、两点间角度计算和显式角度设置。这对于需要方向性的效果
            （如投射物、区域效果、视觉特效等）提供了完整的角度计算解决方案。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectAngleExpression.Method">
            <summary>
            获取或设置角度计算的方法
            </summary>
            <remarks>
            默认使用朝向方法（Facing），即使用目标实体的朝向作为角度。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectAngleExpression.Location">
            <summary>
            获取或设置主要目标位置表达式
            </summary>
            <remarks>
            根据角度计算方法的不同，此位置可能作为起始点、朝向来源或角度计算的基础。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectAngleExpression.OtherLocation">
            <summary>
            获取或设置其他目标位置表达式
            </summary>
            <remarks>
            在两点间角度计算方法中，此位置作为终点，与主要位置配合计算方向角度。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectAngleExpression.LocalOffset">
            <summary>
            获取或设置本地偏移角度函数
            </summary>
            <remarks>
            此函数提供额外的角度偏移，会添加到计算出的基础角度上。
            默认返回 0，表示无偏移。可用于微调或动态调整效果方向。
            </remarks>
        </member>
        <member name="M:GameCore.Struct.EffectAngleExpression.Parse(GameCore.Execution.Effect)">
            <summary>
            解析并计算效果的最终角度
            </summary>
            <param name="effect">效果实例，提供计算所需的上下文信息</param>
            <returns>计算出的角度值，如果计算失败则返回 <c>null</c></returns>
            <remarks>
            根据配置的角度方法执行相应的计算逻辑：
            <list type="bullet">
            <item><description><see cref="F:GameCore.Struct.EffectAngleMethod.ExplicitAngle"/>：直接返回本地偏移角度</description></item>
            <item><description><see cref="F:GameCore.Struct.EffectAngleMethod.AngleBetweenTwoPoints"/>：计算两个位置间的角度并加上偏移</description></item>
            <item><description><see cref="F:GameCore.Struct.EffectAngleMethod.Facing"/>：使用目标的朝向角度并加上偏移</description></item>
            </list>
            如果所需的目标位置无法解析，方法会返回 <c>null</c>。
            </remarks>
        </member>
        <member name="T:GameCore.Struct.EffectAngleMethod">
            <summary>
            Defines the methods used to determine the angle for effect calculations.
            </summary>
            <remarks>
            This enum specifies how the angle should be calculated when applying effects
            that require directional information, such as projectiles, area effects, or
            visual effects that need orientation.
            </remarks>
        </member>
        <member name="F:GameCore.Struct.EffectAngleMethod.Facing">
            <summary>
            Uses the facing direction of the source entity.
            </summary>
            <remarks>
            The angle is determined by the current facing direction of the entity
            that is applying the effect.
            </remarks>
        </member>
        <member name="F:GameCore.Struct.EffectAngleMethod.AngleBetweenTwoPoints">
            <summary>
            Calculates the angle based on the direction between two points.
            </summary>
            <remarks>
            The angle is computed using the vector from a source point to a target point,
            typically used for targeted effects or projectiles.
            </remarks>
        </member>
        <member name="F:GameCore.Struct.EffectAngleMethod.ExplicitAngle">
            <summary>
            Uses a specific angle value that is explicitly provided.
            </summary>
            <remarks>
            The angle is set directly through configuration or parameters,
            allowing for precise control over the effect's direction.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.EffectLaunchMissileMethod">
            <summary>
            Defines the methods for launching missiles in effect systems.
            </summary>
            <remarks>
            This enum specifies how missiles should be created and launched when applying
            missile-based effects. It determines whether to create new missile instances
            or reuse existing ones for performance optimization.
            </remarks>
        </member>
        <member name="F:GameCore.Struct.EffectLaunchMissileMethod.CreateMissile">
            <summary>
            Creates a new missile instance for the effect.
            </summary>
            <remarks>
            A new missile entity is instantiated and configured specifically for this effect.
            This provides full control over the missile's properties but has higher overhead.
            </remarks>
        </member>
        <member name="F:GameCore.Struct.EffectLaunchMissileMethod.UseExistingMissile">
            <summary>
            Uses an existing missile instance for the effect.
            </summary>
            <remarks>
            Reuses a pre-existing missile entity, which can improve performance by avoiding
            instantiation costs. The existing missile's properties may be modified as needed.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.EffectOffsetExpression">
            <summary>
            表示效果偏移表达式，用于计算基于角度和距离的位置偏移
            </summary>
            <remarks>
            EffectOffsetExpression 类提供了基于极坐标系统的位置偏移计算功能。
            它使用角度表达式和距离函数来计算从原点开始的偏移位置，
            常用于技能效果、投射物发射位置、AOE效果中心等需要精确位置控制的场景。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectOffsetExpression.Angle">
            <summary>
            获取或设置角度表达式，用于确定偏移的方向
            </summary>
            <remarks>
            此角度表达式定义了从原点向外偏移的方向。
            角度可以基于实体朝向、两点间夹角或显式角度值来计算。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectOffsetExpression.Distance">
            <summary>
            获取或设置距离函数，用于确定偏移的距离
            </summary>
            <remarks>
            此函数计算从原点沿指定角度方向偏移的距离。
            默认返回 0，表示无偏移。可以基于效果的各种参数动态计算距离。
            </remarks>
        </member>
        <member name="M:GameCore.Struct.EffectOffsetExpression.Parse(GameCore.Execution.Effect,GameCore.BaseInterface.ITarget)">
            <summary>
            解析并计算最终的偏移位置
            </summary>
            <param name="effect">效果实例，提供计算所需的上下文信息</param>
            <param name="origin">原点位置，作为偏移计算的基础</param>
            <returns>计算出的最终位置点</returns>
            <remarks>
            方法首先计算偏移距离，如果距离为 0 则直接返回原点位置。
            否则使用角度表达式计算偏移方向，然后基于极坐标系统计算最终位置。
            如果角度无法确定，则返回原点位置。
            计算公式：最终位置 = 原点 + (角度方向 × 距离)
            </remarks>
        </member>
        <member name="T:GameCore.Struct.EffectOwner">
            <summary>
            Defines who owns or controls an effect in the game.
            </summary>
            <remarks>
            This enum determines the ownership context for effects, which can influence their behavior,
            interactions, and lifecycle management within the game systems.
            </remarks>
        </member>
        <member name="F:GameCore.Struct.EffectOwner.TargetLocation">
            <summary>
            The effect is owned by or associated with the target location where it was created.
            </summary>
        </member>
        <member name="F:GameCore.Struct.EffectOwner.Neutral">
            <summary>
            The effect has no specific owner and is considered neutral.
            </summary>
        </member>
        <member name="T:GameCore.Struct.EffectPropertyModification`1">
            <summary>
            Represents a property modification configuration for effects that alter entity properties.
            </summary>
            <typeparam name="T">The type of property being modified, which must implement <see cref="T:GameCore.BaseInterface.IExtendableEnum`1"/>.</typeparam>
            <remarks>
            This class defines how an effect should modify a specific property of an entity,
            including the property to modify, the calculation method for the new value,
            and optional randomization parameters.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectPropertyModification`1.Property">
            <summary>
            Gets or sets the property to be modified by this effect.
            </summary>
            <remarks>
            This property specifies which entity property will be affected by the modification.
            The property type must be part of the extendable enum system for type safety.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectPropertyModification`1.Value">
            <summary>
            Gets or sets the function used to calculate the modification value.
            </summary>
            <remarks>
            This function determines how the property value should be calculated or modified.
            The default implementation returns a constant value of 100.
            The function receives effect context parameters and returns the computed value.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.EffectPropertyModification`1.Random">
            <summary>
            Gets or sets the optional random variation applied to the modification value.
            </summary>
            <remarks>
            When specified, this value introduces randomness to the property modification,
            allowing for variable effects rather than deterministic ones.
            If <c>null</c>, no randomization is applied.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.HashSetFilter`1">
            <summary>
            Represents a generic filter for determining whether collections of items meet specific criteria based on required and excluded elements.
            </summary>
            <typeparam name="T">The type of elements to filter.</typeparam>
            <remarks>
            HashSetFilter provides a flexible way to define filtering conditions for any type of collection.
            It uses inclusion (required) and exclusion criteria to determine if a collection is valid.
            A collection passes the filter if it contains all required elements and none of the excluded elements.
            This is a generic version of TargetFilter that can work with any type, not just unit filter tags.
            </remarks>
            <example>
            <code>
            var stringFilter = new HashSetFilter&lt;string&gt;
            {
                Required = { "important", "necessary" },
                Excluded = { "forbidden", "blocked" }
            };
            
            var testSet = new HashSet&lt;string&gt; { "important", "necessary", "optional" };
            bool passes = stringFilter.Pass(testSet); // Returns true
            
            var badSet = new HashSet&lt;string&gt; { "important", "forbidden" };
            bool fails = stringFilter.Pass(badSet); // Returns false (contains excluded item)
            </code>
            </example>
        </member>
        <member name="P:GameCore.Struct.HashSetFilter`1.Required">
            <summary>
            Gets or sets the collection of elements that must be present for the filter to pass.
            </summary>
            <value>A set of elements that are required for the collection to be valid.</value>
            <remarks>
            All elements in this collection must be present in the tested collection for the filter to pass.
            If this collection is empty, no specific elements are required (only exclusions apply).
            </remarks>
        </member>
        <member name="P:GameCore.Struct.HashSetFilter`1.Excluded">
            <summary>
            Gets or sets the collection of elements that disqualify a collection from passing the filter.
            </summary>
            <value>A set of elements that, if present, will cause the filter to fail.</value>
            <remarks>
            If any element in this collection is present in the tested collection, the filter will fail
            regardless of which required elements are met. This provides a way to exclude specific elements.
            </remarks>
        </member>
        <member name="M:GameCore.Struct.HashSetFilter`1.Pass(System.Collections.Generic.HashSet{`0})">
            <summary>
            Determines whether the specified set of elements passes this filter.
            </summary>
            <param name="tags">The collection of elements to test against this filter.</param>
            <returns>True if the elements pass the filter criteria; otherwise, false.</returns>
            <remarks>
            The filter passes if:
            <list type="bullet">
            <item><description>The collection has none of the excluded elements (no overlap with Excluded)</description></item>
            <item><description>The collection has all of the required elements (Required is a subset of tags)</description></item>
            </list>
            Both conditions must be met for the filter to pass.
            </remarks>
        </member>
        <member name="M:GameCore.Struct.HashSetFilter`1.Pass(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the specified enumerable collection of elements passes this filter.
            </summary>
            <param name="tags">The enumerable collection of elements to test against this filter.</param>
            <returns>True if the elements pass the filter criteria; otherwise, false.</returns>
            <remarks>
            This overload accepts any enumerable collection, not just HashSet. The same filtering logic applies:
            the collection must contain all required elements and none of the excluded elements.
            For better performance with large collections, consider using the HashSet overload.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.InventoryFlags">
            <summary>
            定义物品栏系统的行为标志，控制物品的拾取、丢弃和使用权限
            </summary>
            <remarks>
            InventoryFlags 类用于配置物品栏系统中物品和容器的各种行为权限。
            这些标志决定了玩家或系统是否可以对物品栏中的物品执行特定操作，
            为不同类型的容器和物品提供了灵活的权限控制机制。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.InventoryFlags.HandlePickUpRequest">
            <summary>
            获取或设置是否处理物品拾取请求
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，物品栏系统会处理来自玩家的物品拾取请求。
            当设置为 <c>false</c> 时，拾取请求会被忽略，物品无法被添加到此物品栏中。
            默认值为 <c>true</c>。
            即使设置为 <c>false</c>，物品也可以通过其他方式添加到物品栏中，如通过代码添加。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.InventoryFlags.AllowDrop">
            <summary>
            获取或设置是否允许丢弃物品
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，玩家可以从物品栏中丢弃物品到游戏世界中。
            当设置为 <c>false</c> 时，丢弃操作被禁止，物品只能通过其他方式移除。
            默认值为 <c>true</c>。这通常用于限制特殊容器或任务物品的丢弃。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.InventoryFlags.AllowUse">
            <summary>
            获取或设置是否允许使用物品
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，玩家可以直接使用物品栏中的物品（如消耗品、工具等）。
            当设置为 <c>false</c> 时，使用操作被禁止，物品可能需要先移动到其他位置才能使用。
            默认值为 <c>true</c>。这用于控制特定容器中物品的可用性。
            </remarks>
        </member>
        <member name="T:GameCore.Struct.EItemCategory">
            <summary>
            定义物品的分类类型，用于组织和管理游戏中的各种物品
            </summary>
            <remarks>
            此枚举提供了扩展能力，允许在运行时动态添加新的物品分类。
            物品分类用于物品栏管理、UI 显示、过滤器和其他需要按类型组织物品的系统中。
            可以通过枚举扩展系统添加自定义的物品分类，如武器、防具、消耗品等。
            </remarks>
        </member>
        <member name="T:GameCore.Struct.LeveledData`1">
            <summary>
            Represents a collection of data that varies by level, providing level-based data retrieval with automatic clamping.
            </summary>
            <typeparam name="T">The type of data stored at each level.</typeparam>
            <remarks>
            LeveledData is commonly used for game mechanics where values change as a character or ability levels up,
            such as spell damage, ability cooldowns, or unit statistics. The class automatically handles level bounds
            by clamping the requested level to the available data range.
            </remarks>
            <example>
            <code>
            var damage = new LeveledData&lt;int&gt; { 10, 20, 30, 40, 50 };
            
            int level1Damage = damage.GetLeveledData(0); // Returns 10 (level 0)
            int level3Damage = damage.GetLeveledData(2); // Returns 30 (level 2)
            int maxDamage = damage.GetLeveledData(999);   // Returns 50 (clamped to max level)
            </code>
            </example>
        </member>
        <member name="M:GameCore.Struct.LeveledData`1.GetLeveledData(System.Int32)">
            <summary>
            Retrieves the data for the specified level, automatically clamping the level to valid bounds.
            </summary>
            <param name="level">The zero-based level index to retrieve data for.</param>
            <returns>The data for the specified level, or the closest valid level if the input is out of bounds.</returns>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the LeveledData collection is empty.</exception>
            <remarks>
            This method provides safe access to leveled data by automatically clamping the level parameter:
            <list type="bullet">
            <item><description>Negative levels are clamped to 0 (minimum level)</description></item>
            <item><description>Levels exceeding the data count are clamped to the maximum available level</description></item>
            </list>
            This ensures that valid data is always returned as long as the collection is not empty.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.MorphFlags">
            <summary>
            定义变身系统的行为标志，控制变身时哪些属性和特征会发生改变
            </summary>
            <remarks>
            MorphFlags 类用于配置单位变身时的各种变化选项。变身是游戏中常见的机制，
            可以用于技能效果、形态转换、临时强化等场景。这些标志提供了细粒度的控制，
            允许开发者精确定义变身过程中哪些方面会被修改。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.MorphFlags.ChangeModel">
            <summary>
            获取或设置是否改变模型外观
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，变身会改变单位的 3D 模型、材质和视觉外观。
            这是最常见的变身效果，让单位看起来完全不同。
            默认值为 <c>true</c>。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.MorphFlags.ChangeAbilities">
            <summary>
            获取或设置是否改变技能能力
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，变身会改变单位可用的技能和能力。
            这允许变身形态拥有完全不同的技能组合。
            默认值为 <c>false</c>。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.MorphFlags.ChangeResponses">
            <summary>
            获取或设置是否改变响应行为
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，变身会改变单位对各种事件和刺激的响应方式。
            这包括 AI 行为、交互方式、触发条件等。
            默认值为 <c>false</c>。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.MorphFlags.ChangeUnitProperties">
            <summary>
            获取或设置是否改变单位属性
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，变身会改变单位的基础属性，如生命值、攻击力、移动速度等。
            这允许变身形态具有不同的战斗能力和特征。
            默认值为 <c>false</c>。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.MorphFlags.ChangeUnitStates">
            <summary>
            获取或设置是否改变单位状态
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，变身会改变单位的各种状态标记和分类。
            这可能影响单位如何被其他系统识别和处理。
            默认值为 <c>false</c>。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.MorphFlags.ChangeHeight">
            <summary>
            获取或设置是否改变单位高度
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，变身会改变单位的物理高度。
            这影响碰撞检测、视线计算和其他基于高度的游戏机制。
            默认值为 <c>false</c>。
            TODO: 高度系统待实现
            </remarks>
        </member>
        <member name="P:GameCore.Struct.MorphFlags.ChangeLoot">
            <summary>
            获取或设置是否改变掉落物品
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，变身会改变单位死亡时掉落的物品。
            这允许不同形态的单位掉落不同的战利品。
            默认值为 <c>false</c>。
            TODO: 掉落系统待实现
            </remarks>
        </member>
        <member name="T:GameCore.Struct.PlayerData">
            <summary>
            Represents configuration data for a player in the game, including their identity, controller type, and team status.
            </summary>
            <remarks>
            This class is used to define player properties during game setup and initialization.
            It contains information about how the player is controlled and their relationship to other players.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.PlayerData.Id">
            <summary>
            Gets or sets the unique identifier for this player.
            </summary>
        </member>
        <member name="P:GameCore.Struct.PlayerData.Controller">
            <summary>
            Gets or sets the type of controller that manages this player (e.g., human, AI).
            </summary>
        </member>
        <member name="P:GameCore.Struct.PlayerData.IsNeutral">
            <summary>
            Gets or sets a value indicating whether this player is neutral (not aligned with any team).
            </summary>
        </member>
        <member name="T:GameCore.Struct.PriorityComparer`1">
            <summary>
            优先级比较器，按顺序执行多个比较函数直到得出结果。
            </summary>
            <typeparam name="T">要比较的元素类型</typeparam>
            <remarks>
            <para>
            当比较两个元素时，优先执行列表中前面的比较函数，
            如果比较出结果直接返回结果，如果前面的比较函数没有结果
            才会按顺序执行后面的比较函数直到得出结果或者返回0。
            </para>
            <para>
            此类继承自 <see cref="T:System.Collections.Generic.List`1"/>，因此可以直接使用集合操作来管理比较函数，
            同时实现了 <see cref="T:System.Collections.Generic.IComparer`1"/> 接口，可以直接用于排序操作。
            </para>
            <para>
            使用示例：
            <code>
            // 创建优先级比较器
            var comparer = new PriorityComparer&lt;Unit&gt;();
            comparer.Add((a, b) => a.Health.CompareTo(b.Health));
            comparer.Add((a, b) => a.DistanceTo(player).CompareTo(b.DistanceTo(player)));
            
            // 排序
            var sortedUnits = comparer.Sort(units);
            
            // 或者直接用于List.Sort
            units.Sort(comparer);
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:GameCore.Struct.PriorityComparer`1.#ctor">
            <summary>
            优先级比较器，按顺序执行多个比较函数直到得出结果。
            </summary>
            <typeparam name="T">要比较的元素类型</typeparam>
            <remarks>
            <para>
            当比较两个元素时，优先执行列表中前面的比较函数，
            如果比较出结果直接返回结果，如果前面的比较函数没有结果
            才会按顺序执行后面的比较函数直到得出结果或者返回0。
            </para>
            <para>
            此类继承自 <see cref="T:System.Collections.Generic.List`1"/>，因此可以直接使用集合操作来管理比较函数，
            同时实现了 <see cref="T:System.Collections.Generic.IComparer`1"/> 接口，可以直接用于排序操作。
            </para>
            <para>
            使用示例：
            <code>
            // 创建优先级比较器
            var comparer = new PriorityComparer&lt;Unit&gt;();
            comparer.Add((a, b) => a.Health.CompareTo(b.Health));
            comparer.Add((a, b) => a.DistanceTo(player).CompareTo(b.DistanceTo(player)));
            
            // 排序
            var sortedUnits = comparer.Sort(units);
            
            // 或者直接用于List.Sort
            units.Sort(comparer);
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:GameCore.Struct.PriorityComparer`1.#ctor(System.Collections.Generic.IEnumerable{System.Comparison{`0}})">
            <summary>
            使用指定的比较函数集合初始化优先级比较器。
            </summary>
            <param name="comparisons">比较函数集合</param>
        </member>
        <member name="M:GameCore.Struct.PriorityComparer`1.Compare(`0,`0)">
            <summary>
            比较两个对象并返回它们的相对顺序。
            </summary>
            <param name="x">要比较的第一个对象</param>
            <param name="y">要比较的第二个对象</param>
            <returns>
            一个有符号整数，指示 x 与 y 的相对值：
            <list type="table">
            <item><term>小于 0</term><description>x 小于 y</description></item>
            <item><term>0</term><description>x 等于 y</description></item>
            <item><term>大于 0</term><description>x 大于 y</description></item>
            </list>
            </returns>
            <remarks>
            按顺序执行列表中的比较函数，直到某个函数返回非零值。
            如果所有比较函数都返回0，则返回0。
            </remarks>
        </member>
        <member name="M:GameCore.Struct.PriorityComparer`1.Sort(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            使用当前比较器对指定的集合进行排序。
            </summary>
            <param name="source">要排序的集合</param>
            <returns>排序后的新列表</returns>
            <remarks>
            此方法会创建一个新的列表，不会修改原始集合。
            </remarks>
        </member>
        <member name="T:GameCore.Struct.PropertyModificationOperation">
            <summary>
            Defines the types of operations that can be performed when modifying properties.
            </summary>
            <remarks>
            This enum is used to specify how a property value should be changed during modification operations.
            </remarks>
        </member>
        <member name="F:GameCore.Struct.PropertyModificationOperation.Set">
            <summary>
            Sets the property to a specific value, replacing the current value.
            </summary>
        </member>
        <member name="F:GameCore.Struct.PropertyModificationOperation.Add">
            <summary>
            Adds a value to the current property value.
            </summary>
        </member>
        <member name="T:GameCore.Struct.ResponseDamageFlags">
            <summary>
            定义伤害响应系统的行为标志，控制特定伤害事件的处理方式
            </summary>
            <remarks>
            ResponseDamageFlags 类用于配置伤害响应系统如何处理不同类型的伤害事件。
            这些标志决定了响应器是否会对特定的伤害情况（如致命伤害、暴击、零伤害等）做出反应，
            为创建复杂的伤害响应机制提供了灵活的控制选项。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.ResponseDamageFlags.Fatal">
            <summary>
            获取或设置是否响应致命伤害
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，响应器会对导致单位死亡的伤害事件做出反应。
            这通常用于死亡时触发的特殊效果，如死亡爆炸、复活机制或遗言技能。
            默认值为 <c>false</c>。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.ResponseDamageFlags.SetAsCrit">
            <summary>
            获取或设置是否将伤害设置为暴击
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，响应器可以强制将触发的伤害标记为暴击。
            这允许某些技能或效果确保产生暴击伤害，无视正常的暴击计算。
            默认值为 <c>false</c>。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.ResponseDamageFlags.HandleZeroDamage">
            <summary>
            获取或设置是否处理零伤害事件
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，响应器会对造成 0 点伤害的攻击做出反应。
            这包括被完全抵挡、免疫或其他原因导致的无效伤害。
            用于在即使没有造成实际伤害时也需要触发某些效果的场景。
            默认值为 <c>false</c>。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.ResponseDamageFlags.HandleNullifiedDamage">
            <summary>
            获取或设置是否处理被无效化的伤害
            </summary>
            <remarks>
            当设置为 <c>true</c> 时，响应器会对被护盾、无敌或其他保护机制完全抵消的伤害做出反应。
            这与零伤害不同，无效化伤害是指原本会造成伤害但被特殊机制阻止的情况。
            用于在伤害被阻挡时仍需要触发响应的场景。
            默认值为 <c>false</c>。
            </remarks>
        </member>
        <member name="T:GameCore.Struct.SpellCastTime">
            <summary>
            Represents the timing configuration for spell or ability casting phases.
            </summary>
            <remarks>
            SpellCastTime defines the various time durations involved in casting a spell or using an ability.
            It breaks down the casting process into distinct phases: preswing (preparation), cast (actual casting),
            channel (sustained effect), and backswing (recovery). Each phase can have different timing requirements
            and may be affected by various modifiers such as cast speed, interruption, or other game mechanics.
            This granular timing control allows for sophisticated spell mechanics and balanced gameplay.
            </remarks>
            <example>
            <code>
            var castTime = new SpellCastTime
            {
                Preswing = (_) => TimeSpan.FromMilliseconds(300),  // 0.3s preparation
                Cast = (_) => TimeSpan.FromSeconds(2),             // 2s casting time
                Channel = (_) => TimeSpan.FromSeconds(5),          // 5s channeling
                Backswing = (_) => TimeSpan.FromMilliseconds(200)  // 0.2s recovery
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.Struct.SpellCastTime.Preswing">
            <summary>
            Gets or sets the preswing time function for the spell casting.
            </summary>
            <value>A function that calculates the preswing duration based on execution context.</value>
            <remarks>
            Preswing represents the preparation phase before the actual spell casting begins.
            During this time, the caster may play preparation animations, gather energy, or perform
            other preliminary actions. The preswing phase can typically be interrupted without
            triggering cooldowns or consuming resources.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.SpellCastTime.Cast">
            <summary>
            Gets or sets the cast time function for the main spell casting phase.
            </summary>
            <value>A function that calculates the casting duration based on execution context.</value>
            <remarks>
            The cast time represents the core casting phase where the spell effect is being prepared
            and channeled. During this phase, the caster is typically vulnerable to interruption,
            and interrupting the cast may trigger partial cooldowns or resource consumption.
            This is often the longest phase of spell casting.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.SpellCastTime.Channel">
            <summary>
            Gets or sets the channel time function for sustained spell effects.
            </summary>
            <value>A function that calculates the channeling duration based on execution context.</value>
            <remarks>
            Channel time represents the duration for which a spell effect is actively maintained
            after the initial cast completes. During channeling, the caster typically cannot perform
            other actions and must maintain focus to continue the effect. Channeled spells can often
            be canceled early or interrupted by external effects.
            Spell costs will typically be consumed at the start of the channel phase.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.SpellCastTime.Backswing">
            <summary>
            Gets or sets the backswing time function for the spell recovery phase.
            </summary>
            <value>A function that calculates the recovery duration based on execution context.</value>
            <remarks>
            Backswing represents the recovery time after a spell has been cast.
            Backswing is typically can be interrupted by subsequent actions.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.SpellCastTime.NormalizedDuration">
            <summary>
            Gets or sets the normalized duration for the core casting phases (Preswing + Cast + Channel).
            When set, enforces that the combined time of these three phases equals exactly this value,
            while preserving their relative proportions.
            </summary>
            <value>A function that calculates the normalized duration based on execution context.</value>
            <remarks>
            <para>
            <strong>Primary Use Case:</strong> This property is primarily designed for basic attack abilities
            where precise attack interval control is required. For such abilities, designers typically:
            <list type="bullet">
            <item><description>Set <c>NormalizedDuration</c> to the desired attack interval</description></item>
            <item><description>Do not configure cooldown (cooldown = 0)</description></item>
            <item><description>Configure backswing as interruptible</description></item>
            </list>
            </para>
            <para>
            <strong>Scaling Behavior:</strong> When <c>NormalizedDuration</c> is set, all casting phases
            are scaled by the same factor to maintain animation coherence:
            <list type="bullet">
            <item><description><strong>Preswing, Cast, Channel:</strong> Scaled to fit exactly within <c>NormalizedDuration</c></description></item>
            <item><description><strong>Backswing:</strong> Scaled by the same factor but not included in <c>NormalizedDuration</c></description></item>
            </list>
            </para>
            <para>
            <strong>Attack Interval Control:</strong> For abilities with interruptible backswing,
            the effective attack interval equals <c>NormalizedDuration</c> because subsequent attacks
            will interrupt the backswing phase. This provides precise attack rhythm control.
            </para>
            <para>
            <strong>Example:</strong> Setting <c>NormalizedDuration = 2s</c> for a basic attack with
            original timings Preswing=0.3s, Cast=1.2s, Channel=0.5s, Backswing=0.6s:
            <list type="bullet">
            <item><description>Scale factor = 2s / (0.3s + 1.2s + 0.5s) = 1.0</description></item>
            <item><description>Adjusted: Preswing=0.3s, Cast=1.2s, Channel=0.5s, Backswing=0.6s</description></item>
            <item><description>Complete casting time = 2.6s (for animation/UI purposes)</description></item>
            <item><description>Effective attack interval = 2s (due to backswing interruption)</description></item>
            </list>
            </para>
            <para>
            <strong>Edge Cases:</strong> If the sum of original core phase durations is zero or very small,
            the phases will be distributed equally within the normalized duration. Backswing scaling
            follows the same factor to maintain visual consistency.
            </para>
            </remarks>
        </member>
        <member name="T:GameCore.Struct.TargetFilter">
            <summary>
            Represents a filter for determining whether targets meet specific criteria based on unit filter tags.
            </summary>
            <remarks>
            The TargetFilter class provides a flexible way to define targeting conditions for abilities, spells,
            and other game systems. It uses inclusion (required) and exclusion criteria to determine if a target
            is valid. A target passes the filter if it has all required tags and none of the excluded tags.
            </remarks>
            <example>
            <code>
            var filter = new TargetFilter
            {
                Required = { UnitFilterTag.Enemy, UnitFilterTag.Alive },
                Excluded = { UnitFilterTag.Structure }
            };
            
            // This would target living enemy units but not structures
            bool canTarget = filter.Pass(targetTags);
            </code>
            </example>
        </member>
        <member name="P:GameCore.Struct.TargetFilter.Required">
            <summary>
            Gets or sets the collection of tags that a target must have to pass the filter.
            </summary>
            <value>A set of unit filter tags that are required for the target to be valid.</value>
            <remarks>
            All tags in this collection must be present on the target for the filter to pass.
            If this collection is empty, no specific tags are required (only exclusions apply).
            </remarks>
        </member>
        <member name="P:GameCore.Struct.TargetFilter.Excluded">
            <summary>
            Gets or sets the collection of tags that disqualify a target from passing the filter.
            </summary>
            <value>A set of unit filter tags that, if present, will cause the filter to fail.</value>
            <remarks>
            If any tag in this collection is present on the target, the filter will fail regardless
            of which required tags are met. This provides a way to exclude specific types of targets.
            </remarks>
        </member>
        <member name="M:GameCore.Struct.TargetFilter.Pass(System.Collections.Generic.HashSet{GameCore.BaseType.UnitFilterTag})">
            <summary>
            Determines whether the specified set of tags passes this filter.
            </summary>
            <param name="tags">The collection of tags to test against this filter.</param>
            <returns>True if the tags pass the filter criteria; otherwise, false.</returns>
            <remarks>
            The filter passes if:
            <list type="bullet">
            <item><description>The target has none of the excluded tags (no overlap with Excluded)</description></item>
            <item><description>The target has all of the required tags (Required is a subset of tags)</description></item>
            </list>
            Both conditions must be met for the filter to pass.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.TargetFilterComplex">
            <summary>
            Represents a complex target filter that combines multiple individual target filters using OR logic.
            </summary>
            <remarks>
            TargetFilterComplex extends the List&lt;TargetFilter&gt; to provide a collection of filters where
            a target passes if it satisfies ANY of the individual filters in the collection. This allows
            for flexible targeting conditions where multiple different criteria can make a target valid.
            For example, you could target either "living enemies" OR "undead allies" by combining two
            separate filters. If the collection is empty, all targets pass by default.
            </remarks>
            <example>
            <code>
            var complexFilter = new TargetFilterComplex
            {
                new TargetFilter { Required = { UnitFilterTag.Enemy, UnitFilterTag.Alive } },
                new TargetFilter { Required = { UnitFilterTag.Ally, UnitFilterTag.Undead } }
            };
            
            // This will pass for either living enemies OR undead allies
            bool passes = complexFilter.Pass(targetTags);
            </code>
            </example>
        </member>
        <member name="M:GameCore.Struct.TargetFilterComplex.Pass(System.Collections.Generic.HashSet{GameCore.BaseType.UnitFilterTag})">
            <summary>
            Determines whether the specified set of tags passes this complex filter.
            </summary>
            <param name="tags">The collection of unit filter tags to test against this filter.</param>
            <returns>True if the tags pass any of the individual filters, or if no filters are defined; otherwise, false.</returns>
            <remarks>
            This method uses OR logic - the target passes if it satisfies ANY of the individual filters
            in the collection. If the collection is empty (no filters defined), the method returns true,
            effectively allowing all targets to pass. This provides a safe default for unfiltered targeting.
            </remarks>
        </member>
        <member name="M:GameCore.Struct.TargetFilterComplex.Pass(GameCore.EntitySystem.Entity,GameCore.EntitySystem.Entity)">
            <summary>
            Determines whether the specified target entity passes this complex filter from the perspective of the caster.
            </summary>
            <param name="caster">The entity that is performing the targeting (used to determine relationships).</param>
            <param name="target">The entity being evaluated as a potential target.</param>
            <returns>True if the target passes any of the individual filters, or if no filters are defined; otherwise, false.</returns>
            <remarks>
            This method automatically extracts the target's filter tags relative to the caster and then
            evaluates them against all filters in the collection. It uses OR logic like the other Pass method,
            but provides a more convenient interface when working with entities directly. The method caches
            the extracted tags for efficiency during the evaluation process.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.UnitPropertyFormula">
            <summary>
            Represents a formula for calculating unit property values based on dependencies and custom calculation logic.
            </summary>
            <remarks>
            UnitPropertyFormula provides a way to define complex property calculations that depend on other unit properties.
            This is commonly used for derived statistics where one property's value is calculated based on multiple other
            properties, such as calculating total damage from base damage plus bonuses, or determining movement speed
            based on agility and equipment modifiers. The formula system ensures that dependent properties are recalculated
            when their dependencies change.
            </remarks>
            <example>
            <code>
            var healthFormula = new UnitPropertyFormula
            {
                DependedProperties = { strengthProperty, constitutionProperty },
                Formula = (complex) => complex.GetFinal(strengthProperty) * 10 + complex.GetFinal(constitutionProperty) * 5
            };
            </code>
            </example>
        </member>
        <member name="P:GameCore.Struct.UnitPropertyFormula.DependedProperties">
            <summary>
            Gets or sets the collection of unit properties that this formula depends on.
            </summary>
            <value>A set of property links that this formula uses as input for its calculations.</value>
            <remarks>
            When any of the properties in this collection change, the formula will be recalculated automatically.
            This dependency tracking ensures that derived properties stay up-to-date when their inputs change.
            The property system uses this information to determine the order of calculations and avoid circular dependencies.
            </remarks>
        </member>
        <member name="P:GameCore.Struct.UnitPropertyFormula.Formula">
            <summary>
            Gets or sets the calculation function that computes the property value based on the unit's property complex.
            </summary>
            <value>A function that takes a UnitPropertyComplex and returns the calculated property value, or null if no formula is defined.</value>
            <remarks>
            This function is called whenever the property value needs to be recalculated. It receives a UnitPropertyComplex
            object that provides access to all of the unit's current property values. The function should use the
            GetFinal method to retrieve the final calculated values of dependent properties, ensuring that all
            modifiers and other formulas have been applied.
            </remarks>
        </member>
        <member name="T:GameCore.Struct.WeightedLink`1">
            <summary>
            表示带权重的游戏数据链接，用于随机选择和概率计算
            </summary>
            <typeparam name="T">游戏数据链接的类型</typeparam>
            <remarks>
            WeightedLink 类将游戏数据链接与权重值关联，用于实现基于权重的随机选择算法。
            这通常用于掉落系统、随机事件、AI 决策等需要概率性选择的场景。
            权重越高，被选中的概率越大。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.WeightedLink`1.Link">
            <summary>
            获取或设置游戏数据链接
            </summary>
            <remarks>
            指向具体游戏数据的链接，可以为 <c>null</c>。
            在随机选择过程中，只有非 null 的链接才会被考虑。
            </remarks>
        </member>
        <member name="P:GameCore.Struct.WeightedLink`1.Weight">
            <summary>
            获取或设置链接的权重值
            </summary>
            <remarks>
            权重决定了此链接在随机选择中被选中的相对概率。
            默认权重为 1。权重为 0 的链接不会被选中，负权重通常被视为无效。
            在多个加权链接的集合中，单个链接的选中概率 = 该链接权重 / 所有链接权重之和。
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.Data.GameDataTargetingIndicator.VectorConeActors">
            <summary>
            TODO: Implement GameDataActorSegmentedCone
            </summary>
        </member>
        <member name="P:GameCore.TargetingSystem.Data.Struct.TargetingIndicatorFlags.DebugDraw">
            <summary>
            Gets or sets a value indicating whether debug drawing is enabled. When set to true, debug shapes will be drawn in the game scene for debugging purposes. It only works for RangeActors and CursorActors, for VectorConeActors and VectorLineActors, they have their own debug drawing settings.
            </summary>
        </member>
        <member name="P:GameCore.TargetingSystem.ITargetingInfo.VectorConeAngle">
            <summary>
            If the targeting is a cone, the angle of the cone.
            </summary>
        </member>
        <member name="P:GameCore.TargetingSystem.ITargetingInfo.CursorRadius">
            <summary>
            If the targeting cursor is an area-of-effect circle, the radius of the circle.
            </summary>
        </member>
        <member name="P:GameCore.TargetingSystem.ITargetingInfo.VectorLineWidth">
            <summary>
            If the targeting is a line, the width of the line
            </summary>
        </member>
        <member name="P:GameCore.TargetingSystem.ITargetingInfo.Range">
            <summary>
            The targeting range.
            </summary>
        </member>
        <member name="P:GameCore.TargetingSystem.ITargetingInfo.AllowApproachBeyondRange">
            <summary>
            When true, the target will be considered in range even if it is out of the range, the caster will approach the target to the range.
            </summary>
        </member>
        <member name="P:GameCore.TargetingSystem.ITargetingInfo.TargetingHighlightFilter">
            <summary>
            Filter used to determine which targets are highlighted when the targeting indicator is active.
            </summary>
        </member>
        <member name="P:GameCore.TargetingSystem.ITargetingInfo.VectorHighlightLimit">
            <summary>
            The maximum number of vector line highlights to display.
            Only works when the targeting indicator has highlight actors set.
            </summary>
        </member>
        <member name="T:GameCore.TargetingSystem.RangeScaledVector">
            <summary>
            Represents a 2D vector command target, which can be used in targeting. 
            The actual targeting position is scaled based on the casting range. 
            The X and Y components of the vector are scaling factors. 
            For example, if the X component is 2 and the Y component is 3, 
            the actual target position will be (2 * range, 3 * range).
            </summary>
        </member>
        <member name="M:GameCore.TargetingSystem.RangeScaledVector.#ctor(System.Single,System.Single)">
            <summary>
            Represents a 2D vector command target, which can be used in targeting. 
            The actual targeting position is scaled based on the casting range. 
            The X and Y components of the vector are scaling factors. 
            For example, if the X component is 2 and the Y component is 3, 
            the actual target position will be (2 * range, 3 * range).
            </summary>
        </member>
        <member name="M:GameCore.TargetingSystem.RangeScaledVector.Scale(System.Single)">
            <summary>
            Scales the vector by the given range.
            </summary>
            <param name="range">The range to scale the vector by.</param>
            <returns>A scaled <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:GameCore.TargetingSystem.RangeScaledVector.TargetPosition(GameCore.BaseInterface.ITarget,System.Single)">
            <summary>
            Calculates the target position based on the source position, interact radius and the range.
            </summary>
            <param name="source">The source target.</param>
            <param name="range">The range to scale the vector by.</param>
            <returns>A <see cref="T:GameCore.SceneSystem.ScenePoint"/> representing the target position.</returns>
        </member>
        <member name="T:GameCore.TargetingSystem.TargetingIndicator">
            <summary>
            Provides visual targeting indicators for abilities and spells on the client side, including range displays, cursor effects, and target highlighting.
            </summary>
            <remarks>
            The TargetingIndicator class manages the visual feedback system for player targeting actions, such as displaying ability ranges,
            cursor indicators, targeting cones, and highlighted potential targets. It integrates with the ability system to provide
            real-time visual feedback during target selection. The class supports various indicator types including circular ranges,
            vector lines, cone effects, and individual target highlights.
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.DebugDraw">
            <summary>
            Gets or sets the debug drawing interface for rendering debugging information.
            </summary>
            <value>The debug draw interface, or null if debug drawing is disabled.</value>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.DebugDrawEnabled">
            <summary>
            Gets or sets a value indicating whether debug drawing is enabled for this targeting indicator.
            </summary>
            <value>True if debug drawing is enabled; otherwise, false.</value>
            <remarks>
            When enabled, additional visual debugging information such as range circles and geometric shapes
            will be rendered to help with development and troubleshooting.
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.RangeActors">
            <summary>
            Gets or sets the collection of actors used to display ability range indicators.
            </summary>
            <remarks>
            These actors typically show the maximum range of an ability as circular or other geometric shapes
            around the caster. They help players understand the effective area of their abilities.
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.CursorActors">
            <summary>
            Gets or sets the collection of actors used to display cursor position indicators.
            </summary>
            <remarks>
            These actors follow the player's cursor or target selection, providing visual feedback
            about where an ability will be targeted when activated.
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.VectorConeActors">
            <summary>
            Gets or sets the collection of segmented actors used to display vector cone targeting indicators.
            </summary>
            <remarks>
            Vector cone actors are used for abilities that affect targets in a cone-shaped area,
            such as breath weapons or area-of-effect spells with directional targeting.
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.VectorLineActors">
            <summary>
            Gets or sets the collection of segmented rectangle actors used to display vector line targeting indicators.
            </summary>
            <remarks>
            Vector line actors are used for abilities that affect targets in a straight line or rectangular area,
            such as projectile spells or linear area effects.
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.HighlightActors">
            <summary>
            Gets or sets the dictionary mapping entities to their highlight actors for target preview.
            </summary>
            <remarks>
            This collection manages visual highlights applied to potential targets before the ability is cast,
            giving players feedback about which entities will be affected by their ability.
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.PendingHighlightTargets">
            <summary>
            Gets or sets the collection of entities that are pending highlight updates.
            </summary>
            <remarks>
            This temporary collection tracks entities that need highlight effects added or updated
            during the next update cycle, helping to manage highlight transitions efficiently.
            </remarks>
        </member>
        <member name="M:GameCore.TargetingSystem.TargetingIndicator.CreateFromAbility(GameCore.AbilitySystem.AbilityExecute)">
            <summary>
            Creates a targeting indicator from an ability execution context.
            </summary>
            <param name="abilityExecute">The ability execution context containing targeting configuration.</param>
            <returns>A new targeting indicator instance, or null if the ability doesn't support targeting indicators.</returns>
            <remarks>
            This factory method examines the ability's configuration to determine if it should display targeting
            indicators and creates an appropriate indicator instance based on the ability's targeting requirements.
            </remarks>
        </member>
        <member name="M:GameCore.TargetingSystem.TargetingIndicator.#ctor(GameCore.TargetingSystem.ITargetingInfo,GameData.IGameLink{GameCore.TargetingSystem.Data.GameDataTargetingIndicator})">
            <summary>
            Initializes a new instance of the TargetingIndicator class with the specified targeting information and data configuration.
            </summary>
            <param name="targetingInfo">The targeting information context providing source, range, and other targeting parameters.</param>
            <param name="link">The game data link defining the visual configuration for this targeting indicator.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided link has invalid data.</exception>
            <remarks>
            This constructor sets up all the visual actors and components based on the targeting indicator configuration,
            including range displays, cursor effects, vector indicators, and highlight systems. The various actor types
            are created and configured according to the targeting parameters such as range, cursor radius, and line width.
            </remarks>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.TargetingInfo">
            <summary>
            Gets the targeting information context that provides source, range, and other targeting parameters.
            </summary>
            <value>The targeting information interface containing all targeting-related data.</value>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.Link">
            <summary>
            Gets the game data link that defines the visual configuration for this targeting indicator.
            </summary>
            <value>The game data link containing the targeting indicator configuration.</value>
        </member>
        <member name="P:GameCore.TargetingSystem.TargetingIndicator.Cache">
            <summary>
            Gets the cached targeting indicator data for efficient access to configuration properties.
            </summary>
            <value>The targeting indicator data object containing all configuration settings.</value>
        </member>
        <member name="M:GameCore.TargetingSystem.TargetingIndicator.UpdateCursorTarget(GameCore.TargetingSystem.RangeScaledVector)">
            <summary>
            Updates the cursor target position using a range-scaled vector for directional targeting.
            </summary>
            <param name="vector">The range-scaled vector indicating the target direction and distance.</param>
            <remarks>
            This method is used for abilities that target in a specific direction from the source,
            calculating the final target position based on the vector and the ability's maximum range.
            </remarks>
        </member>
        <member name="M:GameCore.TargetingSystem.TargetingIndicator.TargetFilter(GameCore.EntitySystem.Entity)">
            <summary>
            Determines whether the specified entity passes the targeting highlight filter.
            </summary>
            <param name="entity">The entity to test against the filter.</param>
            <returns>True if the entity should be highlighted; otherwise, false.</returns>
            <remarks>
            This method applies the configured targeting filter to determine if an entity should
            receive highlight effects. If no filter is configured, all entities are considered valid targets.
            </remarks>
        </member>
        <member name="M:GameCore.TargetingSystem.TargetingIndicator.FindClosest(System.Collections.Generic.IEnumerable{GameCore.EntitySystem.Entity},System.UInt32)">
            <summary>
            Finds the closest entities from a collection, limited to a specified maximum amount.
            </summary>
            <param name="entities">The collection of entities to search through.</param>
            <param name="amount">The maximum number of entities to return.</param>
            <returns>An enumerable of the closest entities, up to the specified amount.</returns>
            <remarks>
            This method sorts entities by their distance from the targeting source and returns
            the closest ones. It's used to limit highlighting effects when there are many potential targets.
            </remarks>
        </member>
        <member name="M:GameCore.TargetingSystem.TargetingIndicator.UpdateHighlights">
            <summary>
            Updates the highlight effects for all pending target entities.
            </summary>
            <remarks>
            This method manages the addition and removal of highlight actors for entities that are
            entering or leaving the targeting area. It ensures that highlight effects are properly
            synchronized with the current set of valid targets.
            </remarks>
        </member>
        <member name="M:GameCore.TargetingSystem.TargetingIndicator.UpdateCursorTarget(GameCore.BaseInterface.ITarget)">
            <summary>
            Updates the cursor target position and refreshes all targeting indicators to reflect the new target.
            </summary>
            <param name="target">The new target position or entity to aim towards.</param>
            <remarks>
            This method updates all visual targeting elements including cursor actors, vector indicators,
            and target highlights based on the new target position. It also handles range limitations
            and updates debug drawing if enabled. The method performs entity searches to identify
            potential targets within the ability's area of effect.
            </remarks>
        </member>
        <member name="T:GameCore.TaskSystem.Task">
            <summary>
            Represents an abstract base class for asynchronous tasks that can be executed, monitored, and cancelled within the game framework.
            </summary>
            <remarks>
            The Task class provides a foundation for implementing long-running operations that need to be executed over multiple game ticks.
            Unlike standard .NET tasks, these tasks are integrated with the game's tick system and provide cancellation support through
            cancellation tokens. Tasks can be started, stopped, and monitored through events. The class supports both synchronous and
            asynchronous stopping mechanisms depending on the allowSynchronousStop parameter.
            </remarks>
            <param name="token">Optional cancellation token to monitor for cancellation requests.</param>
            <param name="allowSynchronousStop">Whether the task can be stopped immediately or must wait for the next tick finalizer.</param>
        </member>
        <member name="M:GameCore.TaskSystem.Task.#ctor(System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Represents an abstract base class for asynchronous tasks that can be executed, monitored, and cancelled within the game framework.
            </summary>
            <remarks>
            The Task class provides a foundation for implementing long-running operations that need to be executed over multiple game ticks.
            Unlike standard .NET tasks, these tasks are integrated with the game's tick system and provide cancellation support through
            cancellation tokens. Tasks can be started, stopped, and monitored through events. The class supports both synchronous and
            asynchronous stopping mechanisms depending on the allowSynchronousStop parameter.
            </remarks>
            <param name="token">Optional cancellation token to monitor for cancellation requests.</param>
            <param name="allowSynchronousStop">Whether the task can be stopped immediately or must wait for the next tick finalizer.</param>
        </member>
        <member name="P:GameCore.TaskSystem.Task.Status">
            <summary>
            Gets the current status of the task.
            </summary>
            <value>The current task status indicating whether it's waiting, running, completed, or cancelled.</value>
            <remarks>
            Setting the status triggers appropriate events (OnStarted, OnCompleted, OnStopped) and manages
            the task's lifecycle transitions. The status changes are monitored by the task system.
            </remarks>
        </member>
        <member name="E:GameCore.TaskSystem.Task.OnStarted">
            <summary>
            Occurs when the task starts running.
            </summary>
            <remarks>
            This event is raised when the task transitions from WaitingForActivation to Running status.
            Subscribers can use this event to perform initialization or logging when a task begins execution.
            </remarks>
        </member>
        <member name="E:GameCore.TaskSystem.Task.OnStopped">
            <summary>
            Occurs when the task stops running, regardless of whether it completed successfully or was cancelled.
            </summary>
            <remarks>
            This event is raised for both successful completion and cancellation scenarios. It's useful
            for cleanup operations that need to occur regardless of how the task ended.
            </remarks>
        </member>
        <member name="E:GameCore.TaskSystem.Task.OnCompleted">
            <summary>
            Occurs when the task completes successfully.
            </summary>
            <remarks>
            This event is raised only when the task finishes its work successfully (not when cancelled).
            It's raised before the OnStopped event for completed tasks.
            </remarks>
        </member>
        <member name="M:GameCore.TaskSystem.Task.Start">
            <summary>
            Starts the execution of the task.
            </summary>
            <remarks>
            This method transitions the task from WaitingForActivation to Running status. If a cancellation
            token was provided, it registers a callback to handle cancellation requests. The method has no
            effect if the task is not in the WaitingForActivation state.
            </remarks>
        </member>
        <member name="M:GameCore.TaskSystem.Task.Cancel">
            <summary>
            Cancels the task execution.
            </summary>
            <remarks>
            This is a convenience method that calls Stop(false) to cancel the task. The actual stopping
            behavior depends on the allowSynchronousStop parameter set during construction.
            </remarks>
        </member>
        <member name="M:GameCore.TaskSystem.Task.Stop(System.Boolean)">
            <summary>
            Stops the task execution, either due to completion or cancellation.
            </summary>
            <param name="completed">True if the task is stopping because it completed successfully; false for cancellation.</param>
            <returns>True if the stop operation was initiated successfully; otherwise, false.</returns>
            <remarks>
            The behavior depends on the allowSynchronousStop setting. If synchronous stopping is allowed,
            the task stops immediately. Otherwise, the stop operation is deferred to the next tick finalizer
            for completed tasks, or marked as pending cancel for cancelled tasks.
            </remarks>
        </member>
        <member name="M:GameCore.TaskSystem.Task.StopSynchronous(System.Boolean)">
            <summary>
            Immediately stops the task and performs cleanup operations.
            </summary>
            <param name="completed">True if the task completed successfully; false if it was cancelled.</param>
            <returns>True if the task was stopped successfully; otherwise, false.</returns>
            <remarks>
            This method performs the actual stopping logic including unregistering cancellation tokens,
            updating the status, and clearing event handlers. It's called either immediately (for synchronous stops)
            or during tick finalization (for asynchronous stops).
            </remarks>
        </member>
        <member name="M:GameCore.TaskSystem.Task.TickFinalizer">
            <summary>
            Finalizes the task state during the tick finalizer phase.
            </summary>
            <remarks>
            This method is called by the game's tick finalizer system to handle deferred task stopping.
            It checks for pending cancellation or cancellation token requests and performs the appropriate
            stopping action. For tasks that don't have pending cancellation, it assumes successful completion.
            </remarks>
        </member>
        <member name="P:GameCore.TaskSystem.Task.IsCompleted">
            <summary>
            Gets a value indicating whether the task has completed successfully.
            </summary>
            <value>True if the task status is RanToCompletion; otherwise, false.</value>
        </member>
        <member name="P:GameCore.TaskSystem.Task.IsEnded">
            <summary>
            Gets a value indicating whether the task has finished execution (either completed, cancelled, or faulted).
            </summary>
            <value>True if the task is in a terminal state; otherwise, false.</value>
            <remarks>
            This property is useful for determining if a task is no longer active and can be cleaned up
            or removed from tracking collections.
            </remarks>
        </member>
        <member name="M:GameCore.TaskSystem.TaskResult`1.#ctor(System.Threading.Tasks.TaskStatus)">
            <summary>
            Constructor for error result
            </summary>
            <param name="error">Can only pass values that are not TaskStatus.RanToCompletion</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:GameCore.Timers.Awaitable`1">
            <summary>
            Represents an abstract awaitable task that can be used with async/await patterns while integrating with the game's thinking and tick systems.
            </summary>
            <typeparam name="TResult">The type of result produced by this awaitable task.</typeparam>
            <remarks>
            This class bridges the gap between the game's tick-based execution model and C#'s async/await functionality.
            It provides a foundation for creating game-specific awaitable operations such as delays, animations, and other
            time-based tasks that need to execute over multiple game frames. The class implements both the game's IThinker
            interface for tick-based processing and the .NET INotifyCompletion interface for async/await support.
            </remarks>
            <param name="token">Optional cancellation token to monitor for cancellation requests.</param>
            <param name="allowSynchronousStop">Whether the task can be stopped immediately or must wait for the next tick finalizer.</param>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.#ctor(System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Represents an abstract awaitable task that can be used with async/await patterns while integrating with the game's thinking and tick systems.
            </summary>
            <typeparam name="TResult">The type of result produced by this awaitable task.</typeparam>
            <remarks>
            This class bridges the gap between the game's tick-based execution model and C#'s async/await functionality.
            It provides a foundation for creating game-specific awaitable operations such as delays, animations, and other
            time-based tasks that need to execute over multiple game frames. The class implements both the game's IThinker
            interface for tick-based processing and the .NET INotifyCompletion interface for async/await support.
            </remarks>
            <param name="token">Optional cancellation token to monitor for cancellation requests.</param>
            <param name="allowSynchronousStop">Whether the task can be stopped immediately or must wait for the next tick finalizer.</param>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.Start">
            <summary>
            Starts the awaitable task and begins processing if necessary.
            </summary>
            <remarks>
            This method initiates the task execution and determines whether it needs to continue thinking
            on subsequent frames. If the task can complete immediately, it will be stopped synchronously
            or scheduled for finalization depending on the allowSynchronousStop setting.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.GetAwaiter">
            <summary>
            Gets the awaiter for this awaitable task, enabling async/await syntax.
            </summary>
            <returns>This awaitable instance, which serves as its own awaiter.</returns>
            <remarks>
            This method is required for async/await support and allows the awaitable to be used
            directly in await expressions without requiring a separate awaiter object.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.GameCore#BaseInterface#IThinker#Think(System.Int32)">
            <summary>
            Processes the thinking logic for this awaitable on each game tick.
            </summary>
            <param name="delta">The time delta since the last tick in milliseconds.</param>
            <remarks>
            This method is called by the game's thinking system on each frame while the task is active.
            It delegates to the abstract ThinkAction method for specific processing and checks if
            the task should finish after each update.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.ThinkAction(System.Int32)">
            <summary>
            Performs the specific thinking action for this awaitable task.
            </summary>
            <param name="delta">The time delta since the last tick in milliseconds.</param>
            <remarks>
            This abstract method must be implemented by derived classes to define what happens
            during each tick while the awaitable is active. This is where the core logic for
            progress tracking, countdown timers, or other time-based operations should be implemented.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.ThinkFinish">
            <summary>
            Determines whether this awaitable task should finish execution.
            </summary>
            <returns>True if the task should complete; otherwise, false to continue thinking.</returns>
            <remarks>
            This abstract method must be implemented by derived classes to define the completion
            condition for the awaitable. It's called after each ThinkAction to determine if the
            task has reached its completion criteria.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.GetResult">
            <summary>
            Gets the result value of this awaitable task.
            </summary>
            <returns>The result produced by this awaitable task.</returns>
            <remarks>
            This abstract method must be implemented by derived classes to provide the final
            result of the awaitable operation. It's called when the async/await operation completes.
            </remarks>
        </member>
        <member name="P:GameCore.Timers.Awaitable`1.Result">
            <summary>
            Gets the result of the task, either the actual result if completed or the current status.
            </summary>
            <value>A TaskResult containing either the result value or the current task status.</value>
            <remarks>
            This property provides a way to access the result without blocking. If the task is completed,
            it returns the actual result; otherwise, it returns the current task status.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Schedules a continuation action to be executed when the awaitable completes.
            </summary>
            <param name="continuation">The action to execute upon completion.</param>
            <remarks>
            This method is part of the INotifyCompletion interface and is used by the async/await
            infrastructure to schedule code that should run after the awaitable completes.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.Stop(System.Boolean)">
            <summary>
            Stops the awaitable task and disables thinking.
            </summary>
            <param name="completed">True if the task is stopping because it completed successfully; false for cancellation.</param>
            <returns>True if the stop operation was initiated successfully; otherwise, false.</returns>
            <remarks>
            This method extends the base Task stop behavior by also disabling the thinking process
            to prevent unnecessary tick processing after the task has been stopped.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Awaitable`1.StopSynchronous(System.Boolean)">
            <summary>
            Immediately stops the awaitable task, disables thinking, and executes any pending continuation.
            </summary>
            <param name="completed">True if the task completed successfully; false if it was cancelled.</param>
            <returns>True if the task was stopped successfully; otherwise, false.</returns>
            <remarks>
            This method performs the actual stopping logic including disabling thinking, executing
            the continuation callback if the task completed successfully, and cleaning up resources.
            </remarks>
        </member>
        <member name="T:GameCore.Timers.Delay">
            <summary>
            Represents an awaitable delay that can be used to pause execution for a specified duration in game time or real time.
            </summary>
            <remarks>
            This class provides a way to create delays in game logic that can be adjusted based on frame timing.
            The delay can be paused, resumed, and configured to account for frame delta time variations.
            It integrates seamlessly with async/await patterns while working with the game's tick system.
            </remarks>
            <example>
            Basic usage:
            <code>
            // Wait for 2 seconds
            await new Delay(TimeSpan.FromSeconds(2));
            
            // Wait with real-time adjustment
            var delay = new Delay(TimeSpan.FromSeconds(5)) { AdjustByFrameDelta = true };
            await delay;
            
            // Wait using milliseconds directly
            await new Delay(2000); // 2 seconds
            
            </code>
            </example>
        </member>
        <member name="P:GameCore.Timers.Delay.AdjustByFrameDelta">
            <summary>
            Gets or sets a value indicating whether the delay should be adjusted based on the frame delta time.
            </summary>
            <value>True to adjust by frame delta time; false to use fixed frame duration.</value>
            <remarks>
            <list type="bullet">
            <item><description>When set to <c>false</c>, the delay counts each game tick as a fixed duration based on <see cref="F:GameCore.GameSystem.Game.FramePerSecond"/>.</description></item>
            <item><description>When set to <c>true</c>, the delay is adjusted by the delta time of each frame, making it more accurate to real time.</description></item>
            </list>
            However, setting this to true may cause jittery behavior if the frame rate is inconsistent.
            </remarks>
            <example>
            <code>
            var delay = new Delay(TimeSpan.FromSeconds(5)) { AdjustByFrameDelta = true };
            </code>
            </example>
        </member>
        <member name="M:GameCore.Timers.Delay.#ctor(System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the Delay class with a TimeSpan duration.
            </summary>
            <param name="time">The duration to delay execution.</param>
            <param name="token">Optional cancellation token to monitor for cancellation requests.</param>
            <param name="adjustment">Optional time adjustment in milliseconds to add to the delay duration.</param>
            <param name="allowSynchronousStop">Whether the delay can be stopped immediately or must wait for the next tick finalizer.</param>
            <remarks>
            This constructor converts the TimeSpan to milliseconds and delegates to the milliseconds constructor.
            The delay starts immediately upon construction.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Delay.#ctor(System.Int32,System.Nullable{System.Threading.CancellationToken},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the Delay class with a duration in milliseconds.
            </summary>
            <param name="timeInMilliseconds">The duration to delay execution in milliseconds.</param>
            <param name="token">Optional cancellation token to monitor for cancellation requests.</param>
            <param name="adjustment">Optional time adjustment in milliseconds to add to the delay duration.</param>
            <param name="allowSynchronousStop">Whether the delay can be stopped immediately or must wait for the next tick finalizer.</param>
            <remarks>
            The delay starts immediately upon construction. The adjustment parameter can be used to fine-tune
            the delay duration, which is useful for synchronization or timing corrections.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Delay.Pause(System.Boolean)">
            <summary>
            Pauses or resumes the delay execution.
            </summary>
            <param name="on">True to pause the delay; false to resume it.</param>
            <remarks>
            When paused, the delay will stop counting down and remain at its current remaining time.
            This method has no effect if the delay has already completed.
            Pausing a delay effectively stops its thinking process until resumed.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Delay.SetRemainingTime(System.TimeSpan)">
            <summary>
            Sets the remaining time for the delay to a new value.
            </summary>
            <param name="remainingTime">The new remaining time for the delay.</param>
            <returns>True if the remaining time was successfully set; false if the delay has already completed.</returns>
            <remarks>
            This method allows you to modify the remaining time of an active delay, which can be useful
            for extending or shortening delays based on game events or conditions. The method has no
            effect if the delay has already completed.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Delay.ThinkAction(System.Int32)">
            <summary>
            Performs the delay countdown logic on each game tick.
            </summary>
            <param name="delta">The time delta since the last tick in milliseconds.</param>
            <remarks>
            This method is called automatically by the thinking system. It decrements the remaining time
            either by the actual frame delta (if AdjustByFrameDelta is true) or by the fixed frame duration.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Delay.ThinkFinish">
            <summary>
            Determines whether the delay should finish execution.
            </summary>
            <returns>True if the delay time has elapsed; otherwise, false.</returns>
            <remarks>
            This method is called after each ThinkAction to determine if the delay has reached
            its completion condition (remaining time &lt;= 0).
            </remarks>
        </member>
        <member name="P:GameCore.Timers.Delay.RemainingTime">
            <summary>
            Gets the remaining time before the delay completes.
            </summary>
            <value>A TimeSpan representing the remaining delay duration.</value>
            <remarks>
            This property provides real-time access to how much time is left in the delay.
            Once the delay completes, this value will be zero or negative.
            </remarks>
        </member>
        <member name="P:GameCore.Timers.Delay.Priority">
            <summary>
            Gets the priority value used for scheduling this delay in the thinking system.
            </summary>
            <value>A priority value based on the remaining time modulo the frame duration, or null if not applicable.</value>
            <remarks>
            This property is used internally by the game's scheduling system to optimize the order
            of delay processing. Lower values indicate higher priority.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.Delay.GetResult">
            <summary>
            Gets the result value of the delay when it completes.
            </summary>
            <returns>The remaining time in milliseconds when the delay finished (typically zero or negative).</returns>
            <remarks>
            This method is called by the await mechanism when the delay completes. The returned value
            represents how much time was remaining when the delay finished, which can be useful for
            timing calculations or detecting early completion.
            </remarks>
        </member>
        <member name="T:GameCore.Timers.DelayTill">
            <summary>
            Represents an awaitable operation that waits until a specified condition becomes true.
            </summary>
            <remarks>
            This class provides a way to pause execution until a custom condition is satisfied.
            The condition is checked every game tick until it returns true. This is useful for
            waiting on game state changes, entity conditions, or other dynamic criteria.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.DelayTill.#ctor(System.Func{System.Boolean},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.Timers.DelayTill"/> class with the specified condition.
            </summary>
            <param name="condition">A function that returns true when the wait condition is satisfied.</param>
            <param name="token">An optional cancellation token to cancel the wait operation.</param>
            <param name="allowSynchronousStop">Whether the operation can complete synchronously if the condition is already true.</param>
            <remarks>
            The condition function will be called every game tick until it returns true or the operation is cancelled.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.DelayTill.GetResult">
            <summary>
            Gets the result of the conditional wait operation.
            </summary>
            <returns>Always returns <c>true</c> when the condition is satisfied.</returns>
        </member>
        <member name="M:GameCore.Timers.DelayTill.ThinkAction(System.Int32)">
            <summary>
            Performs no action during each tick - the condition checking is handled in <see cref="M:GameCore.Timers.DelayTill.ThinkFinish"/>.
            </summary>
            <param name="delta">The time delta for this tick (unused).</param>
        </member>
        <member name="M:GameCore.Timers.DelayTill.ThinkFinish">
            <summary>
            Determines whether the conditional wait should finish by evaluating the condition.
            </summary>
            <returns>The result of the condition function.</returns>
        </member>
        <member name="T:GameCore.Timers.DelayTillWithTimeout">
            <summary>
            Represents an awaitable operation that waits until a specified condition becomes true or a timeout expires.
            </summary>
            <remarks>
            This class combines conditional waiting with timeout functionality. It will complete when either:
            - The specified condition returns true, or
            - The timeout period expires
            
            The remaining time when the operation completes indicates whether the condition was met (positive value)
            or the timeout expired (zero or negative value). This is useful for operations that need to wait for
            game state changes but have a maximum wait time to prevent infinite blocking.
            </remarks>
        </member>
        <member name="P:GameCore.Timers.DelayTillWithTimeout.AdjustByFrameDelta">
            <summary>
            Gets or sets a value indicating whether the delay should be adjusted based on the frame delta time.
            </summary>
            <remarks>
            <list type="-">
            <item>- When set to <c>false</c>, the delay counts each game tick as a fixed duration based on <see cref="F:GameCore.GameSystem.Game.FramePerSecond" />.</item>
            <item>- When set to <c>true</c>, the delay is adjusted by the delta time of each frame, making it more accurate to real time.</item>
              However, this may cause jittery behavior if the frame rate is inconsistent.
              </list>
            </remarks>
            <example>
            <code>
            var delay = new Delay(TimeSpan.FromSeconds(5)) { AdjustByFrameDelta = true };
            </code>
            </example>
        </member>
        <member name="M:GameCore.Timers.DelayTillWithTimeout.#ctor(System.Func{System.Boolean},System.TimeSpan,System.Nullable{System.Threading.CancellationToken},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.Timers.DelayTillWithTimeout"/> class with the specified condition and timeout.
            </summary>
            <param name="condition">A function that returns true when the wait condition is satisfied.</param>
            <param name="time">The maximum time to wait before timing out.</param>
            <param name="token">An optional cancellation token to cancel the wait operation.</param>
            <param name="adjustment">An optional adjustment value, in milliseconds, to modify the timeout duration.</param>
            <param name="allowSynchronousStop">Whether the operation can complete synchronously if the condition is already true.</param>
            <remarks>
            The operation will complete when either the condition becomes true or the timeout expires.
            Use <see cref="M:GameCore.Timers.DelayTillWithTimeout.GetResult"/> to determine which case occurred by checking if the remaining time is positive.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.DelayTillWithTimeout.ThinkFinish">
            <summary>
            Determines whether the conditional wait with timeout should finish.
            </summary>
            <returns><c>true</c> if the timeout has expired or the condition is satisfied; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GameCore.Timers.DelayTillWithTimeout.ThinkAction(System.Int32)">
            <summary>
            Updates the remaining time during each tick of the wait operation.
            </summary>
            <param name="delta">The time delta for this tick.</param>
            <remarks>
            The time reduction depends on the <see cref="P:GameCore.Timers.DelayTillWithTimeout.AdjustByFrameDelta"/> setting.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.DelayTillWithTimeout.GetResult">
            <summary>
            Gets the remaining time when the operation completes.
            </summary>
            <returns>
            The remaining time in milliseconds. A positive value indicates the condition was satisfied before timeout;
            zero or negative indicates the timeout expired.
            </returns>
        </member>
        <member name="T:GameCore.Timers.EventWaiter">
            <summary>
            Represents an abstract base class for awaitable event waiters that can wait for specific events to occur.
            </summary>
            <remarks>
            This class provides a foundation for creating awaitable operations that complete when specific events
            are triggered. It integrates with the async/await pattern while working with the game's task system.
            Derived classes should implement the specific event subscription and un-subscription logic.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.EventWaiter.#ctor">
            <summary>
            Initializes a new instance of the EventWaiter class and starts waiting for the event.
            </summary>
            <remarks>
            The event waiter starts immediately upon construction and will remain active until
            the target event occurs or the operation is cancelled.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.EventWaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Schedules a continuation action to be executed when the event occurs.
            </summary>
            <param name="continuation">The action to execute when the event is triggered.</param>
            <remarks>
            This method is part of the INotifyCompletion interface and is used by the async/await
            infrastructure to schedule code that should run after the event waiter completes.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.EventWaiter.GetAwaiter">
            <summary>
            Gets the awaiter for this event waiter, enabling async/await syntax.
            </summary>
            <returns>This event waiter instance, which serves as its own awaiter.</returns>
            <remarks>
            This method is required for async/await support and allows the event waiter to be used
            directly in await expressions.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.EventWaiter.GetResult">
            <summary>
            Gets the result of the event wait operation.
            </summary>
            <remarks>
            This method is called when the await operation completes. Since event waiters typically
            don't return specific values, this method performs no action.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.EventWaiter.StopSynchronous(System.Boolean)">
            <summary>
            Immediately stops the event waiter and executes any pending continuation.
            </summary>
            <param name="completed">True if the event waiter completed successfully; false if it was cancelled.</param>
            <returns>True if the event waiter was stopped successfully; otherwise, false.</returns>
            <remarks>
            This method performs the actual stopping logic including executing the continuation
            callback if the operation completed successfully and cleaning up resources.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.EventWaiter.ClearUpEvent">
            <summary>
            Clears up event subscriptions and releases event-related resources.
            </summary>
            <remarks>
            This abstract method must be implemented by derived classes to define how event
            subscriptions are cleaned up when the waiter is stopped or cancelled. This prevents
            memory leaks and ensures proper resource management.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.EventWaiter.Stop(System.Boolean)">
            <summary>
            Stops the event waiter and cleans up event subscriptions.
            </summary>
            <param name="completed">True if the event waiter is stopping because it completed successfully; false for cancellation.</param>
            <returns>True if the stop operation was initiated successfully; otherwise, false.</returns>
            <remarks>
            This method extends the base Task stop behavior by also cleaning up event subscriptions
            before proceeding with the normal stop process.
            </remarks>
        </member>
        <member name="T:GameCore.Timers.EventWaiter`1">
            <summary>
            Represents an abstract base class for event waiters that are associated with a specific target object.
            </summary>
            <typeparam name="T">The type of target object that this event waiter is associated with.</typeparam>
            <remarks>
            This generic version of EventWaiter provides a convenient way to create event waiters that are
            tied to specific objects, such as entities, components, or other game objects. The target object
            is automatically cleared when the event waiter is cleaned up to prevent memory leaks.
            </remarks>
            <param name="target">The target object that this event waiter is associated with.</param>
        </member>
        <member name="M:GameCore.Timers.EventWaiter`1.#ctor(`0)">
            <summary>
            Represents an abstract base class for event waiters that are associated with a specific target object.
            </summary>
            <typeparam name="T">The type of target object that this event waiter is associated with.</typeparam>
            <remarks>
            This generic version of EventWaiter provides a convenient way to create event waiters that are
            tied to specific objects, such as entities, components, or other game objects. The target object
            is automatically cleared when the event waiter is cleaned up to prevent memory leaks.
            </remarks>
            <param name="target">The target object that this event waiter is associated with.</param>
        </member>
        <member name="F:GameCore.Timers.EventWaiter`1.Target">
            <summary>
            Gets the target object that this event waiter is associated with.
            </summary>
            <value>The target object, or null if the event waiter has been cleaned up.</value>
            <remarks>
            This property provides access to the target object for derived classes to use in their
            event subscription logic. The target is automatically set to null during cleanup.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.EventWaiter`1.ClearUpEvent">
            <summary>
            Clears the target reference to prevent memory leaks.
            </summary>
            <remarks>
            This implementation of ClearUpEvent sets the Target to null, which helps prevent
            memory leaks by breaking the reference to the target object. Derived classes can
            override this method to provide additional cleanup logic while still calling the base implementation.
            </remarks>
        </member>
        <member name="T:GameCore.Timers.NeverEndingTask">
            <summary>
            Represents a task that never completes, designed for scenarios where indefinite waiting is required.
            </summary>
            <remarks>
            This class provides a way to create awaitable operations that intentionally never complete.
            It's useful for scenarios where you need to block execution indefinitely, such as waiting
            for external events that may never occur, or creating placeholder tasks in testing scenarios.
            Since this task never completes, awaiting it will block the calling code indefinitely unless
            cancelled through other means.
            </remarks>
            <example>
            <code>
            // This will wait forever (use with caution)
            await new NeverEndingTask();
            
            // More practical usage with cancellation
            var cts = new CancellationTokenSource();
            var task = new NeverEndingTask();
            // Cancel after some condition
            cts.Cancel(); // This won't affect NeverEndingTask directly
            </code>
            </example>
        </member>
        <member name="M:GameCore.Timers.NeverEndingTask.GetAwaiter">
            <summary>
            Gets the awaiter for this never-ending task, enabling async/await syntax.
            </summary>
            <returns>This task instance, which serves as its own awaiter.</returns>
            <remarks>
            This method is required for async/await support. Since the task never completes,
            any code awaiting this task will block indefinitely unless interrupted by external means.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.NeverEndingTask.GetResult">
            <summary>
            Gets the result of the never-ending task.
            </summary>
            <remarks>
            Since this task never completes, this method should never be called under normal circumstances.
            If called, it performs no action as there is no meaningful result to return from a task
            that never finishes.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.NeverEndingTask.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Schedules a continuation action to be executed when the task completes.
            </summary>
            <param name="continuation">The action to execute upon completion.</param>
            <remarks>
            Since this task never completes, the continuation will never be executed.
            This method is part of the INotifyCompletion interface but performs no action
            for a never-ending task.
            </remarks>
        </member>
        <member name="T:GameCore.Timers.NextTick">
            <summary>
            Represents an awaitable operation that completes after the next game tick occurs.
            </summary>
            <remarks>
            This class is useful when you need to delay execution by exactly one frame or game tick.
            It's commonly used to ensure operations happen after all current frame processing is complete,
            or to break up long-running operations across multiple frames.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.NextTick.#ctor(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.Timers.NextTick"/> class.
            </summary>
            <param name="token">An optional cancellation token to cancel the wait operation.</param>
            <remarks>
            The operation will complete after the next game tick unless cancelled via the token.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.NextTick.GetResult">
            <summary>
            Gets the result of the next tick operation.
            </summary>
            <returns>Always returns <c>true</c> when the next tick completes.</returns>
        </member>
        <member name="M:GameCore.Timers.NextTick.ThinkAction(System.Int32)">
            <summary>
            Marks that a tick has occurred during the think operation.
            </summary>
            <param name="delta">The time delta for this tick (unused in this implementation).</param>
        </member>
        <member name="M:GameCore.Timers.NextTick.ThinkFinish">
            <summary>
            Determines whether the next tick operation should finish.
            </summary>
            <returns><c>true</c> if a tick has occurred; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GameCore.Timers.SyncedDelay">
            <summary>
            A specialized timer that provides server-side precise timing with client-side time synchronization.
            Used for scenarios where server needs precise control while clients need to display timing information.
            </summary>
            <remarks>
            <para>
            This class is designed for use cases like Buff durations, where:
            - Server side uses precise <see cref="T:GameCore.Timers.Delay"/> for timing control and game logic
            - Client side gets synchronized timing information for UI display
            </para>
            <para>
            This class is lighter weight and focused specifically on the timing display use case 
            rather than full cooldown management functionality.
            </para>
            </remarks>
            <example>
            Basic usage for Buff duration:
            <code>
            // Create a synced delay
            var syncedDelay = new SyncedDelay(TimeSpan.FromSeconds(10), cooldownHost, cooldownHash);
            
            // Server: Start timing and await completion
            await syncedDelay.WaitForCompletion();
            
            // Both sides: Get timing information
            var remaining = syncedDelay.RemainingTime;
            var duration = syncedDelay.Duration;
            </code>
            </example>
        </member>
        <member name="P:GameCore.Timers.SyncedDelay.Duration">
            <summary>
            Gets the total duration of this synced delay.
            </summary>
            <value>The original duration specified when the delay was created.</value>
        </member>
        <member name="P:GameCore.Timers.SyncedDelay.RemainingTime">
            <summary>
            Gets the remaining time before the delay completes.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the remaining duration, or null if not started or paused.</value>
            <remarks>
            <para>
            On the server side, this returns the precise remaining time from the internal <see cref="T:GameCore.Timers.Delay"/> object.
            On the client side, this returns the synchronized time from the cooldown system.
            </para>
            <para>
            When paused, this property returns null on the client side to indicate that 
            the timing display should be hidden.
            </para>
            </remarks>
        </member>
        <member name="P:GameCore.Timers.SyncedDelay.IsRunning">
            <summary>
            Gets a value indicating whether the delay is currently running.
            </summary>
            <value>True if the delay is running; false if it has completed, been stopped, or not yet started.</value>
        </member>
        <member name="P:GameCore.Timers.SyncedDelay.IsCompleted">
            <summary>
            Gets a value indicating whether the delay has completed.
            </summary>
            <value>True if the delay has finished; otherwise, false.</value>
        </member>
        <member name="M:GameCore.Timers.SyncedDelay.#ctor(System.TimeSpan,GameCore.BaseInterface.ICooldownHost,System.Int64,System.Nullable{System.Threading.CancellationToken},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameCore.Timers.SyncedDelay"/> class.
            </summary>
            <param name="duration">The duration for the delay.</param>
            <param name="cooldownHost">The cooldown host for client synchronization.</param>
            <param name="cooldownHash">The unique hash for the cooldown synchronization.</param>
            <param name="cancellationToken">Optional cancellation token to monitor for cancellation requests.</param>
            <param name="adjustment">Optional time adjustment in milliseconds to add to the duration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cooldownHost"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="duration"/> is negative.</exception>
        </member>
        <member name="M:GameCore.Timers.SyncedDelay.WaitForCompletion">
            <summary>
            Starts the delay and returns a task that completes when the delay finishes.
            </summary>
            <returns>A task that represents the delay operation. The result is the remaining time in milliseconds when completed.</returns>
            <remarks>
            <para>
            On the server side, this creates the internal <see cref="T:GameCore.Timers.Delay"/> object and sets up 
            cooldown synchronization for clients. The returned task will complete when the delay finishes.
            </para>
            <para>
            On the client side, this returns an already completed task since client-side timing 
            is controlled by server synchronization.
            </para>
            </remarks>
        </member>
        <member name="M:GameCore.Timers.SyncedDelay.Pause(System.Boolean)">
            <summary>
            Pauses or resumes the delay execution.
            </summary>
            <param name="paused">True to pause the delay; false to resume it.</param>
            <remarks>
            <para>
            When paused, the server-side <see cref="T:GameCore.Timers.Delay"/> stops counting down and the 
            cooldown synchronization is cleared from clients.
            When resumed, cooldown synchronization is restarted with the current remaining time.
            </para>
            <para>
            This method has no effect if the delay has not been started or has already completed.
            </para>
            </remarks>
        </member>
        <member name="M:GameCore.Timers.SyncedDelay.SetRemainingTime(System.TimeSpan)">
            <summary>
            Sets the remaining time for the delay to a new value.
            </summary>
            <param name="remainingTime">The new remaining time for the delay.</param>
            <returns>True if the remaining time was successfully set; false if the delay has not started or has completed.</returns>
            <remarks>
            This method allows modification of the remaining time of an active delay.
            Both the server-side delay and client-side synchronization are updated.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.SyncedDelay.Stop">
            <summary>
            Stops the delay immediately.
            </summary>
            <remarks>
            This cancels the server-side delay and clears the client-side cooldown synchronization.
            </remarks>
        </member>
        <member name="M:GameCore.Timers.SyncedDelay.ToString">
            <summary>
            Returns a string representation of the synced delay.
            </summary>
            <returns>A string containing the delay's duration and remaining time information.</returns>
        </member>
        <member name="T:GameCore.Timers.Timer">
            <summary>
            Handles recurring events in an application.
            </summary>
        </member>
        <member name="M:GameCore.Timers.Timer.#ctor">
            <summary>
            Initializes a new instance of the <see cref='T:GameCore.Timers.Timer'/> class, with the properties
            set to initial values.
            </summary>
        </member>
        <member name="M:GameCore.Timers.Timer.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref='T:GameCore.Timers.Timer'/> class, setting the <see cref='P:GameCore.Timers.Timer.Interval'/> property to the specified period.
            </summary>
            <param name="interval">
            The time, in milliseconds, between events. The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </param>
        </member>
        <member name="M:GameCore.Timers.Timer.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref='T:GameCore.Timers.Timer'/> class, setting the <see cref='P:GameCore.Timers.Timer.Interval'/> property to the specified period.
            </summary>
            <param name="interval">
            The time between events. The value in milliseconds must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </param>
        </member>
        <member name="P:GameCore.Timers.Timer.AutoReset">
            <summary>
            Gets or sets a value indicating whether the Timer raises the Tick event each time the specified
            Interval has elapsed, when Enabled is set to true.
            </summary>
        </member>
        <member name="P:GameCore.Timers.Timer.Enabled">
            <summary>
            Gets or sets a value indicating whether the <see cref='T:GameCore.Timers.Timer'/>
            is able to raise events at a defined interval.
            The default value by design is false, don't change it.
            </summary>
        </member>
        <member name="P:GameCore.Timers.Timer.Interval">
            <summary>
            Gets or sets the interval on which to raise events.
            </summary>
        </member>
        <member name="E:GameCore.Timers.Timer.Elapsed">
            <summary>
            Occurs when the <see cref='P:GameCore.Timers.Timer.Interval'/> has
            elapsed.
            </summary>
        </member>
        <member name="P:GameCore.Timers.Timer.Site">
            <summary>
            Sets the enable property in design mode to true by default.
            </summary>
        </member>
        <member name="P:GameCore.Timers.Timer.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal event-handler calls that are issued when
            an interval has elapsed.
            </summary>
        </member>
        <member name="M:GameCore.Timers.Timer.BeginInit">
            <summary>
            Notifies the object that initialization is beginning and tells it to stand by.
            </summary>
        </member>
        <member name="M:GameCore.Timers.Timer.Close">
            <summary>
            Disposes of the resources (other than memory) used by
            the <see cref='T:GameCore.Timers.Timer'/>.
            </summary>
        </member>
        <member name="M:GameCore.Timers.Timer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GameCore.Timers.Timer.EndInit">
            <summary>
            Notifies the object that initialization is complete.
            </summary>
        </member>
        <member name="M:GameCore.Timers.Timer.Start">
            <summary>
            Starts the timing by setting <see cref='P:GameCore.Timers.Timer.Enabled'/> to <see langword='true'/>.
            </summary>
        </member>
        <member name="M:GameCore.Timers.Timer.Stop">
            <summary>
            Stops the timing by setting <see cref='P:GameCore.Timers.Timer.Enabled'/> to <see langword='false'/>.
            </summary>
        </member>
        <member name="T:GameCore.UserCloudData.UserData`1">
            <summary>
            用户数据集合，提供高效的数据查询和分组功能
            </summary>
            <typeparam name="T">用户数据记录类型，必须实现IUserKeyRecord接口</typeparam>
            <remarks>
            该类封装了用户数据记录集合，提供按用户ID和数据键进行分组查询的功能。
            适用于云数据查询结果的后续处理和分析。
            </remarks>
            <example>
            <code>
            // 查询用户数据
            var result = await CloudData.QueryCurrencyAsync(userIds, keys);
            if (result.IsSuccess)
            {
                var userData = result.Data;
                
                // 获取特定用户的数据
                var userRecords = userData.GetByUserId(123L);
                
                // 获取特定键的数据
                var keyRecords = userData.GetByKey("gold");
                
                // 检查数据存在性
                if (userData.HasUserId(123L))
                {
                    // 处理数据...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:GameCore.UserCloudData.UserData`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            用户数据集合，提供高效的数据查询和分组功能
            </summary>
            <typeparam name="T">用户数据记录类型，必须实现IUserKeyRecord接口</typeparam>
            <remarks>
            该类封装了用户数据记录集合，提供按用户ID和数据键进行分组查询的功能。
            适用于云数据查询结果的后续处理和分析。
            </remarks>
            <example>
            <code>
            // 查询用户数据
            var result = await CloudData.QueryCurrencyAsync(userIds, keys);
            if (result.IsSuccess)
            {
                var userData = result.Data;
                
                // 获取特定用户的数据
                var userRecords = userData.GetByUserId(123L);
                
                // 获取特定键的数据
                var keyRecords = userData.GetByKey("gold");
                
                // 检查数据存在性
                if (userData.HasUserId(123L))
                {
                    // 处理数据...
                }
            }
            </code>
            </example>
        </member>
        <member name="P:GameCore.UserCloudData.UserData`1.Records">
            <summary>
            原始记录集合
            </summary>
        </member>
        <member name="M:GameCore.UserCloudData.UserData`1.GetByKey(System.String)">
            <summary>
            根据数据键分组查询
            </summary>
            <param name="key">数据键，不能为null或空</param>
            <returns>匹配的记录集合，如果键为空则返回null</returns>
            <remarks>
            此方法会过滤出所有Key属性等于指定键的记录。
            </remarks>
        </member>
        <member name="M:GameCore.UserCloudData.UserData`1.GetByUserId(System.Int64)">
            <summary>
            根据用户ID分组查询
            </summary>
            <param name="userId">用户ID</param>
            <returns>该用户的所有记录</returns>
            <remarks>
            此方法会过滤出所有UserId属性等于指定用户ID的记录。
            </remarks>
        </member>
        <member name="M:GameCore.UserCloudData.UserData`1.GetByUserIds(System.Int64[])">
            <summary>
            根据多个用户ID查询
            </summary>
            <param name="userIds">用户ID数组</param>
            <returns>指定用户的所有记录</returns>
        </member>
        <member name="M:GameCore.UserCloudData.UserData`1.GetByKeys(System.String[])">
            <summary>
            根据多个数据键查询
            </summary>
            <param name="keys">数据键数组</param>
            <returns>指定键的所有记录</returns>
        </member>
        <member name="M:GameCore.UserCloudData.UserData`1.HasUserId(System.Int64)">
            <summary>
            检查是否包含指定用户ID的记录
            </summary>
            <param name="userId">用户ID</param>
            <returns>如果包含该用户的记录则返回true</returns>
        </member>
        <member name="M:GameCore.UserCloudData.UserData`1.HasKey(System.String)">
            <summary>
            检查是否包含指定键的记录
            </summary>
            <param name="key">数据键</param>
            <returns>如果包含该键的记录则返回true</returns>
        </member>
        <member name="P:GameCore.UserCloudData.UserData`1.Count">
            <summary>
            获取记录总数
            </summary>
        </member>
        <member name="P:GameCore.UserCloudData.UserData`1.UserCount">
            <summary>
            获取唯一用户ID的数量
            </summary>
        </member>
        <member name="P:GameCore.UserCloudData.UserData`1.KeyCount">
            <summary>
            获取唯一键的数量
            </summary>
        </member>
        <member name="T:GameCore.VitalSystem.Data.GameDataVital">
            <summary>
            表示活力值系统的数据配置，定义单位的活力值属性。活力是生命值、法力值、怒气值等拥有当前值/最大值的属性的统称。
            </summary>
            <remarks>
            此类用于配置单位的活力值相关属性，包括当前活力值类型和最大活力值的引用。
            它作为活力值系统的数据基础，允许灵活地定义不同单位的活力值特征。
            </remarks>
        </member>
        <member name="P:GameCore.VitalSystem.Data.GameDataVital.Current">
            <summary>
            获取或设置当前活力值属性的类型
            </summary>
            <remarks>
            定义此活力值数据所对应的具体属性类型，例如生命值、魔法值等。
            这个属性决定了活力值组件将管理哪种类型的数值。
            </remarks>
        </member>
        <member name="P:GameCore.VitalSystem.Data.GameDataVital.Max">
            <summary>
            获取或设置最大活力值属性的数据链接
            </summary>  
            <remarks>
            引用定义最大活力值的单位属性数据。这个链接指向具体的单位属性配置，
            允许系统动态获取和计算单位的最大活力值上限。
            </remarks>
        </member>
        <member name="T:GameCore.VitalSystem.Vital">
            <summary>
            Represents a vital property of an entity such as health, mana, or energy that has current and maximum values with regeneration.
            </summary>
            <remarks>
            The Vital class manages dynamic properties that typically change during gameplay, such as health points, mana points,
            or stamina. Each vital has a current value, maximum value, and regeneration rate. The system automatically handles
            clamping values within valid ranges and applies regeneration over time. Vitals are implemented as tag components,
            meaning each entity can have one vital per property type.
            </remarks>
        </member>
        <member name="P:GameCore.VitalSystem.Vital.PropertyMax">
            <summary>
            Gets the game data link that defines how the maximum value of this vital is calculated.
            </summary>
            <value>A game data link to the unit property configuration that determines the maximum value.</value>
            <remarks>
            The maximum value may be influenced by various factors such as level, equipment, buffs, and other modifiers.
            The actual maximum value is calculated dynamically through the unit property system.
            </remarks>
        </member>
        <member name="M:GameCore.VitalSystem.Vital.#ctor(GameCore.EntitySystem.Entity,GameCore.BaseType.PropertyVital,GameData.IGameLink{GameCore.Data.GameDataUnitProperty})">
            <param name="host">The entity that owns this vital property.</param>
            <param name="tag">The property tag that identifies this vital type.</param>
            <param name="propertyMax">The game data link that defines the maximum value calculation for this vital.</param>
        </member>
        <member name="T:GameCore.VitalSystem.Vital.Property">
            <summary>
            Defines the different properties of a vital that can be modified.
            </summary>
        </member>
        <member name="F:GameCore.VitalSystem.Vital.Property.Current">
            <summary>
            The current value of the vital (e.g., current health points).
            </summary>
        </member>
        <member name="F:GameCore.VitalSystem.Vital.Property.Regen">
            <summary>
            The regeneration rate of the vital (how much it recovers per tick).
            </summary>
        </member>
        <member name="P:GameCore.VitalSystem.Vital.Current">
            <summary>
            Gets the current value of this vital property.
            </summary>
            <value>The current amount of this vital (e.g., current health points).</value>
            <remarks>
            This value represents the actual usable amount of the vital resource. It will always be
            between 0 and the maximum value, unless modifications are pending finalization.
            </remarks>
        </member>
        <member name="P:GameCore.VitalSystem.Vital.Max">
            <summary>
            Gets the maximum value of this vital property.
            </summary>
            <value>The maximum amount this vital can reach (e.g., maximum health points).</value>
            <remarks>
            The maximum value is calculated dynamically based on the entity's properties, level,
            equipment, and other modifiers. This value may change as the entity's stats change.
            </remarks>
        </member>
        <member name="P:GameCore.VitalSystem.Vital.Regen">
            <summary>
            Gets or sets the regeneration rate of this vital property.
            </summary>
            <value>The rate at which this vital regenerates per tick.</value>
            <remarks>
            Positive values indicate regeneration (healing over time), while negative values indicate
            degeneration (damage over time). The actual regeneration is applied each game tick.
            </remarks>
        </member>
        <member name="M:GameCore.VitalSystem.Vital.Think(System.Int32)">
            <summary>
            Processes the regeneration logic for this vital on each game tick.
            </summary>
            <param name="delta">The time delta since the last tick (currently unused).</param>
            <remarks>
            This method is called automatically by the game's thinking system. It applies regeneration
            and schedules finalization to ensure values stay within valid ranges. The method only
            processes regeneration on the server side.
            </remarks>
        </member>
        <member name="M:GameCore.VitalSystem.Vital.TickFinalizer">
            <summary>
            Finalizes vital values by clamping them within valid ranges and updating thinking status.
            </summary>
            <remarks>
            This method ensures that the current value stays between 0 and the maximum value.
            It also determines whether this vital needs to continue thinking based on its regeneration
            rate and current value. This method is called automatically at the end of each tick.
            </remarks>
        </member>
        <member name="M:GameCore.VitalSystem.Vital.DisposeManaged">
            <summary>
            Releases managed resources used by this vital.
            </summary>
            <remarks>
            This method is called when the vital is being disposed. It cleans up references
            to the unit property system and calls the base disposal method.
            </remarks>
        </member>
        <member name="M:GameCore.VitalSystem.Vital.ToString">
            <summary>
            Returns a string representation of this vital showing its current state.
            </summary>
            <returns>A formatted string containing the vital's tag, current/max values, regeneration rate (if non-zero), and sync ID.</returns>
            <example>
            Example output: "Health 85/100 (85%)" or "Health 85/100 (85%) Regen: +2.5/tick [A1B2C3D4]"
            </example>
        </member>
        <member name="T:GameUI.CameraSystem.Data.GameDataCamera">
            <summary>
            This class is used to store camera data for the game.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.TargetingMode">
            <summary>
            Gets or sets the camera's targeting mode, which determines how the camera targets or interacts with entities or the scene.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.PositionBias">
            <summary>
            Gets or sets the bias applied to the camera's position. This value is used to adjust the camera's position relative to the target entity or focal point.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.TargetX">
            <summary>
            Gets or sets the target X-coordinate value when the camera is focused on a fixed position.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.TargetY">
            <summary>
            Gets or sets the target Y-coordinate value when the camera is focused on a fixed position.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.TargetZOffset">
            <summary>
            Gets or sets the target offset along the Z-axis. when the camera is in a fixed position, this value is used to determine the Z coordinate of the target point. When the camera is following a target entity, this value is used to determine the Z offset based on the target entity's position.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.PositionMode">
            <summary>
            Gets or sets the mode that determines how the camera's position is calculated.
            </summary>
            <remarks>Use this property to specify whether the camera's position is determined relative to a focal
            point, a target object, or another reference mode defined by the <see cref="T:GameCore.CameraSystem.Enum.CameraPositionMode"/>
            enumeration.</remarks>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.Rotation">
            <summary>
            Gets or sets the rotation of the camera in 3D space.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.RotationOrder">
            <summary>
            Gets or sets the order in which rotations are applied to the camera. This will affect the final orientation of the camera when multiple rotations are applied.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.FocalLength">
            <summary>
            The focal length of the camera.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.FieldOfView">
            <summary>
            Gets or sets the camera's field of view (FOV) in degrees. This property determines how wide the camera's view is, with larger values providing a wider view and smaller values providing a narrower view.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.FieldOfViewFor2K">
            <summary>
            Gets or sets the field of view for 2K resolution.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.NearClipPlane">
            <summary>
            Gets or sets the distance to the near clipping plane of the camera.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.FarClipPlane">
            <summary>
            Gets or sets the distance to the far clipping plane of the camera.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.Orthographic">
            <summary>
            Gets or sets a value indicating whether the camera uses an orthographic projection.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.UseSpringArm">
            <summary>
            Gets or sets a value indicating whether the spring arm mechanism is enabled. This mechanism is used to create a smooth camera movement by simulating a spring effect.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.SceneBounds">
            <summary>
            Used to constrain the camera's movement to a specific area. The camera will not be able to move focal point outside the bounds from the current scene.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.DisplayDebugInfo">
            <summary>
            Gets or sets a value indicating whether debug information should be displayed.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.FollowMainUnitByDefault">
            <summary>
            Gets or sets a value indicating whether the system should follow the main unit of the local player by default.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.FollowMoveTime">
            <summary>
            Determines the speed at which the camera moves when following a target entity. This value is used to smooth out the camera's movement and make it feel more natural.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.FollowMoveRateRange">
            <summary>
            Gets or sets the range of movement rates for following behavior.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.FreeTargetChangeThreshold">
            <summary>
            Gets or sets the threshold distance near the viewport's border at which 
            the cursor or finger touch triggers a change in the camera's focal target 
            during free control mode.
            </summary>
            <remarks>
            This property defines the sensitivity of the camera's focal target adjustment 
            when the cursor or touch input moves close to the edges of the viewport. 
            A smaller value makes the camera more responsive to edge proximity, 
            while a larger value requires the input to be closer to the border.
            </remarks>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.ZoomFocalLengthRate">
            <summary>
            Determines the speed at which the camera zooms in and out when using the mouse wheel or touch gestures, measured in focal length units per wheel tick.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.ZoomRotationRange">
            <summary>
            Gets or sets the range of camera rotation allowed during zoom operations.
            </summary>
        </member>
        <member name="P:GameUI.CameraSystem.Data.GameDataCamera.ZoomStageCount">
            <summary>
            Determines the number of zoom stages available when using the mouse wheel to zoom in and out.
            </summary>
        </member>
    </members>
</doc>
